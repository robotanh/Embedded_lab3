
Bai7_TouchScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009140  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031b0  080092d0  080092d0  0000a2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c480  0800c480  0000e0c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c480  0800c480  0000d480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c488  0800c488  0000e0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c488  0800c488  0000d488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c48c  0800c48c  0000d48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800c490  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e0c0  2**0
                  CONTENTS
 10 .bss          00000730  200000c0  200000c0  0000e0c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007f0  200007f0  0000e0c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e0c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015b7a  00000000  00000000  0000e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f78  00000000  00000000  00023c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  00027be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001063  00000000  00000000  00029130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026936  00000000  00000000  0002a193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d251  00000000  00000000  00050ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df7b2  00000000  00000000  0006dd1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014d4cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062d8  00000000  00000000  0014d510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  001537e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092b8 	.word	0x080092b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	080092b8 	.word	0x080092b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b96a 	b.w	8000e74 <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	460c      	mov	r4, r1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d14e      	bne.n	8000c62 <__udivmoddi4+0xaa>
 8000bc4:	4694      	mov	ip, r2
 8000bc6:	458c      	cmp	ip, r1
 8000bc8:	4686      	mov	lr, r0
 8000bca:	fab2 f282 	clz	r2, r2
 8000bce:	d962      	bls.n	8000c96 <__udivmoddi4+0xde>
 8000bd0:	b14a      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd2:	f1c2 0320 	rsb	r3, r2, #32
 8000bd6:	4091      	lsls	r1, r2
 8000bd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be0:	4319      	orrs	r1, r3
 8000be2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f f68c 	uxth.w	r6, ip
 8000bee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb04 f106 	mul.w	r1, r4, r6
 8000c02:	4299      	cmp	r1, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x64>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c0e:	f080 8112 	bcs.w	8000e36 <__udivmoddi4+0x27e>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 810f 	bls.w	8000e36 <__udivmoddi4+0x27e>
 8000c18:	3c02      	subs	r4, #2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	1a59      	subs	r1, r3, r1
 8000c1e:	fa1f f38e 	uxth.w	r3, lr
 8000c22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c26:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb00 f606 	mul.w	r6, r0, r6
 8000c32:	429e      	cmp	r6, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x94>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c3e:	f080 80fc 	bcs.w	8000e3a <__udivmoddi4+0x282>
 8000c42:	429e      	cmp	r6, r3
 8000c44:	f240 80f9 	bls.w	8000e3a <__udivmoddi4+0x282>
 8000c48:	4463      	add	r3, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11d      	cbz	r5, 8000c5e <__udivmoddi4+0xa6>
 8000c56:	40d3      	lsrs	r3, r2
 8000c58:	2200      	movs	r2, #0
 8000c5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d905      	bls.n	8000c72 <__udivmoddi4+0xba>
 8000c66:	b10d      	cbz	r5, 8000c6c <__udivmoddi4+0xb4>
 8000c68:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e7f5      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000c72:	fab3 f183 	clz	r1, r3
 8000c76:	2900      	cmp	r1, #0
 8000c78:	d146      	bne.n	8000d08 <__udivmoddi4+0x150>
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xcc>
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	f0c0 80f0 	bcc.w	8000e64 <__udivmoddi4+0x2ac>
 8000c84:	1a86      	subs	r6, r0, r2
 8000c86:	eb64 0303 	sbc.w	r3, r4, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	2d00      	cmp	r5, #0
 8000c8e:	d0e6      	beq.n	8000c5e <__udivmoddi4+0xa6>
 8000c90:	e9c5 6300 	strd	r6, r3, [r5]
 8000c94:	e7e3      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	f040 8090 	bne.w	8000dbc <__udivmoddi4+0x204>
 8000c9c:	eba1 040c 	sub.w	r4, r1, ip
 8000ca0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	2101      	movs	r1, #1
 8000caa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cba:	fb07 f006 	mul.w	r0, r7, r6
 8000cbe:	4298      	cmp	r0, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x11c>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x11a>
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	f200 80cd 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000cd2:	4626      	mov	r6, r4
 8000cd4:	1a1c      	subs	r4, r3, r0
 8000cd6:	fa1f f38e 	uxth.w	r3, lr
 8000cda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cde:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb00 f707 	mul.w	r7, r0, r7
 8000cea:	429f      	cmp	r7, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x148>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x146>
 8000cf8:	429f      	cmp	r7, r3
 8000cfa:	f200 80b0 	bhi.w	8000e5e <__udivmoddi4+0x2a6>
 8000cfe:	4620      	mov	r0, r4
 8000d00:	1bdb      	subs	r3, r3, r7
 8000d02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d06:	e7a5      	b.n	8000c54 <__udivmoddi4+0x9c>
 8000d08:	f1c1 0620 	rsb	r6, r1, #32
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d12:	431f      	orrs	r7, r3
 8000d14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d18:	fa04 f301 	lsl.w	r3, r4, r1
 8000d1c:	ea43 030c 	orr.w	r3, r3, ip
 8000d20:	40f4      	lsrs	r4, r6
 8000d22:	fa00 f801 	lsl.w	r8, r0, r1
 8000d26:	0c38      	lsrs	r0, r7, #16
 8000d28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d30:	fa1f fc87 	uxth.w	ip, r7
 8000d34:	fb00 441e 	mls	r4, r0, lr, r4
 8000d38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d40:	45a1      	cmp	r9, r4
 8000d42:	fa02 f201 	lsl.w	r2, r2, r1
 8000d46:	d90a      	bls.n	8000d5e <__udivmoddi4+0x1a6>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d4e:	f080 8084 	bcs.w	8000e5a <__udivmoddi4+0x2a2>
 8000d52:	45a1      	cmp	r9, r4
 8000d54:	f240 8081 	bls.w	8000e5a <__udivmoddi4+0x2a2>
 8000d58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d5c:	443c      	add	r4, r7
 8000d5e:	eba4 0409 	sub.w	r4, r4, r9
 8000d62:	fa1f f983 	uxth.w	r9, r3
 8000d66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x1d2>
 8000d7a:	193c      	adds	r4, r7, r4
 8000d7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d80:	d267      	bcs.n	8000e52 <__udivmoddi4+0x29a>
 8000d82:	45a4      	cmp	ip, r4
 8000d84:	d965      	bls.n	8000e52 <__udivmoddi4+0x29a>
 8000d86:	3b02      	subs	r3, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d92:	eba4 040c 	sub.w	r4, r4, ip
 8000d96:	429c      	cmp	r4, r3
 8000d98:	46ce      	mov	lr, r9
 8000d9a:	469c      	mov	ip, r3
 8000d9c:	d351      	bcc.n	8000e42 <__udivmoddi4+0x28a>
 8000d9e:	d04e      	beq.n	8000e3e <__udivmoddi4+0x286>
 8000da0:	b155      	cbz	r5, 8000db8 <__udivmoddi4+0x200>
 8000da2:	ebb8 030e 	subs.w	r3, r8, lr
 8000da6:	eb64 040c 	sbc.w	r4, r4, ip
 8000daa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dae:	40cb      	lsrs	r3, r1
 8000db0:	431e      	orrs	r6, r3
 8000db2:	40cc      	lsrs	r4, r1
 8000db4:	e9c5 6400 	strd	r6, r4, [r5]
 8000db8:	2100      	movs	r1, #0
 8000dba:	e750      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f103 	lsr.w	r1, r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dcc:	4094      	lsls	r4, r2
 8000dce:	430c      	orrs	r4, r1
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd8:	fa1f f78c 	uxth.w	r7, ip
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3110 	mls	r1, r8, r0, r3
 8000de4:	0c23      	lsrs	r3, r4, #16
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f107 	mul.w	r1, r0, r7
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x24c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dfa:	d22c      	bcs.n	8000e56 <__udivmoddi4+0x29e>
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	d92a      	bls.n	8000e56 <__udivmoddi4+0x29e>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e14:	fb01 f307 	mul.w	r3, r1, r7
 8000e18:	42a3      	cmp	r3, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x276>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e24:	d213      	bcs.n	8000e4e <__udivmoddi4+0x296>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d911      	bls.n	8000e4e <__udivmoddi4+0x296>
 8000e2a:	3902      	subs	r1, #2
 8000e2c:	4464      	add	r4, ip
 8000e2e:	1ae4      	subs	r4, r4, r3
 8000e30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e34:	e739      	b.n	8000caa <__udivmoddi4+0xf2>
 8000e36:	4604      	mov	r4, r0
 8000e38:	e6f0      	b.n	8000c1c <__udivmoddi4+0x64>
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e706      	b.n	8000c4c <__udivmoddi4+0x94>
 8000e3e:	45c8      	cmp	r8, r9
 8000e40:	d2ae      	bcs.n	8000da0 <__udivmoddi4+0x1e8>
 8000e42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e4a:	3801      	subs	r0, #1
 8000e4c:	e7a8      	b.n	8000da0 <__udivmoddi4+0x1e8>
 8000e4e:	4631      	mov	r1, r6
 8000e50:	e7ed      	b.n	8000e2e <__udivmoddi4+0x276>
 8000e52:	4603      	mov	r3, r0
 8000e54:	e799      	b.n	8000d8a <__udivmoddi4+0x1d2>
 8000e56:	4630      	mov	r0, r6
 8000e58:	e7d4      	b.n	8000e04 <__udivmoddi4+0x24c>
 8000e5a:	46d6      	mov	lr, sl
 8000e5c:	e77f      	b.n	8000d5e <__udivmoddi4+0x1a6>
 8000e5e:	4463      	add	r3, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e74d      	b.n	8000d00 <__udivmoddi4+0x148>
 8000e64:	4606      	mov	r6, r0
 8000e66:	4623      	mov	r3, r4
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e70f      	b.n	8000c8c <__udivmoddi4+0xd4>
 8000e6c:	3e02      	subs	r6, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	e730      	b.n	8000cd4 <__udivmoddi4+0x11c>
 8000e72:	bf00      	nop

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e8c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f84 <MX_ADC1_Init+0x10c>)
 8000e8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e96:	4b3a      	ldr	r3, [pc, #232]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e9c:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea2:	4b37      	ldr	r3, [pc, #220]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea8:	4b35      	ldr	r3, [pc, #212]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb0:	4b33      	ldr	r3, [pc, #204]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb6:	4b32      	ldr	r3, [pc, #200]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eb8:	4a33      	ldr	r2, [pc, #204]	@ (8000f88 <MX_ADC1_Init+0x110>)
 8000eba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebc:	4b30      	ldr	r3, [pc, #192]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed6:	482a      	ldr	r0, [pc, #168]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ed8:	f003 f940 	bl	800415c <HAL_ADC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ee2:	f001 fdf3 	bl	8002acc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4822      	ldr	r0, [pc, #136]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ef8:	f003 f974 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f02:	f001 fde3 	bl	8002acc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f06:	2309      	movs	r3, #9
 8000f08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4619      	mov	r1, r3
 8000f12:	481b      	ldr	r0, [pc, #108]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f14:	f003 f966 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f1e:	f001 fdd5 	bl	8002acc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f22:	230a      	movs	r3, #10
 8000f24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f26:	2303      	movs	r3, #3
 8000f28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4814      	ldr	r0, [pc, #80]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f30:	f003 f958 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f3a:	f001 fdc7 	bl	8002acc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f3e:	230b      	movs	r3, #11
 8000f40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f42:	2304      	movs	r3, #4
 8000f44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f4c:	f003 f94a 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f56:	f001 fdb9 	bl	8002acc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f62:	463b      	mov	r3, r7
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f68:	f003 f93c 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f72:	f001 fdab 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000dc 	.word	0x200000dc
 8000f84:	40012000 	.word	0x40012000
 8000f88:	0f000001 	.word	0x0f000001

08000f8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	@ 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800109c <HAL_ADC_MspInit+0x110>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d171      	bne.n	8001092 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	4a3a      	ldr	r2, [pc, #232]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fbe:	4b38      	ldr	r3, [pc, #224]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b34      	ldr	r3, [pc, #208]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a33      	ldr	r2, [pc, #204]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b31      	ldr	r3, [pc, #196]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b2d      	ldr	r3, [pc, #180]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a2c      	ldr	r2, [pc, #176]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001002:	2307      	movs	r3, #7
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001006:	2303      	movs	r3, #3
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4823      	ldr	r0, [pc, #140]	@ (80010a4 <HAL_ADC_MspInit+0x118>)
 8001016:	f003 feff 	bl	8004e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800101a:	2303      	movs	r3, #3
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	481e      	ldr	r0, [pc, #120]	@ (80010a8 <HAL_ADC_MspInit+0x11c>)
 800102e:	f003 fef3 	bl	8004e18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001032:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001034:	4a1e      	ldr	r2, [pc, #120]	@ (80010b0 <HAL_ADC_MspInit+0x124>)
 8001036:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001038:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800103e:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001044:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800104c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001050:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001054:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001058:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800105c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001060:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001062:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001068:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800106a:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001076:	480d      	ldr	r0, [pc, #52]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001078:	f003 fbe4 	bl	8004844 <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001082:	f001 fd23 	bl	8002acc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a08      	ldr	r2, [pc, #32]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800108a:	639a      	str	r2, [r3, #56]	@ 0x38
 800108c:	4a07      	ldr	r2, [pc, #28]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	@ 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40012000 	.word	0x40012000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020400 	.word	0x40020400
 80010ac:	20000124 	.word	0x20000124
 80010b0:	40026410 	.word	0x40026410

080010b4 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	at24c_Check();
 80010b8:	f000 f83c 	bl	8001134 <at24c_Check>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 80010ce:	88fa      	ldrh	r2, [r7, #6]
 80010d0:	230a      	movs	r3, #10
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	2301      	movs	r3, #1
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	f107 030f 	add.w	r3, r7, #15
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2310      	movs	r3, #16
 80010e0:	21a0      	movs	r1, #160	@ 0xa0
 80010e2:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <at24c_ReadOneByte+0x34>)
 80010e4:	f004 faa4 	bl	8005630 <HAL_I2C_Mem_Read>
	return temp;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001d8 	.word	0x200001d8

080010f8 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af04      	add	r7, sp, #16
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	80fb      	strh	r3, [r7, #6]
 8001104:	4613      	mov	r3, r2
 8001106:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 8001108:	88fa      	ldrh	r2, [r7, #6]
 800110a:	230a      	movs	r3, #10
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	2301      	movs	r3, #1
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	1d7b      	adds	r3, r7, #5
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2310      	movs	r3, #16
 8001118:	21a0      	movs	r1, #160	@ 0xa0
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <at24c_WriteOneByte+0x38>)
 800111c:	f004 f98e 	bl	800543c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001120:	2005      	movs	r0, #5
 8001122:	f002 fff7 	bl	8004114 <HAL_Delay>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001d8 	.word	0x200001d8

08001134 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 800113a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800113e:	f7ff ffbf 	bl	80010c0 <at24c_ReadOneByte>
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b55      	cmp	r3, #85	@ 0x55
 800114a:	d101      	bne.n	8001150 <at24c_Check+0x1c>
 800114c:	2300      	movs	r3, #0
 800114e:	e010      	b.n	8001172 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001150:	2155      	movs	r1, #85	@ 0x55
 8001152:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001156:	f7ff ffcf 	bl	80010f8 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 800115a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800115e:	f7ff ffaf 	bl	80010c0 <at24c_ReadOneByte>
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b55      	cmp	r3, #85	@ 0x55
 800116a:	d101      	bne.n	8001170 <at24c_Check+0x3c>
 800116c:	2300      	movs	r3, #0
 800116e:	e000      	b.n	8001172 <at24c_Check+0x3e>
	}
	return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800117a:	b590      	push	{r4, r7, lr}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	6039      	str	r1, [r7, #0]
 8001184:	80fb      	strh	r3, [r7, #6]
 8001186:	4613      	mov	r3, r2
 8001188:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800118a:	e00d      	b.n	80011a8 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	80fa      	strh	r2, [r7, #6]
 8001192:	683c      	ldr	r4, [r7, #0]
 8001194:	1c62      	adds	r2, r4, #1
 8001196:	603a      	str	r2, [r7, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff91 	bl	80010c0 <at24c_ReadOneByte>
 800119e:	4603      	mov	r3, r0
 80011a0:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1ee      	bne.n	800118c <at24c_Read+0x12>
	}
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd90      	pop	{r4, r7, pc}

080011b8 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	80fb      	strh	r3, [r7, #6]
 80011c4:	4613      	mov	r3, r2
 80011c6:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 80011c8:	e00c      	b.n	80011e4 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff90 	bl	80010f8 <at24c_WriteOneByte>
		WriteAddr++;
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	3301      	adds	r3, #1
 80011dc:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011e4:	88bb      	ldrh	r3, [r7, #4]
 80011e6:	1e5a      	subs	r2, r3, #1
 80011e8:	80ba      	strh	r2, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1ed      	bne.n	80011ca <at24c_Write+0x12>
	}
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2108      	movs	r1, #8
 8001200:	4802      	ldr	r0, [pc, #8]	@ (800120c <button_init+0x14>)
 8001202:	f003 ffbd 	bl	8005180 <HAL_GPIO_WritePin>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40020c00 	.word	0x40020c00

08001210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <MX_DMA_Init+0x3c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a0b      	ldr	r2, [pc, #44]	@ (800124c <MX_DMA_Init+0x3c>)
 8001220:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <MX_DMA_Init+0x3c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2038      	movs	r0, #56	@ 0x38
 8001238:	f003 facd 	bl	80047d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800123c:	2038      	movs	r0, #56	@ 0x38
 800123e:	f003 fae6 	bl	800480e <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	@ 0x38
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800127c:	4b2f      	ldr	r3, [pc, #188]	@ (800133c <MX_FSMC_Init+0xec>)
 800127e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001282:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001284:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <MX_FSMC_Init+0xec>)
 8001286:	4a2e      	ldr	r2, [pc, #184]	@ (8001340 <MX_FSMC_Init+0xf0>)
 8001288:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800128a:	4b2c      	ldr	r3, [pc, #176]	@ (800133c <MX_FSMC_Init+0xec>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001290:	4b2a      	ldr	r3, [pc, #168]	@ (800133c <MX_FSMC_Init+0xec>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001296:	4b29      	ldr	r3, [pc, #164]	@ (800133c <MX_FSMC_Init+0xec>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800129c:	4b27      	ldr	r3, [pc, #156]	@ (800133c <MX_FSMC_Init+0xec>)
 800129e:	2210      	movs	r2, #16
 80012a0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012a2:	4b26      	ldr	r3, [pc, #152]	@ (800133c <MX_FSMC_Init+0xec>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012a8:	4b24      	ldr	r3, [pc, #144]	@ (800133c <MX_FSMC_Init+0xec>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012ae:	4b23      	ldr	r3, [pc, #140]	@ (800133c <MX_FSMC_Init+0xec>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <MX_FSMC_Init+0xec>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <MX_FSMC_Init+0xec>)
 80012bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <MX_FSMC_Init+0xec>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <MX_FSMC_Init+0xec>)
 80012ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <MX_FSMC_Init+0xec>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012d6:	4b19      	ldr	r3, [pc, #100]	@ (800133c <MX_FSMC_Init+0xec>)
 80012d8:	2200      	movs	r2, #0
 80012da:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80012dc:	4b17      	ldr	r3, [pc, #92]	@ (800133c <MX_FSMC_Init+0xec>)
 80012de:	2200      	movs	r2, #0
 80012e0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80012e2:	230f      	movs	r3, #15
 80012e4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80012e6:	230f      	movs	r3, #15
 80012e8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80012ea:	233c      	movs	r3, #60	@ 0x3c
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80012f2:	2310      	movs	r3, #16
 80012f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80012f6:	2311      	movs	r3, #17
 80012f8:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012fa:	2300      	movs	r3, #0
 80012fc:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80012fe:	2308      	movs	r3, #8
 8001300:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001302:	230f      	movs	r3, #15
 8001304:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001306:	2309      	movs	r3, #9
 8001308:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800130e:	2310      	movs	r3, #16
 8001310:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001312:	2311      	movs	r3, #17
 8001314:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800131a:	463a      	mov	r2, r7
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	@ (800133c <MX_FSMC_Init+0xec>)
 8001324:	f005 fe1a 	bl	8006f5c <HAL_SRAM_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800132e:	f001 fbcd 	bl	8002acc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001332:	bf00      	nop
 8001334:	3738      	adds	r7, #56	@ 0x38
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000184 	.word	0x20000184
 8001340:	a0000104 	.word	0xa0000104

08001344 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001358:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <HAL_FSMC_MspInit+0x88>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d131      	bne.n	80013c4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001360:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <HAL_FSMC_MspInit+0x88>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <HAL_FSMC_MspInit+0x8c>)
 800136c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800136e:	4a18      	ldr	r2, [pc, #96]	@ (80013d0 <HAL_FSMC_MspInit+0x8c>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6393      	str	r3, [r2, #56]	@ 0x38
 8001376:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <HAL_FSMC_MspInit+0x8c>)
 8001378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001382:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8001386:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001394:	230c      	movs	r3, #12
 8001396:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4619      	mov	r1, r3
 800139c:	480d      	ldr	r0, [pc, #52]	@ (80013d4 <HAL_FSMC_MspInit+0x90>)
 800139e:	f003 fd3b 	bl	8004e18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013a2:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80013a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013b4:	230c      	movs	r3, #12
 80013b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	4806      	ldr	r0, [pc, #24]	@ (80013d8 <HAL_FSMC_MspInit+0x94>)
 80013be:	f003 fd2b 	bl	8004e18 <HAL_GPIO_Init>
 80013c2:	e000      	b.n	80013c6 <HAL_FSMC_MspInit+0x82>
    return;
 80013c4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200001d4 	.word	0x200001d4
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40020c00 	.word	0x40020c00

080013dc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013e4:	f7ff ffae 	bl	8001344 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08e      	sub	sp, #56	@ 0x38
 80013f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
 800140a:	4b7e      	ldr	r3, [pc, #504]	@ (8001604 <MX_GPIO_Init+0x214>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a7d      	ldr	r2, [pc, #500]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001410:	f043 0310 	orr.w	r3, r3, #16
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b7b      	ldr	r3, [pc, #492]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	623b      	str	r3, [r7, #32]
 8001420:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	4b77      	ldr	r3, [pc, #476]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a76      	ldr	r2, [pc, #472]	@ (8001604 <MX_GPIO_Init+0x214>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b74      	ldr	r3, [pc, #464]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	4b70      	ldr	r3, [pc, #448]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a6f      	ldr	r2, [pc, #444]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001448:	f043 0320 	orr.w	r3, r3, #32
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b6d      	ldr	r3, [pc, #436]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	61bb      	str	r3, [r7, #24]
 8001458:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	4b69      	ldr	r3, [pc, #420]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a68      	ldr	r2, [pc, #416]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001464:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b66      	ldr	r3, [pc, #408]	@ (8001604 <MX_GPIO_Init+0x214>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b62      	ldr	r3, [pc, #392]	@ (8001604 <MX_GPIO_Init+0x214>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a61      	ldr	r2, [pc, #388]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b5f      	ldr	r3, [pc, #380]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b5b      	ldr	r3, [pc, #364]	@ (8001604 <MX_GPIO_Init+0x214>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a5a      	ldr	r2, [pc, #360]	@ (8001604 <MX_GPIO_Init+0x214>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b58      	ldr	r3, [pc, #352]	@ (8001604 <MX_GPIO_Init+0x214>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b54      	ldr	r3, [pc, #336]	@ (8001604 <MX_GPIO_Init+0x214>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a53      	ldr	r2, [pc, #332]	@ (8001604 <MX_GPIO_Init+0x214>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b51      	ldr	r3, [pc, #324]	@ (8001604 <MX_GPIO_Init+0x214>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001604 <MX_GPIO_Init+0x214>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001604 <MX_GPIO_Init+0x214>)
 80014d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b4a      	ldr	r3, [pc, #296]	@ (8001604 <MX_GPIO_Init+0x214>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2170      	movs	r1, #112	@ 0x70
 80014ea:	4847      	ldr	r0, [pc, #284]	@ (8001608 <MX_GPIO_Init+0x218>)
 80014ec:	f003 fe48 	bl	8005180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 80014f6:	4845      	ldr	r0, [pc, #276]	@ (800160c <MX_GPIO_Init+0x21c>)
 80014f8:	f003 fe42 	bl	8005180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001502:	4843      	ldr	r0, [pc, #268]	@ (8001610 <MX_GPIO_Init+0x220>)
 8001504:	f003 fe3c 	bl	8005180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800150e:	4841      	ldr	r0, [pc, #260]	@ (8001614 <MX_GPIO_Init+0x224>)
 8001510:	f003 fe36 	bl	8005180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2108      	movs	r1, #8
 8001518:	483f      	ldr	r0, [pc, #252]	@ (8001618 <MX_GPIO_Init+0x228>)
 800151a:	f003 fe31 	bl	8005180 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800151e:	2370      	movs	r3, #112	@ 0x70
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	4834      	ldr	r0, [pc, #208]	@ (8001608 <MX_GPIO_Init+0x218>)
 8001536:	f003 fc6f 	bl	8004e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 800153a:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001550:	4619      	mov	r1, r3
 8001552:	482e      	ldr	r0, [pc, #184]	@ (800160c <MX_GPIO_Init+0x21c>)
 8001554:	f003 fc60 	bl	8004e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001558:	23c0      	movs	r3, #192	@ 0xc0
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001568:	4619      	mov	r1, r3
 800156a:	482a      	ldr	r0, [pc, #168]	@ (8001614 <MX_GPIO_Init+0x224>)
 800156c:	f003 fc54 	bl	8004e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001570:	2330      	movs	r3, #48	@ 0x30
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001580:	4619      	mov	r1, r3
 8001582:	4822      	ldr	r0, [pc, #136]	@ (800160c <MX_GPIO_Init+0x21c>)
 8001584:	f003 fc48 	bl	8004e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8001588:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	481b      	ldr	r0, [pc, #108]	@ (8001610 <MX_GPIO_Init+0x220>)
 80015a2:	f003 fc39 	bl	8004e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 80015a6:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	4814      	ldr	r0, [pc, #80]	@ (800160c <MX_GPIO_Init+0x21c>)
 80015bc:	f003 fc2c 	bl	8004e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80015c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	480e      	ldr	r0, [pc, #56]	@ (8001614 <MX_GPIO_Init+0x224>)
 80015da:	f003 fc1d 	bl	8004e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80015de:	2308      	movs	r3, #8
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	4808      	ldr	r0, [pc, #32]	@ (8001618 <MX_GPIO_Init+0x228>)
 80015f6:	f003 fc0f 	bl	8004e18 <HAL_GPIO_Init>

}
 80015fa:	bf00      	nop
 80015fc:	3738      	adds	r7, #56	@ 0x38
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	40021000 	.word	0x40021000
 800160c:	40020800 	.word	0x40020800
 8001610:	40021800 	.word	0x40021800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020c00 	.word	0x40020c00

0800161c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <MX_I2C1_Init+0x50>)
 8001622:	4a13      	ldr	r2, [pc, #76]	@ (8001670 <MX_I2C1_Init+0x54>)
 8001624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <MX_I2C1_Init+0x50>)
 8001628:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <MX_I2C1_Init+0x58>)
 800162a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800162c:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001632:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001638:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <MX_I2C1_Init+0x50>)
 800163a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800163e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001640:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <MX_I2C1_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <MX_I2C1_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164c:	4b07      	ldr	r3, [pc, #28]	@ (800166c <MX_I2C1_Init+0x50>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <MX_I2C1_Init+0x50>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001658:	4804      	ldr	r0, [pc, #16]	@ (800166c <MX_I2C1_Init+0x50>)
 800165a:	f003 fdab 	bl	80051b4 <HAL_I2C_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001664:	f001 fa32 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200001d8 	.word	0x200001d8
 8001670:	40005400 	.word	0x40005400
 8001674:	000186a0 	.word	0x000186a0

08001678 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	@ 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a19      	ldr	r2, [pc, #100]	@ (80016fc <HAL_I2C_MspInit+0x84>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d12b      	bne.n	80016f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <HAL_I2C_MspInit+0x88>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a17      	ldr	r2, [pc, #92]	@ (8001700 <HAL_I2C_MspInit+0x88>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_I2C_MspInit+0x88>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016b6:	23c0      	movs	r3, #192	@ 0xc0
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ba:	2312      	movs	r3, #18
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c6:	2304      	movs	r3, #4
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	480c      	ldr	r0, [pc, #48]	@ (8001704 <HAL_I2C_MspInit+0x8c>)
 80016d2:	f003 fba1 	bl	8004e18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <HAL_I2C_MspInit+0x88>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	4a08      	ldr	r2, [pc, #32]	@ (8001700 <HAL_I2C_MspInit+0x88>)
 80016e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_I2C_MspInit+0x88>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016f2:	bf00      	nop
 80016f4:	3728      	adds	r7, #40	@ 0x28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40005400 	.word	0x40005400
 8001700:	40023800 	.word	0x40023800
 8001704:	40020400 	.word	0x40020400

08001708 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001712:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <LCD_WR_REG+0x1c>)
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	8013      	strh	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	600ffffe 	.word	0x600ffffe

08001728 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001732:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <LCD_WR_DATA+0x1c>)
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	8053      	strh	r3, [r2, #2]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	600ffffe 	.word	0x600ffffe

08001748 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <LCD_RD_DATA+0x20>)
 8001750:	885b      	ldrh	r3, [r3, #2]
 8001752:	b29b      	uxth	r3, r3
 8001754:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	b29b      	uxth	r3, r3
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	600ffffe 	.word	0x600ffffe

0800176c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4604      	mov	r4, r0
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4623      	mov	r3, r4
 800177c:	80fb      	strh	r3, [r7, #6]
 800177e:	4603      	mov	r3, r0
 8001780:	80bb      	strh	r3, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	807b      	strh	r3, [r7, #2]
 8001786:	4613      	mov	r3, r2
 8001788:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800178a:	202a      	movs	r0, #42	@ 0x2a
 800178c:	f7ff ffbc 	bl	8001708 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	b29b      	uxth	r3, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ffc6 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ffc0 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ffba 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ffb4 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80017c0:	202b      	movs	r0, #43	@ 0x2b
 80017c2:	f7ff ffa1 	bl	8001708 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80017c6:	88bb      	ldrh	r3, [r7, #4]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ffab 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ffa5 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80017de:	883b      	ldrh	r3, [r7, #0]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff9f 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80017ea:	883b      	ldrh	r3, [r7, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff99 	bl	8001728 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80017f6:	202c      	movs	r0, #44	@ 0x2c
 80017f8:	f7ff ff86 	bl	8001708 <LCD_WR_REG>
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bd90      	pop	{r4, r7, pc}

08001804 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800180e:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <lcd_Clear+0x60>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <lcd_Clear+0x60>)
 8001818:	885b      	ldrh	r3, [r3, #2]
 800181a:	3b01      	subs	r3, #1
 800181c:	b29b      	uxth	r3, r3
 800181e:	2100      	movs	r1, #0
 8001820:	2000      	movs	r0, #0
 8001822:	f7ff ffa3 	bl	800176c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001826:	2300      	movs	r3, #0
 8001828:	81fb      	strh	r3, [r7, #14]
 800182a:	e011      	b.n	8001850 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 800182c:	2300      	movs	r3, #0
 800182e:	81bb      	strh	r3, [r7, #12]
 8001830:	e006      	b.n	8001840 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff77 	bl	8001728 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800183a:	89bb      	ldrh	r3, [r7, #12]
 800183c:	3301      	adds	r3, #1
 800183e:	81bb      	strh	r3, [r7, #12]
 8001840:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <lcd_Clear+0x60>)
 8001842:	885b      	ldrh	r3, [r3, #2]
 8001844:	89ba      	ldrh	r2, [r7, #12]
 8001846:	429a      	cmp	r2, r3
 8001848:	d3f3      	bcc.n	8001832 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800184a:	89fb      	ldrh	r3, [r7, #14]
 800184c:	3301      	adds	r3, #1
 800184e:	81fb      	strh	r3, [r7, #14]
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <lcd_Clear+0x60>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	89fa      	ldrh	r2, [r7, #14]
 8001856:	429a      	cmp	r2, r3
 8001858:	d3e8      	bcc.n	800182c <lcd_Clear+0x28>
		}
	}
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	2000022c 	.word	0x2000022c

08001868 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	4604      	mov	r4, r0
 8001870:	4608      	mov	r0, r1
 8001872:	4611      	mov	r1, r2
 8001874:	461a      	mov	r2, r3
 8001876:	4623      	mov	r3, r4
 8001878:	80fb      	strh	r3, [r7, #6]
 800187a:	4603      	mov	r3, r0
 800187c:	80bb      	strh	r3, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	807b      	strh	r3, [r7, #2]
 8001882:	4613      	mov	r3, r2
 8001884:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001886:	887b      	ldrh	r3, [r7, #2]
 8001888:	3b01      	subs	r3, #1
 800188a:	b29a      	uxth	r2, r3
 800188c:	883b      	ldrh	r3, [r7, #0]
 800188e:	3b01      	subs	r3, #1
 8001890:	b29b      	uxth	r3, r3
 8001892:	88b9      	ldrh	r1, [r7, #4]
 8001894:	88f8      	ldrh	r0, [r7, #6]
 8001896:	f7ff ff69 	bl	800176c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 800189a:	88bb      	ldrh	r3, [r7, #4]
 800189c:	81fb      	strh	r3, [r7, #14]
 800189e:	e010      	b.n	80018c2 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	81bb      	strh	r3, [r7, #12]
 80018a4:	e006      	b.n	80018b4 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 80018a6:	8c3b      	ldrh	r3, [r7, #32]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff3d 	bl	8001728 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 80018ae:	89bb      	ldrh	r3, [r7, #12]
 80018b0:	3301      	adds	r3, #1
 80018b2:	81bb      	strh	r3, [r7, #12]
 80018b4:	89ba      	ldrh	r2, [r7, #12]
 80018b6:	887b      	ldrh	r3, [r7, #2]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d3f4      	bcc.n	80018a6 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 80018bc:	89fb      	ldrh	r3, [r7, #14]
 80018be:	3301      	adds	r3, #1
 80018c0:	81fb      	strh	r3, [r7, #14]
 80018c2:	89fa      	ldrh	r2, [r7, #14]
 80018c4:	883b      	ldrh	r3, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d3ea      	bcc.n	80018a0 <lcd_Fill+0x38>
		}
	}
}
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd90      	pop	{r4, r7, pc}

080018d4 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
 80018de:	460b      	mov	r3, r1
 80018e0:	80bb      	strh	r3, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80018e6:	88bb      	ldrh	r3, [r7, #4]
 80018e8:	88fa      	ldrh	r2, [r7, #6]
 80018ea:	88b9      	ldrh	r1, [r7, #4]
 80018ec:	88f8      	ldrh	r0, [r7, #6]
 80018ee:	f7ff ff3d 	bl	800176c <lcd_AddressSet>
	LCD_WR_DATA(color);
 80018f2:	887b      	ldrh	r3, [r7, #2]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff17 	bl	8001728 <LCD_WR_DATA>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001902:	b590      	push	{r4, r7, lr}
 8001904:	b08d      	sub	sp, #52	@ 0x34
 8001906:	af00      	add	r7, sp, #0
 8001908:	4604      	mov	r4, r0
 800190a:	4608      	mov	r0, r1
 800190c:	4611      	mov	r1, r2
 800190e:	461a      	mov	r2, r3
 8001910:	4623      	mov	r3, r4
 8001912:	80fb      	strh	r3, [r7, #6]
 8001914:	4603      	mov	r3, r0
 8001916:	80bb      	strh	r3, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
 800191c:	4613      	mov	r3, r2
 800191e:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001928:	887a      	ldrh	r2, [r7, #2]
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001930:	883a      	ldrh	r2, [r7, #0]
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 800193c:	88bb      	ldrh	r3, [r7, #4]
 800193e:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	2b00      	cmp	r3, #0
 8001944:	dd02      	ble.n	800194c <lcd_DrawLine+0x4a>
 8001946:	2301      	movs	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e00b      	b.n	8001964 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <lcd_DrawLine+0x56>
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e005      	b.n	8001964 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	425b      	negs	r3, r3
 8001962:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	2b00      	cmp	r3, #0
 8001968:	dd02      	ble.n	8001970 <lcd_DrawLine+0x6e>
 800196a:	2301      	movs	r3, #1
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	e00b      	b.n	8001988 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <lcd_DrawLine+0x7a>
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	e005      	b.n	8001988 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	425b      	negs	r3, r3
 8001986:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	429a      	cmp	r2, r3
 800198e:	dd02      	ble.n	8001996 <lcd_DrawLine+0x94>
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	e001      	b.n	800199a <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 800199a:	2300      	movs	r3, #0
 800199c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800199e:	e02b      	b.n	80019f8 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	b291      	uxth	r1, r2
 80019a8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff91 	bl	80018d4 <lcd_DrawPoint>
		xerr+=delta_x;
 80019b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	4413      	add	r3, r2
 80019b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y;
 80019ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	4413      	add	r3, r2
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 80019c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	dd07      	ble.n	80019da <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 80019ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	4413      	add	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80019da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	429a      	cmp	r2, r3
 80019e0:	dd07      	ble.n	80019f2 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80019e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4413      	add	r3, r2
 80019f0:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80019f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80019f4:	3301      	adds	r3, #1
 80019f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80019f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dacf      	bge.n	80019a0 <lcd_DrawLine+0x9e>
		}
	}
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3734      	adds	r7, #52	@ 0x34
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}
	...

08001a0c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4604      	mov	r4, r0
 8001a14:	4608      	mov	r0, r1
 8001a16:	4611      	mov	r1, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	80fb      	strh	r3, [r7, #6]
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80bb      	strh	r3, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	70fb      	strb	r3, [r7, #3]
 8001a26:	4613      	mov	r3, r2
 8001a28:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001a32:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf14      	ite	ne
 8001a4e:	2301      	movne	r3, #1
 8001a50:	2300      	moveq	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	fb12 f303 	smulbb	r3, r2, r3
 8001a62:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	3b20      	subs	r3, #32
 8001a68:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	4413      	add	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b29c      	uxth	r4, r3
 8001a78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	88bb      	ldrh	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	88b9      	ldrh	r1, [r7, #4]
 8001a8a:	88f8      	ldrh	r0, [r7, #6]
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	f7ff fe6d 	bl	800176c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	827b      	strh	r3, [r7, #18]
 8001a96:	e07a      	b.n	8001b8e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001a98:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a9c:	2b0c      	cmp	r3, #12
 8001a9e:	d028      	beq.n	8001af2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001aa0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001aa4:	2b10      	cmp	r3, #16
 8001aa6:	d108      	bne.n	8001aba <lcd_ShowChar+0xae>
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	8a7b      	ldrh	r3, [r7, #18]
 8001aac:	493c      	ldr	r1, [pc, #240]	@ (8001ba0 <lcd_ShowChar+0x194>)
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	440a      	add	r2, r1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	75fb      	strb	r3, [r7, #23]
 8001ab8:	e01b      	b.n	8001af2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001aba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001abe:	2b18      	cmp	r3, #24
 8001ac0:	d10b      	bne.n	8001ada <lcd_ShowChar+0xce>
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	8a79      	ldrh	r1, [r7, #18]
 8001ac6:	4837      	ldr	r0, [pc, #220]	@ (8001ba4 <lcd_ShowChar+0x198>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4403      	add	r3, r0
 8001ad2:	440b      	add	r3, r1
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	75fb      	strb	r3, [r7, #23]
 8001ad8:	e00b      	b.n	8001af2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001ada:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	d15a      	bne.n	8001b98 <lcd_ShowChar+0x18c>
 8001ae2:	78fa      	ldrb	r2, [r7, #3]
 8001ae4:	8a7b      	ldrh	r3, [r7, #18]
 8001ae6:	4930      	ldr	r1, [pc, #192]	@ (8001ba8 <lcd_ShowChar+0x19c>)
 8001ae8:	0192      	lsls	r2, r2, #6
 8001aea:	440a      	add	r2, r1
 8001aec:	4413      	add	r3, r2
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	75bb      	strb	r3, [r7, #22]
 8001af6:	e044      	b.n	8001b82 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001af8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d120      	bne.n	8001b42 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001b00:	7dfa      	ldrb	r2, [r7, #23]
 8001b02:	7dbb      	ldrb	r3, [r7, #22]
 8001b04:	fa42 f303 	asr.w	r3, r2, r3
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d004      	beq.n	8001b1a <lcd_ShowChar+0x10e>
 8001b10:	883b      	ldrh	r3, [r7, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fe08 	bl	8001728 <LCD_WR_DATA>
 8001b18:	e003      	b.n	8001b22 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001b1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fe03 	bl	8001728 <LCD_WR_DATA>
				m++;
 8001b22:	7d7b      	ldrb	r3, [r7, #21]
 8001b24:	3301      	adds	r3, #1
 8001b26:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001b28:	7d7b      	ldrb	r3, [r7, #21]
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b30:	fb01 f202 	mul.w	r2, r1, r2
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d11f      	bne.n	8001b7c <lcd_ShowChar+0x170>
				{
					m=0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	757b      	strb	r3, [r7, #21]
					break;
 8001b40:	e022      	b.n	8001b88 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001b42:	7dfa      	ldrb	r2, [r7, #23]
 8001b44:	7dbb      	ldrb	r3, [r7, #22]
 8001b46:	fa42 f303 	asr.w	r3, r2, r3
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <lcd_ShowChar+0x152>
 8001b52:	883a      	ldrh	r2, [r7, #0]
 8001b54:	88b9      	ldrh	r1, [r7, #4]
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff febb 	bl	80018d4 <lcd_DrawPoint>
				x++;
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	3301      	adds	r3, #1
 8001b62:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001b64:	88fa      	ldrh	r2, [r7, #6]
 8001b66:	8a3b      	ldrh	r3, [r7, #16]
 8001b68:	1ad2      	subs	r2, r2, r3
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d105      	bne.n	8001b7c <lcd_ShowChar+0x170>
				{
					x=x0;
 8001b70:	8a3b      	ldrh	r3, [r7, #16]
 8001b72:	80fb      	strh	r3, [r7, #6]
					y++;
 8001b74:	88bb      	ldrh	r3, [r7, #4]
 8001b76:	3301      	adds	r3, #1
 8001b78:	80bb      	strh	r3, [r7, #4]
					break;
 8001b7a:	e005      	b.n	8001b88 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001b7c:	7dbb      	ldrb	r3, [r7, #22]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	75bb      	strb	r3, [r7, #22]
 8001b82:	7dbb      	ldrb	r3, [r7, #22]
 8001b84:	2b07      	cmp	r3, #7
 8001b86:	d9b7      	bls.n	8001af8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001b88:	8a7b      	ldrh	r3, [r7, #18]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	827b      	strh	r3, [r7, #18]
 8001b8e:	8a7a      	ldrh	r2, [r7, #18]
 8001b90:	89bb      	ldrh	r3, [r7, #12]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d380      	bcc.n	8001a98 <lcd_ShowChar+0x8c>
 8001b96:	e000      	b.n	8001b9a <lcd_ShowChar+0x18e>
		else return;
 8001b98:	bf00      	nop
				}
			}
		}
	}
}
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}
 8001ba0:	08009400 	.word	0x08009400
 8001ba4:	080099f0 	.word	0x080099f0
 8001ba8:	0800abc0 	.word	0x0800abc0

08001bac <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <lcd_SetDir+0x44>)
 8001bc8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001bcc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <lcd_SetDir+0x44>)
 8001bd0:	22f0      	movs	r2, #240	@ 0xf0
 8001bd2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001bd4:	e006      	b.n	8001be4 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <lcd_SetDir+0x44>)
 8001bd8:	22f0      	movs	r2, #240	@ 0xf0
 8001bda:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001bdc:	4b04      	ldr	r3, [pc, #16]	@ (8001bf0 <lcd_SetDir+0x44>)
 8001bde:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001be2:	805a      	strh	r2, [r3, #2]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	2000022c 	.word	0x2000022c

08001bf4 <lcd_init>:


void lcd_init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bfe:	48aa      	ldr	r0, [pc, #680]	@ (8001ea8 <lcd_init+0x2b4>)
 8001c00:	f003 fabe 	bl	8005180 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c04:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c08:	f002 fa84 	bl	8004114 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c12:	48a5      	ldr	r0, [pc, #660]	@ (8001ea8 <lcd_init+0x2b4>)
 8001c14:	f003 fab4 	bl	8005180 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c1c:	f002 fa7a 	bl	8004114 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff ffc3 	bl	8001bac <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001c26:	20d3      	movs	r0, #211	@ 0xd3
 8001c28:	f7ff fd6e 	bl	8001708 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001c2c:	f7ff fd8c 	bl	8001748 <LCD_RD_DATA>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b9d      	ldr	r3, [pc, #628]	@ (8001eac <lcd_init+0x2b8>)
 8001c36:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c38:	f7ff fd86 	bl	8001748 <LCD_RD_DATA>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b9a      	ldr	r3, [pc, #616]	@ (8001eac <lcd_init+0x2b8>)
 8001c42:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c44:	f7ff fd80 	bl	8001748 <LCD_RD_DATA>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b97      	ldr	r3, [pc, #604]	@ (8001eac <lcd_init+0x2b8>)
 8001c4e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001c50:	4b96      	ldr	r3, [pc, #600]	@ (8001eac <lcd_init+0x2b8>)
 8001c52:	889b      	ldrh	r3, [r3, #4]
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	4b94      	ldr	r3, [pc, #592]	@ (8001eac <lcd_init+0x2b8>)
 8001c5a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001c5c:	f7ff fd74 	bl	8001748 <LCD_RD_DATA>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b91      	ldr	r3, [pc, #580]	@ (8001eac <lcd_init+0x2b8>)
 8001c66:	889b      	ldrh	r3, [r3, #4]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	4b8f      	ldr	r3, [pc, #572]	@ (8001eac <lcd_init+0x2b8>)
 8001c6e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001c70:	20cf      	movs	r0, #207	@ 0xcf
 8001c72:	f7ff fd49 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff fd56 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001c7c:	20c1      	movs	r0, #193	@ 0xc1
 8001c7e:	f7ff fd53 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001c82:	2030      	movs	r0, #48	@ 0x30
 8001c84:	f7ff fd50 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001c88:	20ed      	movs	r0, #237	@ 0xed
 8001c8a:	f7ff fd3d 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001c8e:	2064      	movs	r0, #100	@ 0x64
 8001c90:	f7ff fd4a 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001c94:	2003      	movs	r0, #3
 8001c96:	f7ff fd47 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001c9a:	2012      	movs	r0, #18
 8001c9c:	f7ff fd44 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001ca0:	2081      	movs	r0, #129	@ 0x81
 8001ca2:	f7ff fd41 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001ca6:	20e8      	movs	r0, #232	@ 0xe8
 8001ca8:	f7ff fd2e 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001cac:	2085      	movs	r0, #133	@ 0x85
 8001cae:	f7ff fd3b 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001cb2:	2010      	movs	r0, #16
 8001cb4:	f7ff fd38 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001cb8:	207a      	movs	r0, #122	@ 0x7a
 8001cba:	f7ff fd35 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001cbe:	20cb      	movs	r0, #203	@ 0xcb
 8001cc0:	f7ff fd22 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001cc4:	2039      	movs	r0, #57	@ 0x39
 8001cc6:	f7ff fd2f 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001cca:	202c      	movs	r0, #44	@ 0x2c
 8001ccc:	f7ff fd2c 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f7ff fd29 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001cd6:	2034      	movs	r0, #52	@ 0x34
 8001cd8:	f7ff fd26 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f7ff fd23 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001ce2:	20f7      	movs	r0, #247	@ 0xf7
 8001ce4:	f7ff fd10 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001ce8:	2020      	movs	r0, #32
 8001cea:	f7ff fd1d 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001cee:	20ea      	movs	r0, #234	@ 0xea
 8001cf0:	f7ff fd0a 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff fd17 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7ff fd14 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001d00:	20c0      	movs	r0, #192	@ 0xc0
 8001d02:	f7ff fd01 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001d06:	201b      	movs	r0, #27
 8001d08:	f7ff fd0e 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001d0c:	20c1      	movs	r0, #193	@ 0xc1
 8001d0e:	f7ff fcfb 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001d12:	2001      	movs	r0, #1
 8001d14:	f7ff fd08 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001d18:	20c5      	movs	r0, #197	@ 0xc5
 8001d1a:	f7ff fcf5 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001d1e:	2030      	movs	r0, #48	@ 0x30
 8001d20:	f7ff fd02 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001d24:	2030      	movs	r0, #48	@ 0x30
 8001d26:	f7ff fcff 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001d2a:	20c7      	movs	r0, #199	@ 0xc7
 8001d2c:	f7ff fcec 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001d30:	20b7      	movs	r0, #183	@ 0xb7
 8001d32:	f7ff fcf9 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001d36:	2036      	movs	r0, #54	@ 0x36
 8001d38:	f7ff fce6 	bl	8001708 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001d3c:	2008      	movs	r0, #8
 8001d3e:	f7ff fcf3 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001d42:	203a      	movs	r0, #58	@ 0x3a
 8001d44:	f7ff fce0 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001d48:	2055      	movs	r0, #85	@ 0x55
 8001d4a:	f7ff fced 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001d4e:	20b1      	movs	r0, #177	@ 0xb1
 8001d50:	f7ff fcda 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff fce7 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001d5a:	201a      	movs	r0, #26
 8001d5c:	f7ff fce4 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001d60:	20b6      	movs	r0, #182	@ 0xb6
 8001d62:	f7ff fcd1 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001d66:	200a      	movs	r0, #10
 8001d68:	f7ff fcde 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001d6c:	20a2      	movs	r0, #162	@ 0xa2
 8001d6e:	f7ff fcdb 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001d72:	20f2      	movs	r0, #242	@ 0xf2
 8001d74:	f7ff fcc8 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff fcd5 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001d7e:	2026      	movs	r0, #38	@ 0x26
 8001d80:	f7ff fcc2 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001d84:	2001      	movs	r0, #1
 8001d86:	f7ff fccf 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001d8a:	20e0      	movs	r0, #224	@ 0xe0
 8001d8c:	f7ff fcbc 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001d90:	200f      	movs	r0, #15
 8001d92:	f7ff fcc9 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001d96:	202a      	movs	r0, #42	@ 0x2a
 8001d98:	f7ff fcc6 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001d9c:	2028      	movs	r0, #40	@ 0x28
 8001d9e:	f7ff fcc3 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001da2:	2008      	movs	r0, #8
 8001da4:	f7ff fcc0 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001da8:	200e      	movs	r0, #14
 8001daa:	f7ff fcbd 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001dae:	2008      	movs	r0, #8
 8001db0:	f7ff fcba 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001db4:	2054      	movs	r0, #84	@ 0x54
 8001db6:	f7ff fcb7 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001dba:	20a9      	movs	r0, #169	@ 0xa9
 8001dbc:	f7ff fcb4 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001dc0:	2043      	movs	r0, #67	@ 0x43
 8001dc2:	f7ff fcb1 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001dc6:	200a      	movs	r0, #10
 8001dc8:	f7ff fcae 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001dcc:	200f      	movs	r0, #15
 8001dce:	f7ff fcab 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff fca8 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff fca5 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff fca2 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff fc9f 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001dea:	20e1      	movs	r0, #225	@ 0xe1
 8001dec:	f7ff fc8c 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff fc99 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001df6:	2015      	movs	r0, #21
 8001df8:	f7ff fc96 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001dfc:	2017      	movs	r0, #23
 8001dfe:	f7ff fc93 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001e02:	2007      	movs	r0, #7
 8001e04:	f7ff fc90 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001e08:	2011      	movs	r0, #17
 8001e0a:	f7ff fc8d 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001e0e:	2006      	movs	r0, #6
 8001e10:	f7ff fc8a 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001e14:	202b      	movs	r0, #43	@ 0x2b
 8001e16:	f7ff fc87 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001e1a:	2056      	movs	r0, #86	@ 0x56
 8001e1c:	f7ff fc84 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001e20:	203c      	movs	r0, #60	@ 0x3c
 8001e22:	f7ff fc81 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001e26:	2005      	movs	r0, #5
 8001e28:	f7ff fc7e 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001e2c:	2010      	movs	r0, #16
 8001e2e:	f7ff fc7b 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e32:	200f      	movs	r0, #15
 8001e34:	f7ff fc78 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e38:	203f      	movs	r0, #63	@ 0x3f
 8001e3a:	f7ff fc75 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e3e:	203f      	movs	r0, #63	@ 0x3f
 8001e40:	f7ff fc72 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e44:	200f      	movs	r0, #15
 8001e46:	f7ff fc6f 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001e4a:	202b      	movs	r0, #43	@ 0x2b
 8001e4c:	f7ff fc5c 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7ff fc69 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff fc66 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f7ff fc63 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001e62:	203f      	movs	r0, #63	@ 0x3f
 8001e64:	f7ff fc60 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001e68:	202a      	movs	r0, #42	@ 0x2a
 8001e6a:	f7ff fc4d 	bl	8001708 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff fc5a 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff fc57 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff fc54 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001e80:	20ef      	movs	r0, #239	@ 0xef
 8001e82:	f7ff fc51 	bl	8001728 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001e86:	2011      	movs	r0, #17
 8001e88:	f7ff fc3e 	bl	8001708 <LCD_WR_REG>
	HAL_Delay(120);
 8001e8c:	2078      	movs	r0, #120	@ 0x78
 8001e8e:	f002 f941 	bl	8004114 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001e92:	2029      	movs	r0, #41	@ 0x29
 8001e94:	f7ff fc38 	bl	8001708 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e9e:	4804      	ldr	r0, [pc, #16]	@ (8001eb0 <lcd_init+0x2bc>)
 8001ea0:	f003 f96e 	bl	8005180 <HAL_GPIO_WritePin>
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40020800 	.word	0x40020800
 8001eac:	2000022c 	.word	0x2000022c
 8001eb0:	40020000 	.word	0x40020000

08001eb4 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	b298      	uxth	r0, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	8b3a      	ldrh	r2, [r7, #24]
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7ff fcf9 	bl	80018d4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	b298      	uxth	r0, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	8b3a      	ldrh	r2, [r7, #24]
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7ff fce9 	bl	80018d4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	b298      	uxth	r0, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	8b3a      	ldrh	r2, [r7, #24]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7ff fcd9 	bl	80018d4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	b298      	uxth	r0, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	8b3a      	ldrh	r2, [r7, #24]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7ff fcc9 	bl	80018d4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b298      	uxth	r0, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	8b3a      	ldrh	r2, [r7, #24]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f7ff fcb9 	bl	80018d4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	b298      	uxth	r0, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4413      	add	r3, r2
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	8b3a      	ldrh	r2, [r7, #24]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7ff fca9 	bl	80018d4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b298      	uxth	r0, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	8b3a      	ldrh	r2, [r7, #24]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7ff fc99 	bl	80018d4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	b298      	uxth	r0, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	8b3a      	ldrh	r2, [r7, #24]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f7ff fc89 	bl	80018d4 <lcd_DrawPoint>
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b08a      	sub	sp, #40	@ 0x28
 8001fce:	af02      	add	r7, sp, #8
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	f1c3 0303 	rsb	r3, r3, #3
 8001fea:	613b      	str	r3, [r7, #16]


	if (fill)
 8001fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d04f      	beq.n	8002092 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001ff2:	e029      	b.n	8002048 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e00a      	b.n	8002010 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7ff ff55 	bl	8001eb4 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	429a      	cmp	r2, r3
 8002016:	ddf0      	ble.n	8001ffa <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2b00      	cmp	r3, #0
 800201c:	da06      	bge.n	800202c <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	009a      	lsls	r2, r3, #2
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4413      	add	r3, r2
 8002026:	3306      	adds	r3, #6
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e00a      	b.n	8002042 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	009a      	lsls	r2, r3, #2
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4413      	add	r3, r2
 8002038:	330a      	adds	r3, #10
 800203a:	613b      	str	r3, [r7, #16]
				y--;
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	3b01      	subs	r3, #1
 8002040:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3301      	adds	r3, #1
 8002046:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	429a      	cmp	r2, r3
 800204e:	ddd1      	ble.n	8001ff4 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8002050:	e023      	b.n	800209a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	68b9      	ldr	r1, [r7, #8]
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7ff ff29 	bl	8001eb4 <_draw_circle_8>
			if (d < 0) {
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	da06      	bge.n	8002076 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	009a      	lsls	r2, r3, #2
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	3306      	adds	r3, #6
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e00a      	b.n	800208c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	009a      	lsls	r2, r3, #2
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4413      	add	r3, r2
 8002082:	330a      	adds	r3, #10
 8002084:	613b      	str	r3, [r7, #16]
				y--;
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	3b01      	subs	r3, #1
 800208a:	61bb      	str	r3, [r7, #24]
			x++;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	3301      	adds	r3, #1
 8002090:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	429a      	cmp	r2, r3
 8002098:	dddb      	ble.n	8002052 <lcd_DrawCircle+0x88>
}
 800209a:	bf00      	nop
 800209c:	3720      	adds	r7, #32
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b08b      	sub	sp, #44	@ 0x2c
 80020a8:	af04      	add	r7, sp, #16
 80020aa:	60ba      	str	r2, [r7, #8]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4603      	mov	r3, r0
 80020b0:	81fb      	strh	r3, [r7, #14]
 80020b2:	460b      	mov	r3, r1
 80020b4:	81bb      	strh	r3, [r7, #12]
 80020b6:	4613      	mov	r3, r2
 80020b8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80020ba:	89fb      	ldrh	r3, [r7, #14]
 80020bc:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80020c2:	e048      	b.n	8002156 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d145      	bne.n	8002156 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80020ca:	89fa      	ldrh	r2, [r7, #14]
 80020cc:	4b26      	ldr	r3, [pc, #152]	@ (8002168 <lcd_ShowStr+0xc4>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80020d6:	085b      	lsrs	r3, r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	1acb      	subs	r3, r1, r3
 80020dc:	429a      	cmp	r2, r3
 80020de:	dc3f      	bgt.n	8002160 <lcd_ShowStr+0xbc>
 80020e0:	89ba      	ldrh	r2, [r7, #12]
 80020e2:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <lcd_ShowStr+0xc4>)
 80020e4:	885b      	ldrh	r3, [r3, #2]
 80020e6:	4619      	mov	r1, r3
 80020e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80020ec:	1acb      	subs	r3, r1, r3
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dc36      	bgt.n	8002160 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b80      	cmp	r3, #128	@ 0x80
 80020f8:	d902      	bls.n	8002100 <lcd_ShowStr+0x5c>
 80020fa:	2301      	movs	r3, #1
 80020fc:	75fb      	strb	r3, [r7, #23]
 80020fe:	e02a      	b.n	8002156 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b0d      	cmp	r3, #13
 8002106:	d10b      	bne.n	8002120 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002108:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800210c:	b29a      	uxth	r2, r3
 800210e:	89bb      	ldrh	r3, [r7, #12]
 8002110:	4413      	add	r3, r2
 8002112:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002114:	8abb      	ldrh	r3, [r7, #20]
 8002116:	81fb      	strh	r3, [r7, #14]
					str++;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	3301      	adds	r3, #1
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	e017      	b.n	8002150 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	781a      	ldrb	r2, [r3, #0]
 8002124:	88fc      	ldrh	r4, [r7, #6]
 8002126:	89b9      	ldrh	r1, [r7, #12]
 8002128:	89f8      	ldrh	r0, [r7, #14]
 800212a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	4623      	mov	r3, r4
 800213c:	f7ff fc66 	bl	8001a0c <lcd_ShowChar>
					x+=sizey/2;
 8002140:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002144:	085b      	lsrs	r3, r3, #1
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	4413      	add	r3, r2
 800214e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	3301      	adds	r3, #1
 8002154:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1b2      	bne.n	80020c4 <lcd_ShowStr+0x20>
 800215e:	e000      	b.n	8002162 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002160:	bf00      	nop
			}
		}
	}
}
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	bd90      	pop	{r4, r7, pc}
 8002168:	2000022c 	.word	0x2000022c

0800216c <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002170:	4b3f      	ldr	r3, [pc, #252]	@ (8002270 <led7_Scan+0x104>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	b29a      	uxth	r2, r3
 8002178:	4b3d      	ldr	r3, [pc, #244]	@ (8002270 <led7_Scan+0x104>)
 800217a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800217c:	4b3d      	ldr	r3, [pc, #244]	@ (8002274 <led7_Scan+0x108>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a3d      	ldr	r2, [pc, #244]	@ (8002278 <led7_Scan+0x10c>)
 8002182:	5cd3      	ldrb	r3, [r2, r3]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	b21a      	sxth	r2, r3
 8002188:	4b39      	ldr	r3, [pc, #228]	@ (8002270 <led7_Scan+0x104>)
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21b      	sxth	r3, r3
 8002192:	b29a      	uxth	r2, r3
 8002194:	4b36      	ldr	r3, [pc, #216]	@ (8002270 <led7_Scan+0x104>)
 8002196:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002198:	4b36      	ldr	r3, [pc, #216]	@ (8002274 <led7_Scan+0x108>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d847      	bhi.n	8002230 <led7_Scan+0xc4>
 80021a0:	a201      	add	r2, pc, #4	@ (adr r2, 80021a8 <led7_Scan+0x3c>)
 80021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a6:	bf00      	nop
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	080021d7 	.word	0x080021d7
 80021b0:	080021f5 	.word	0x080021f5
 80021b4:	08002213 	.word	0x08002213
	case 0:
		spi_buffer |= 0x00b0;
 80021b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002270 <led7_Scan+0x104>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002270 <led7_Scan+0x104>)
 80021c4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80021c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002270 <led7_Scan+0x104>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b27      	ldr	r3, [pc, #156]	@ (8002270 <led7_Scan+0x104>)
 80021d2:	801a      	strh	r2, [r3, #0]
		break;
 80021d4:	e02d      	b.n	8002232 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80021d6:	4b26      	ldr	r3, [pc, #152]	@ (8002270 <led7_Scan+0x104>)
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <led7_Scan+0x104>)
 80021e2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80021e4:	4b22      	ldr	r3, [pc, #136]	@ (8002270 <led7_Scan+0x104>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	f023 0320 	bic.w	r3, r3, #32
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <led7_Scan+0x104>)
 80021f0:	801a      	strh	r2, [r3, #0]
		break;
 80021f2:	e01e      	b.n	8002232 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80021f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002270 <led7_Scan+0x104>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <led7_Scan+0x104>)
 8002200:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002202:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <led7_Scan+0x104>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	f023 0310 	bic.w	r3, r3, #16
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b18      	ldr	r3, [pc, #96]	@ (8002270 <led7_Scan+0x104>)
 800220e:	801a      	strh	r2, [r3, #0]
		break;
 8002210:	e00f      	b.n	8002232 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002212:	4b17      	ldr	r3, [pc, #92]	@ (8002270 <led7_Scan+0x104>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800221a:	b29a      	uxth	r2, r3
 800221c:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <led7_Scan+0x104>)
 800221e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002220:	4b13      	ldr	r3, [pc, #76]	@ (8002270 <led7_Scan+0x104>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002228:	b29a      	uxth	r2, r3
 800222a:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <led7_Scan+0x104>)
 800222c:	801a      	strh	r2, [r3, #0]
		break;
 800222e:	e000      	b.n	8002232 <led7_Scan+0xc6>
	default:
		break;
 8002230:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <led7_Scan+0x108>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	425a      	negs	r2, r3
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	f002 0203 	and.w	r2, r2, #3
 8002242:	bf58      	it	pl
 8002244:	4253      	negpl	r3, r2
 8002246:	4a0b      	ldr	r2, [pc, #44]	@ (8002274 <led7_Scan+0x108>)
 8002248:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2140      	movs	r1, #64	@ 0x40
 800224e:	480b      	ldr	r0, [pc, #44]	@ (800227c <led7_Scan+0x110>)
 8002250:	f002 ff96 	bl	8005180 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002254:	2301      	movs	r3, #1
 8002256:	2202      	movs	r2, #2
 8002258:	4905      	ldr	r1, [pc, #20]	@ (8002270 <led7_Scan+0x104>)
 800225a:	4809      	ldr	r0, [pc, #36]	@ (8002280 <led7_Scan+0x114>)
 800225c:	f004 fc77 	bl	8006b4e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002260:	2201      	movs	r2, #1
 8002262:	2140      	movs	r1, #64	@ 0x40
 8002264:	4805      	ldr	r0, [pc, #20]	@ (800227c <led7_Scan+0x110>)
 8002266:	f002 ff8b 	bl	8005180 <HAL_GPIO_WritePin>
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000004 	.word	0x20000004
 8002274:	20000234 	.word	0x20000234
 8002278:	20000000 	.word	0x20000000
 800227c:	40021800 	.word	0x40021800
 8002280:	2000056c 	.word	0x2000056c

08002284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002288:	f001 fed2 	bl	8004030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800228c:	f000 f832 	bl	80022f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002290:	f7ff f8ae 	bl	80013f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002294:	f000 fea0 	bl	8002fd8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002298:	f000 fc8c 	bl	8002bb4 <MX_SPI1_Init>
  MX_FSMC_Init();
 800229c:	f7fe ffd8 	bl	8001250 <MX_FSMC_Init>
  MX_I2C1_Init();
 80022a0:	f7ff f9bc 	bl	800161c <MX_I2C1_Init>
  MX_TIM13_Init();
 80022a4:	f000 fee4 	bl	8003070 <MX_TIM13_Init>
  MX_DMA_Init();
 80022a8:	f7fe ffb2 	bl	8001210 <MX_DMA_Init>
  MX_ADC1_Init();
 80022ac:	f7fe fde4 	bl	8000e78 <MX_ADC1_Init>
  MX_TIM1_Init();
 80022b0:	f000 fe42 	bl	8002f38 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80022b4:	f000 f888 	bl	80023c8 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 touch_Adjust();
 80022b8:	f001 fa7a 	bl	80037b0 <touch_Adjust>
 lcd_Clear(BLACK);
 80022bc:	2000      	movs	r0, #0
 80022be:	f7ff faa1 	bl	8001804 <lcd_Clear>
 while (1)
  {
		 touch_Scan();
 80022c2:	f001 fe57 	bl	8003f74 <touch_Scan>

		 switch (gameState) {
 80022c6:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <main+0x6c>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d00c      	beq.n	80022e8 <main+0x64>
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	dcf7      	bgt.n	80022c2 <main+0x3e>
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <main+0x58>
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d003      	beq.n	80022e2 <main+0x5e>
 80022da:	e008      	b.n	80022ee <main+0x6a>
			 case STATE_INIT:
				 handleInitState();
 80022dc:	f000 f884 	bl	80023e8 <handleInitState>
				 break;
 80022e0:	e005      	b.n	80022ee <main+0x6a>
			 case STATE_GAME:
				 handleGameState();
 80022e2:	f000 f8ef 	bl	80024c4 <handleGameState>
				 break;
 80022e6:	e002      	b.n	80022ee <main+0x6a>
			 case STATE_END:
				 handleEndState();
 80022e8:	f000 f946 	bl	8002578 <handleEndState>
				 break;
 80022ec:	bf00      	nop
		 touch_Scan();
 80022ee:	e7e8      	b.n	80022c2 <main+0x3e>
 80022f0:	20000238 	.word	0x20000238

080022f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b094      	sub	sp, #80	@ 0x50
 80022f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022fa:	f107 0320 	add.w	r3, r7, #32
 80022fe:	2230      	movs	r2, #48	@ 0x30
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f006 f837 	bl	8008376 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002318:	2300      	movs	r3, #0
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	4b28      	ldr	r3, [pc, #160]	@ (80023c0 <SystemClock_Config+0xcc>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	4a27      	ldr	r2, [pc, #156]	@ (80023c0 <SystemClock_Config+0xcc>)
 8002322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002326:	6413      	str	r3, [r2, #64]	@ 0x40
 8002328:	4b25      	ldr	r3, [pc, #148]	@ (80023c0 <SystemClock_Config+0xcc>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002334:	2300      	movs	r3, #0
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	4b22      	ldr	r3, [pc, #136]	@ (80023c4 <SystemClock_Config+0xd0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a21      	ldr	r2, [pc, #132]	@ (80023c4 <SystemClock_Config+0xd0>)
 800233e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4b1f      	ldr	r3, [pc, #124]	@ (80023c4 <SystemClock_Config+0xd0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002350:	2302      	movs	r3, #2
 8002352:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002354:	2301      	movs	r3, #1
 8002356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002358:	2310      	movs	r3, #16
 800235a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800235c:	2302      	movs	r3, #2
 800235e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002360:	2300      	movs	r3, #0
 8002362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002364:	2308      	movs	r3, #8
 8002366:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002368:	23a8      	movs	r3, #168	@ 0xa8
 800236a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800236c:	2302      	movs	r3, #2
 800236e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002370:	2304      	movs	r3, #4
 8002372:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002374:	f107 0320 	add.w	r3, r7, #32
 8002378:	4618      	mov	r0, r3
 800237a:	f003 fedb 	bl	8006134 <HAL_RCC_OscConfig>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002384:	f000 fba2 	bl	8002acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002388:	230f      	movs	r3, #15
 800238a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800238c:	2302      	movs	r3, #2
 800238e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002394:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002398:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800239a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800239e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	2105      	movs	r1, #5
 80023a6:	4618      	mov	r0, r3
 80023a8:	f004 f93c 	bl	8006624 <HAL_RCC_ClockConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023b2:	f000 fb8b 	bl	8002acc <Error_Handler>
  }
}
 80023b6:	bf00      	nop
 80023b8:	3750      	adds	r7, #80	@ 0x50
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40007000 	.word	0x40007000

080023c8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	  timer_init();
 80023cc:	f000 fb84 	bl	8002ad8 <timer_init>
	  button_init();
 80023d0:	f7fe ff12 	bl	80011f8 <button_init>
	  lcd_init();
 80023d4:	f7ff fc0e 	bl	8001bf4 <lcd_init>
	  touch_init();
 80023d8:	f001 fdbc 	bl	8003f54 <touch_init>
	  setTimer2(250);
 80023dc:	20fa      	movs	r0, #250	@ 0xfa
 80023de:	f000 fb89 	bl	8002af4 <setTimer2>
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <handleInitState>:
//		default:
//			break;
//	}
//}

void handleInitState() {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	@ 0x28
 80023ec:	af04      	add	r7, sp, #16
    lcd_Clear(BLACK);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7ff fa08 	bl	8001804 <lcd_Clear>
    lcd_ShowStr(60, 160, "SNAKE GAME", GREEN, BLACK, 24, 1);
 80023f4:	2301      	movs	r3, #1
 80023f6:	9302      	str	r3, [sp, #8]
 80023f8:	2318      	movs	r3, #24
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	2300      	movs	r3, #0
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002404:	4a25      	ldr	r2, [pc, #148]	@ (800249c <handleInitState+0xb4>)
 8002406:	21a0      	movs	r1, #160	@ 0xa0
 8002408:	203c      	movs	r0, #60	@ 0x3c
 800240a:	f7ff fe4b 	bl	80020a4 <lcd_ShowStr>
    lcd_Fill(60, 10, 180, 60, BLUE);
 800240e:	231f      	movs	r3, #31
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	233c      	movs	r3, #60	@ 0x3c
 8002414:	22b4      	movs	r2, #180	@ 0xb4
 8002416:	210a      	movs	r1, #10
 8002418:	203c      	movs	r0, #60	@ 0x3c
 800241a:	f7ff fa25 	bl	8001868 <lcd_Fill>
    lcd_ShowStr(90, 20, "START", WHITE, BLUE, 24, 1);
 800241e:	2301      	movs	r3, #1
 8002420:	9302      	str	r3, [sp, #8]
 8002422:	2318      	movs	r3, #24
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	231f      	movs	r3, #31
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800242e:	4a1c      	ldr	r2, [pc, #112]	@ (80024a0 <handleInitState+0xb8>)
 8002430:	2114      	movs	r1, #20
 8002432:	205a      	movs	r0, #90	@ 0x5a
 8002434:	f7ff fe36 	bl	80020a4 <lcd_ShowStr>

    if (isButtonTouched(60, 10, 180, 60)) { // Start button
 8002438:	233c      	movs	r3, #60	@ 0x3c
 800243a:	22b4      	movs	r2, #180	@ 0xb4
 800243c:	210a      	movs	r1, #10
 800243e:	203c      	movs	r0, #60	@ 0x3c
 8002440:	f000 fb14 	bl	8002a6c <isButtonTouched>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d024      	beq.n	8002494 <handleInitState+0xac>
        snakeLength = 3;
 800244a:	4b16      	ldr	r3, [pc, #88]	@ (80024a4 <handleInitState+0xbc>)
 800244c:	2203      	movs	r2, #3
 800244e:	601a      	str	r2, [r3, #0]
        snake[0] = (Point){10, 10};
 8002450:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <handleInitState+0xc0>)
 8002452:	4a16      	ldr	r2, [pc, #88]	@ (80024ac <handleInitState+0xc4>)
 8002454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002458:	e883 0003 	stmia.w	r3, {r0, r1}
        snake[1] = (Point){9, 10};
 800245c:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <handleInitState+0xc0>)
 800245e:	4a14      	ldr	r2, [pc, #80]	@ (80024b0 <handleInitState+0xc8>)
 8002460:	3308      	adds	r3, #8
 8002462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002466:	e883 0003 	stmia.w	r3, {r0, r1}
        snake[2] = (Point){8, 10};
 800246a:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <handleInitState+0xc0>)
 800246c:	4a11      	ldr	r2, [pc, #68]	@ (80024b4 <handleInitState+0xcc>)
 800246e:	3310      	adds	r3, #16
 8002470:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002474:	e883 0003 	stmia.w	r3, {r0, r1}
        snakeDirection = DIR_RIGHT;
 8002478:	4b0f      	ldr	r3, [pc, #60]	@ (80024b8 <handleInitState+0xd0>)
 800247a:	2203      	movs	r2, #3
 800247c:	701a      	strb	r2, [r3, #0]
        generateFood();
 800247e:	f000 fad1 	bl	8002a24 <generateFood>
        isGameOver = 0;
 8002482:	4b0e      	ldr	r3, [pc, #56]	@ (80024bc <handleInitState+0xd4>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
        gameState = STATE_GAME;
 8002488:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <handleInitState+0xd8>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
        lcd_Clear(BLACK);
 800248e:	2000      	movs	r0, #0
 8002490:	f7ff f9b8 	bl	8001804 <lcd_Clear>
    }
}
 8002494:	bf00      	nop
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	080092d0 	.word	0x080092d0
 80024a0:	080092dc 	.word	0x080092dc
 80024a4:	20000008 	.word	0x20000008
 80024a8:	2000023c 	.word	0x2000023c
 80024ac:	080092e4 	.word	0x080092e4
 80024b0:	080092ec 	.word	0x080092ec
 80024b4:	080092f4 	.word	0x080092f4
 80024b8:	20000006 	.word	0x20000006
 80024bc:	20000564 	.word	0x20000564
 80024c0:	20000238 	.word	0x20000238

080024c4 <handleGameState>:

/**
  * @brief Handle the GAME state.
  */
void handleGameState() {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
    // Game logic
    if (flag_timer2 == 1) {
 80024c8:	4b27      	ldr	r3, [pc, #156]	@ (8002568 <handleGameState+0xa4>)
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d110      	bne.n	80024f2 <handleGameState+0x2e>
        flag_timer2 = 0;
 80024d0:	4b25      	ldr	r3, [pc, #148]	@ (8002568 <handleGameState+0xa4>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	801a      	strh	r2, [r3, #0]
        updateSnake();
 80024d6:	f000 f88d 	bl	80025f4 <updateSnake>
        checkCollision();
 80024da:	f000 f8d7 	bl	800268c <checkCollision>

        if (isGameOver) {
 80024de:	4b23      	ldr	r3, [pc, #140]	@ (800256c <handleGameState+0xa8>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <handleGameState+0x2a>
            gameState = STATE_END;
 80024e6:	4b22      	ldr	r3, [pc, #136]	@ (8002570 <handleGameState+0xac>)
 80024e8:	2202      	movs	r2, #2
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e001      	b.n	80024f2 <handleGameState+0x2e>
        } else {
            drawGame();
 80024ee:	f000 f923 	bl	8002738 <drawGame>
        }
    }


    if (isButtonTouched(40, 260, 80, 300)) snakeDirection = DIR_LEFT;  // Left
 80024f2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80024f6:	2250      	movs	r2, #80	@ 0x50
 80024f8:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80024fc:	2028      	movs	r0, #40	@ 0x28
 80024fe:	f000 fab5 	bl	8002a6c <isButtonTouched>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <handleGameState+0x4a>
 8002508:	4b1a      	ldr	r3, [pc, #104]	@ (8002574 <handleGameState+0xb0>)
 800250a:	2202      	movs	r2, #2
 800250c:	701a      	strb	r2, [r3, #0]
    if (isButtonTouched(90, 260, 130, 300)) snakeDirection = DIR_UP;    // Up
 800250e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002512:	2282      	movs	r2, #130	@ 0x82
 8002514:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002518:	205a      	movs	r0, #90	@ 0x5a
 800251a:	f000 faa7 	bl	8002a6c <isButtonTouched>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <handleGameState+0x66>
 8002524:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <handleGameState+0xb0>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
    if (isButtonTouched(140, 260, 180, 300)) snakeDirection = DIR_RIGHT; // Right
 800252a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800252e:	22b4      	movs	r2, #180	@ 0xb4
 8002530:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002534:	208c      	movs	r0, #140	@ 0x8c
 8002536:	f000 fa99 	bl	8002a6c <isButtonTouched>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <handleGameState+0x82>
 8002540:	4b0c      	ldr	r3, [pc, #48]	@ (8002574 <handleGameState+0xb0>)
 8002542:	2203      	movs	r2, #3
 8002544:	701a      	strb	r2, [r3, #0]
    if (isButtonTouched(190, 260, 230, 300)) snakeDirection = DIR_DOWN;  // Down
 8002546:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800254a:	22e6      	movs	r2, #230	@ 0xe6
 800254c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002550:	20be      	movs	r0, #190	@ 0xbe
 8002552:	f000 fa8b 	bl	8002a6c <isButtonTouched>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <handleGameState+0x9e>
 800255c:	4b05      	ldr	r3, [pc, #20]	@ (8002574 <handleGameState+0xb0>)
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000566 	.word	0x20000566
 800256c:	20000564 	.word	0x20000564
 8002570:	20000238 	.word	0x20000238
 8002574:	20000006 	.word	0x20000006

08002578 <handleEndState>:

/**
  * @brief Handle the END state.
  */
void handleEndState() {
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af04      	add	r7, sp, #16
    lcd_Clear(BLACK);
 800257e:	2000      	movs	r0, #0
 8002580:	f7ff f940 	bl	8001804 <lcd_Clear>
    lcd_ShowStr(60, 160, "GAME OVER", RED, BLACK, 24, 1);
 8002584:	2301      	movs	r3, #1
 8002586:	9302      	str	r3, [sp, #8]
 8002588:	2318      	movs	r3, #24
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	2300      	movs	r3, #0
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002594:	4a14      	ldr	r2, [pc, #80]	@ (80025e8 <handleEndState+0x70>)
 8002596:	21a0      	movs	r1, #160	@ 0xa0
 8002598:	203c      	movs	r0, #60	@ 0x3c
 800259a:	f7ff fd83 	bl	80020a4 <lcd_ShowStr>
    lcd_Fill(60, 10, 180, 60, BLUE);
 800259e:	231f      	movs	r3, #31
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	233c      	movs	r3, #60	@ 0x3c
 80025a4:	22b4      	movs	r2, #180	@ 0xb4
 80025a6:	210a      	movs	r1, #10
 80025a8:	203c      	movs	r0, #60	@ 0x3c
 80025aa:	f7ff f95d 	bl	8001868 <lcd_Fill>
    lcd_ShowStr(90, 20, "RESTART", WHITE, BLUE, 24, 1);
 80025ae:	2301      	movs	r3, #1
 80025b0:	9302      	str	r3, [sp, #8]
 80025b2:	2318      	movs	r3, #24
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	231f      	movs	r3, #31
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025be:	4a0b      	ldr	r2, [pc, #44]	@ (80025ec <handleEndState+0x74>)
 80025c0:	2114      	movs	r1, #20
 80025c2:	205a      	movs	r0, #90	@ 0x5a
 80025c4:	f7ff fd6e 	bl	80020a4 <lcd_ShowStr>

    if (isButtonTouched(60, 10, 180, 60)) { // Restart button
 80025c8:	233c      	movs	r3, #60	@ 0x3c
 80025ca:	22b4      	movs	r2, #180	@ 0xb4
 80025cc:	210a      	movs	r1, #10
 80025ce:	203c      	movs	r0, #60	@ 0x3c
 80025d0:	f000 fa4c 	bl	8002a6c <isButtonTouched>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <handleEndState+0x68>
        gameState = STATE_INIT;
 80025da:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <handleEndState+0x78>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
    }
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	080092fc 	.word	0x080092fc
 80025ec:	08009308 	.word	0x08009308
 80025f0:	20000238 	.word	0x20000238

080025f4 <updateSnake>:

/**
  * @brief Update the snake's position.
  */
void updateSnake() {
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
    for (int i = snakeLength - 1; i > 0; i--) {
 80025fa:	4b21      	ldr	r3, [pc, #132]	@ (8002680 <updateSnake+0x8c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3b01      	subs	r3, #1
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	e00f      	b.n	8002624 <updateSnake+0x30>
        snake[i] = snake[i - 1];
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	1e5a      	subs	r2, r3, #1
 8002608:	481e      	ldr	r0, [pc, #120]	@ (8002684 <updateSnake+0x90>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	491d      	ldr	r1, [pc, #116]	@ (8002684 <updateSnake+0x90>)
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4403      	add	r3, r0
 8002612:	00d2      	lsls	r2, r2, #3
 8002614:	440a      	add	r2, r1
 8002616:	e892 0003 	ldmia.w	r2, {r0, r1}
 800261a:	e883 0003 	stmia.w	r3, {r0, r1}
    for (int i = snakeLength - 1; i > 0; i--) {
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3b01      	subs	r3, #1
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	dcec      	bgt.n	8002604 <updateSnake+0x10>
    }

    // Update head position
    if (snakeDirection == DIR_UP) snake[0].y--;
 800262a:	4b17      	ldr	r3, [pc, #92]	@ (8002688 <updateSnake+0x94>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d104      	bne.n	800263c <updateSnake+0x48>
 8002632:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <updateSnake+0x90>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	4a12      	ldr	r2, [pc, #72]	@ (8002684 <updateSnake+0x90>)
 800263a:	6053      	str	r3, [r2, #4]
    if (snakeDirection == DIR_DOWN) snake[0].y++;
 800263c:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <updateSnake+0x94>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d104      	bne.n	800264e <updateSnake+0x5a>
 8002644:	4b0f      	ldr	r3, [pc, #60]	@ (8002684 <updateSnake+0x90>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	3301      	adds	r3, #1
 800264a:	4a0e      	ldr	r2, [pc, #56]	@ (8002684 <updateSnake+0x90>)
 800264c:	6053      	str	r3, [r2, #4]
    if (snakeDirection == DIR_LEFT) snake[0].x--;
 800264e:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <updateSnake+0x94>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d104      	bne.n	8002660 <updateSnake+0x6c>
 8002656:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <updateSnake+0x90>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3b01      	subs	r3, #1
 800265c:	4a09      	ldr	r2, [pc, #36]	@ (8002684 <updateSnake+0x90>)
 800265e:	6013      	str	r3, [r2, #0]
    if (snakeDirection == DIR_RIGHT) snake[0].x++;
 8002660:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <updateSnake+0x94>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d104      	bne.n	8002672 <updateSnake+0x7e>
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <updateSnake+0x90>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3301      	adds	r3, #1
 800266e:	4a05      	ldr	r2, [pc, #20]	@ (8002684 <updateSnake+0x90>)
 8002670:	6013      	str	r3, [r2, #0]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000008 	.word	0x20000008
 8002684:	2000023c 	.word	0x2000023c
 8002688:	20000006 	.word	0x20000006

0800268c <checkCollision>:

/**
  * @brief Check for collisions and handle game events.
  */
void checkCollision() {
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
    // Check collision with food
    if (snake[0].x == food.x && snake[0].y == food.y) {
 8002692:	4b25      	ldr	r3, [pc, #148]	@ (8002728 <checkCollision+0x9c>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b25      	ldr	r3, [pc, #148]	@ (800272c <checkCollision+0xa0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d10c      	bne.n	80026b8 <checkCollision+0x2c>
 800269e:	4b22      	ldr	r3, [pc, #136]	@ (8002728 <checkCollision+0x9c>)
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	4b22      	ldr	r3, [pc, #136]	@ (800272c <checkCollision+0xa0>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d106      	bne.n	80026b8 <checkCollision+0x2c>
        snakeLength++;
 80026aa:	4b21      	ldr	r3, [pc, #132]	@ (8002730 <checkCollision+0xa4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3301      	adds	r3, #1
 80026b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002730 <checkCollision+0xa4>)
 80026b2:	6013      	str	r3, [r2, #0]
        generateFood();
 80026b4:	f000 f9b6 	bl	8002a24 <generateFood>
    }

    // Check collision with walls
    if (snake[0].x < 0 || snake[0].x >= GRID_WIDTH || snake[0].y < 0 || snake[0].y >= GRID_HEIGHT) {
 80026b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002728 <checkCollision+0x9c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	db0b      	blt.n	80026d8 <checkCollision+0x4c>
 80026c0:	4b19      	ldr	r3, [pc, #100]	@ (8002728 <checkCollision+0x9c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b17      	cmp	r3, #23
 80026c6:	dc07      	bgt.n	80026d8 <checkCollision+0x4c>
 80026c8:	4b17      	ldr	r3, [pc, #92]	@ (8002728 <checkCollision+0x9c>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	db03      	blt.n	80026d8 <checkCollision+0x4c>
 80026d0:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <checkCollision+0x9c>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b1f      	cmp	r3, #31
 80026d6:	dd02      	ble.n	80026de <checkCollision+0x52>
        isGameOver = 1;
 80026d8:	4b16      	ldr	r3, [pc, #88]	@ (8002734 <checkCollision+0xa8>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
    }

    // Check collision with itself
    for (int i = 1; i < snakeLength; i++) {
 80026de:	2301      	movs	r3, #1
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	e017      	b.n	8002714 <checkCollision+0x88>
        if (snake[0].x == snake[i].x && snake[0].y == snake[i].y) {
 80026e4:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <checkCollision+0x9c>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	490f      	ldr	r1, [pc, #60]	@ (8002728 <checkCollision+0x9c>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d10c      	bne.n	800270e <checkCollision+0x82>
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <checkCollision+0x9c>)
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	490b      	ldr	r1, [pc, #44]	@ (8002728 <checkCollision+0x9c>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	440b      	add	r3, r1
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	d103      	bne.n	800270e <checkCollision+0x82>
            isGameOver = 1;
 8002706:	4b0b      	ldr	r3, [pc, #44]	@ (8002734 <checkCollision+0xa8>)
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]
            break;
 800270c:	e008      	b.n	8002720 <checkCollision+0x94>
    for (int i = 1; i < snakeLength; i++) {
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3301      	adds	r3, #1
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <checkCollision+0xa4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	429a      	cmp	r2, r3
 800271c:	dbe2      	blt.n	80026e4 <checkCollision+0x58>
        }
    }
}
 800271e:	bf00      	nop
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	2000023c 	.word	0x2000023c
 800272c:	2000055c 	.word	0x2000055c
 8002730:	20000008 	.word	0x20000008
 8002734:	20000564 	.word	0x20000564

08002738 <drawGame>:

/**
  * @brief Draw the game elements on the LCD.
  */
void drawGame() {
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b08b      	sub	sp, #44	@ 0x2c
 800273c:	af04      	add	r7, sp, #16
    lcd_Clear(BLACK);
 800273e:	2000      	movs	r0, #0
 8002740:	f7ff f860 	bl	8001804 <lcd_Clear>

    // Draw snake
    for (int i = 0; i < snakeLength; i++) {
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	e033      	b.n	80027b2 <drawGame+0x7a>
        lcd_Fill(snake[i].x * GRID_SIZE, snake[i].y * GRID_SIZE,
 800274a:	4aa2      	ldr	r2, [pc, #648]	@ (80029d4 <drawGame+0x29c>)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002752:	b29b      	uxth	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	0092      	lsls	r2, r2, #2
 8002758:	4413      	add	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	b298      	uxth	r0, r3
 800275e:	4a9d      	ldr	r2, [pc, #628]	@ (80029d4 <drawGame+0x29c>)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	b29b      	uxth	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	0092      	lsls	r2, r2, #2
 800276e:	4413      	add	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	b299      	uxth	r1, r3
                 (snake[i].x + 1) * GRID_SIZE, (snake[i].y + 1) * GRID_SIZE, GREEN);
 8002774:	4a97      	ldr	r2, [pc, #604]	@ (80029d4 <drawGame+0x29c>)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800277c:	3301      	adds	r3, #1
        lcd_Fill(snake[i].x * GRID_SIZE, snake[i].y * GRID_SIZE,
 800277e:	b29b      	uxth	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4413      	add	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	b29a      	uxth	r2, r3
                 (snake[i].x + 1) * GRID_SIZE, (snake[i].y + 1) * GRID_SIZE, GREEN);
 800278a:	4c92      	ldr	r4, [pc, #584]	@ (80029d4 <drawGame+0x29c>)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4423      	add	r3, r4
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	3301      	adds	r3, #1
        lcd_Fill(snake[i].x * GRID_SIZE, snake[i].y * GRID_SIZE,
 8002796:	b29b      	uxth	r3, r3
 8002798:	461c      	mov	r4, r3
 800279a:	00a4      	lsls	r4, r4, #2
 800279c:	4423      	add	r3, r4
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 80027a6:	9400      	str	r4, [sp, #0]
 80027a8:	f7ff f85e 	bl	8001868 <lcd_Fill>
    for (int i = 0; i < snakeLength; i++) {
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	3301      	adds	r3, #1
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	4b89      	ldr	r3, [pc, #548]	@ (80029d8 <drawGame+0x2a0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	dbc6      	blt.n	800274a <drawGame+0x12>
    }

    // Draw food
    lcd_Fill(food.x * GRID_SIZE, food.y * GRID_SIZE,
 80027bc:	4b87      	ldr	r3, [pc, #540]	@ (80029dc <drawGame+0x2a4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	b298      	uxth	r0, r3
 80027cc:	4b83      	ldr	r3, [pc, #524]	@ (80029dc <drawGame+0x2a4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	0092      	lsls	r2, r2, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	b299      	uxth	r1, r3
             (food.x + 1) * GRID_SIZE, (food.y + 1) * GRID_SIZE, RED);
 80027dc:	4b7f      	ldr	r3, [pc, #508]	@ (80029dc <drawGame+0x2a4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3301      	adds	r3, #1
    lcd_Fill(food.x * GRID_SIZE, food.y * GRID_SIZE,
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	0092      	lsls	r2, r2, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	b29a      	uxth	r2, r3
             (food.x + 1) * GRID_SIZE, (food.y + 1) * GRID_SIZE, RED);
 80027ee:	4b7b      	ldr	r3, [pc, #492]	@ (80029dc <drawGame+0x2a4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	3301      	adds	r3, #1
    lcd_Fill(food.x * GRID_SIZE, food.y * GRID_SIZE,
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	461c      	mov	r4, r3
 80027f8:	00a4      	lsls	r4, r4, #2
 80027fa:	4423      	add	r3, r4
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 8002804:	9400      	str	r4, [sp, #0]
 8002806:	f7ff f82f 	bl	8001868 <lcd_Fill>

    // Draw controls in a single row: L, U, R, D
    int buttonWidth = 40;
 800280a:	2328      	movs	r3, #40	@ 0x28
 800280c:	613b      	str	r3, [r7, #16]
    int buttonHeight = 40;
 800280e:	2328      	movs	r3, #40	@ 0x28
 8002810:	60fb      	str	r3, [r7, #12]
    int yPosition = 260;
 8002812:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002816:	60bb      	str	r3, [r7, #8]
    int xStart = 40;
 8002818:	2328      	movs	r3, #40	@ 0x28
 800281a:	607b      	str	r3, [r7, #4]
    int spacing = 10;
 800281c:	230a      	movs	r3, #10
 800281e:	603b      	str	r3, [r7, #0]

    // Left button
    lcd_Fill(xStart, yPosition, xStart + buttonWidth, yPosition + buttonHeight, BLUE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	b298      	uxth	r0, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	b299      	uxth	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	b29a      	uxth	r2, r3
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	b29b      	uxth	r3, r3
 8002830:	4413      	add	r3, r2
 8002832:	b29c      	uxth	r4, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	b29b      	uxth	r3, r3
 800283c:	4413      	add	r3, r2
 800283e:	b29b      	uxth	r3, r3
 8002840:	221f      	movs	r2, #31
 8002842:	9200      	str	r2, [sp, #0]
 8002844:	4622      	mov	r2, r4
 8002846:	f7ff f80f 	bl	8001868 <lcd_Fill>
    lcd_ShowStr(xStart + 10, yPosition + 10, "L", WHITE, BLUE, 24, 1);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	b29b      	uxth	r3, r3
 800284e:	330a      	adds	r3, #10
 8002850:	b298      	uxth	r0, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	b29b      	uxth	r3, r3
 8002856:	330a      	adds	r3, #10
 8002858:	b299      	uxth	r1, r3
 800285a:	2301      	movs	r3, #1
 800285c:	9302      	str	r3, [sp, #8]
 800285e:	2318      	movs	r3, #24
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	231f      	movs	r3, #31
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800286a:	4a5d      	ldr	r2, [pc, #372]	@ (80029e0 <drawGame+0x2a8>)
 800286c:	f7ff fc1a 	bl	80020a4 <lcd_ShowStr>

    // Up button
    lcd_Fill(xStart + buttonWidth + spacing, yPosition, xStart + 2 * buttonWidth + spacing, yPosition + buttonHeight, BLUE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	b29a      	uxth	r2, r3
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	b29b      	uxth	r3, r3
 8002878:	4413      	add	r3, r2
 800287a:	b29a      	uxth	r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	4413      	add	r3, r2
 8002882:	b298      	uxth	r0, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	b299      	uxth	r1, r3
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	b29b      	uxth	r3, r3
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	b29b      	uxth	r3, r3
 8002894:	4413      	add	r3, r2
 8002896:	b29a      	uxth	r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	4413      	add	r3, r2
 800289e:	b29c      	uxth	r4, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	221f      	movs	r2, #31
 80028ae:	9200      	str	r2, [sp, #0]
 80028b0:	4622      	mov	r2, r4
 80028b2:	f7fe ffd9 	bl	8001868 <lcd_Fill>
    lcd_ShowStr(xStart + buttonWidth + spacing + 10, yPosition + 10, "U", WHITE, BLUE, 24, 1);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	4413      	add	r3, r2
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	330a      	adds	r3, #10
 80028cc:	b298      	uxth	r0, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	330a      	adds	r3, #10
 80028d4:	b299      	uxth	r1, r3
 80028d6:	2301      	movs	r3, #1
 80028d8:	9302      	str	r3, [sp, #8]
 80028da:	2318      	movs	r3, #24
 80028dc:	9301      	str	r3, [sp, #4]
 80028de:	231f      	movs	r3, #31
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028e6:	4a3f      	ldr	r2, [pc, #252]	@ (80029e4 <drawGame+0x2ac>)
 80028e8:	f7ff fbdc 	bl	80020a4 <lcd_ShowStr>

    // Right button
    lcd_Fill(xStart + 2 * (buttonWidth + spacing), yPosition, xStart + 3 * buttonWidth + 2 * spacing, yPosition + buttonHeight, BLUE);
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	4413      	add	r3, r2
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	b298      	uxth	r0, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	b299      	uxth	r1, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	b29b      	uxth	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	0052      	lsls	r2, r2, #1
 800290c:	4413      	add	r3, r2
 800290e:	b29a      	uxth	r2, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	b29b      	uxth	r3, r3
 8002918:	4413      	add	r3, r2
 800291a:	b29a      	uxth	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	b29b      	uxth	r3, r3
 8002920:	4413      	add	r3, r2
 8002922:	b29c      	uxth	r4, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	b29b      	uxth	r3, r3
 800292c:	4413      	add	r3, r2
 800292e:	b29b      	uxth	r3, r3
 8002930:	221f      	movs	r2, #31
 8002932:	9200      	str	r2, [sp, #0]
 8002934:	4622      	mov	r2, r4
 8002936:	f7fe ff97 	bl	8001868 <lcd_Fill>
    lcd_ShowStr(xStart + 2 * (buttonWidth + spacing) + 10, yPosition + 10, "R", WHITE, BLUE, 24, 1);
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	4413      	add	r3, r2
 8002940:	b29b      	uxth	r3, r3
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	b29b      	uxth	r3, r3
 800294a:	4413      	add	r3, r2
 800294c:	b29b      	uxth	r3, r3
 800294e:	330a      	adds	r3, #10
 8002950:	b298      	uxth	r0, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	b29b      	uxth	r3, r3
 8002956:	330a      	adds	r3, #10
 8002958:	b299      	uxth	r1, r3
 800295a:	2301      	movs	r3, #1
 800295c:	9302      	str	r3, [sp, #8]
 800295e:	2318      	movs	r3, #24
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	231f      	movs	r3, #31
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800296a:	4a1f      	ldr	r2, [pc, #124]	@ (80029e8 <drawGame+0x2b0>)
 800296c:	f7ff fb9a 	bl	80020a4 <lcd_ShowStr>

    // Down button
    lcd_Fill(xStart + 3 * (buttonWidth + spacing), yPosition, xStart + 4 * buttonWidth + 3 * spacing, yPosition + buttonHeight, BLUE);
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	4413      	add	r3, r2
 8002976:	b29b      	uxth	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	0052      	lsls	r2, r2, #1
 800297c:	4413      	add	r3, r2
 800297e:	b29a      	uxth	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	b29b      	uxth	r3, r3
 8002984:	4413      	add	r3, r2
 8002986:	b298      	uxth	r0, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	b299      	uxth	r1, r3
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	b29b      	uxth	r3, r3
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	b29a      	uxth	r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	461c      	mov	r4, r3
 800299a:	0064      	lsls	r4, r4, #1
 800299c:	4423      	add	r3, r4
 800299e:	b29b      	uxth	r3, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	b29c      	uxth	r4, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	221f      	movs	r2, #31
 80029ba:	9200      	str	r2, [sp, #0]
 80029bc:	4622      	mov	r2, r4
 80029be:	f7fe ff53 	bl	8001868 <lcd_Fill>
    lcd_ShowStr(xStart + 3 * (buttonWidth + spacing) + 10, yPosition + 10, "D", WHITE, BLUE, 24, 1);
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	0052      	lsls	r2, r2, #1
 80029ce:	4413      	add	r3, r2
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	e00b      	b.n	80029ec <drawGame+0x2b4>
 80029d4:	2000023c 	.word	0x2000023c
 80029d8:	20000008 	.word	0x20000008
 80029dc:	2000055c 	.word	0x2000055c
 80029e0:	08009310 	.word	0x08009310
 80029e4:	08009314 	.word	0x08009314
 80029e8:	08009318 	.word	0x08009318
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	330a      	adds	r3, #10
 80029f6:	b298      	uxth	r0, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	330a      	adds	r3, #10
 80029fe:	b299      	uxth	r1, r3
 8002a00:	2301      	movs	r3, #1
 8002a02:	9302      	str	r3, [sp, #8]
 8002a04:	2318      	movs	r3, #24
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	231f      	movs	r3, #31
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a10:	4a03      	ldr	r2, [pc, #12]	@ (8002a20 <drawGame+0x2e8>)
 8002a12:	f7ff fb47 	bl	80020a4 <lcd_ShowStr>
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd90      	pop	{r4, r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	0800931c 	.word	0x0800931c

08002a24 <generateFood>:

/**
  * @brief Generate a new food position.
  */
void generateFood() {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
    food.x = rand() % GRID_WIDTH;
 8002a28:	f005 fb62 	bl	80080f0 <rand>
 8002a2c:	4601      	mov	r1, r0
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <generateFood+0x40>)
 8002a30:	fb83 2301 	smull	r2, r3, r3, r1
 8002a34:	109a      	asrs	r2, r3, #2
 8002a36:	17cb      	asrs	r3, r1, #31
 8002a38:	1ad2      	subs	r2, r2, r3
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	1aca      	subs	r2, r1, r3
 8002a44:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <generateFood+0x44>)
 8002a46:	601a      	str	r2, [r3, #0]
    food.y = rand() % GRID_HEIGHT;
 8002a48:	f005 fb52 	bl	80080f0 <rand>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	425a      	negs	r2, r3
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	f002 021f 	and.w	r2, r2, #31
 8002a58:	bf58      	it	pl
 8002a5a:	4253      	negpl	r3, r2
 8002a5c:	4a02      	ldr	r2, [pc, #8]	@ (8002a68 <generateFood+0x44>)
 8002a5e:	6053      	str	r3, [r2, #4]
}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	2aaaaaab 	.word	0x2aaaaaab
 8002a68:	2000055c 	.word	0x2000055c

08002a6c <isButtonTouched>:

/**
  * @brief Check if a button is touched.
  */
uint8_t isButtonTouched(int x1, int y1, int x2, int y2) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
    return touch_IsTouched() &&
 8002a7a:	f001 fa85 	bl	8003f88 <touch_IsTouched>
 8002a7e:	4603      	mov	r3, r0
           touch_GetX() > x1 && touch_GetX() < x2 &&
           touch_GetY() > y1 && touch_GetY() < y2;
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01d      	beq.n	8002ac0 <isButtonTouched+0x54>
           touch_GetX() > x1 && touch_GetX() < x2 &&
 8002a84:	f001 fa92 	bl	8003fac <touch_GetX>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461a      	mov	r2, r3
    return touch_IsTouched() &&
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	da16      	bge.n	8002ac0 <isButtonTouched+0x54>
           touch_GetX() > x1 && touch_GetX() < x2 &&
 8002a92:	f001 fa8b 	bl	8003fac <touch_GetX>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461a      	mov	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	dd0f      	ble.n	8002ac0 <isButtonTouched+0x54>
           touch_GetY() > y1 && touch_GetY() < y2;
 8002aa0:	f001 fa90 	bl	8003fc4 <touch_GetY>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
           touch_GetX() > x1 && touch_GetX() < x2 &&
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	da08      	bge.n	8002ac0 <isButtonTouched+0x54>
           touch_GetY() > y1 && touch_GetY() < y2;
 8002aae:	f001 fa89 	bl	8003fc4 <touch_GetY>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	dd01      	ble.n	8002ac0 <isButtonTouched+0x54>
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <isButtonTouched+0x56>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad0:	b672      	cpsid	i
}
 8002ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <Error_Handler+0x8>

08002ad8 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002adc:	4803      	ldr	r0, [pc, #12]	@ (8002aec <timer_init+0x14>)
 8002ade:	f004 fb39 	bl	8007154 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002ae2:	4803      	ldr	r0, [pc, #12]	@ (8002af0 <timer_init+0x18>)
 8002ae4:	f004 face 	bl	8007084 <HAL_TIM_Base_Start>
}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000610 	.word	0x20000610
 8002af0:	200005c8 	.word	0x200005c8

08002af4 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002afe:	4a08      	ldr	r2, [pc, #32]	@ (8002b20 <setTimer2+0x2c>)
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002b04:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <setTimer2+0x2c>)
 8002b06:	881a      	ldrh	r2, [r3, #0]
 8002b08:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <setTimer2+0x30>)
 8002b0a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <setTimer2+0x34>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	801a      	strh	r2, [r3, #0]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	2000056a 	.word	0x2000056a
 8002b24:	20000568 	.word	0x20000568
 8002b28:	20000566 	.word	0x20000566

08002b2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3c:	d116      	bne.n	8002b6c <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b74 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d010      	beq.n	8002b68 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002b46:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b50:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002b52:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002b5a:	4b07      	ldr	r3, [pc, #28]	@ (8002b78 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002b60:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002b62:	881a      	ldrh	r2, [r3, #0]
 8002b64:	4b03      	ldr	r3, [pc, #12]	@ (8002b74 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b66:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002b68:	f7ff fb00 	bl	800216c <led7_Scan>
	}
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000568 	.word	0x20000568
 8002b78:	20000566 	.word	0x20000566
 8002b7c:	2000056a 	.word	0x2000056a

08002b80 <delay_us>:

void delay_us (uint16_t us)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8002b8a:	4b09      	ldr	r3, [pc, #36]	@ (8002bb0 <delay_us+0x30>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8002b92:	bf00      	nop
 8002b94:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <delay_us+0x30>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d3f9      	bcc.n	8002b94 <delay_us+0x14>
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	200005c8 	.word	0x200005c8

08002bb4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002bb8:	4b17      	ldr	r3, [pc, #92]	@ (8002c18 <MX_SPI1_Init+0x64>)
 8002bba:	4a18      	ldr	r2, [pc, #96]	@ (8002c1c <MX_SPI1_Init+0x68>)
 8002bbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bbe:	4b16      	ldr	r3, [pc, #88]	@ (8002c18 <MX_SPI1_Init+0x64>)
 8002bc0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002bc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bc6:	4b14      	ldr	r3, [pc, #80]	@ (8002c18 <MX_SPI1_Init+0x64>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bcc:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <MX_SPI1_Init+0x64>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bd2:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <MX_SPI1_Init+0x64>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c18 <MX_SPI1_Init+0x64>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bde:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <MX_SPI1_Init+0x64>)
 8002be0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002be4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002be6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <MX_SPI1_Init+0x64>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bec:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <MX_SPI1_Init+0x64>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bf2:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <MX_SPI1_Init+0x64>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bf8:	4b07      	ldr	r3, [pc, #28]	@ (8002c18 <MX_SPI1_Init+0x64>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002bfe:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <MX_SPI1_Init+0x64>)
 8002c00:	220a      	movs	r2, #10
 8002c02:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c04:	4804      	ldr	r0, [pc, #16]	@ (8002c18 <MX_SPI1_Init+0x64>)
 8002c06:	f003 ff19 	bl	8006a3c <HAL_SPI_Init>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c10:	f7ff ff5c 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	2000056c 	.word	0x2000056c
 8002c1c:	40013000 	.word	0x40013000

08002c20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	@ 0x28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ca4 <HAL_SPI_MspInit+0x84>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d12b      	bne.n	8002c9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	4b18      	ldr	r3, [pc, #96]	@ (8002ca8 <HAL_SPI_MspInit+0x88>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4a:	4a17      	ldr	r2, [pc, #92]	@ (8002ca8 <HAL_SPI_MspInit+0x88>)
 8002c4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c52:	4b15      	ldr	r3, [pc, #84]	@ (8002ca8 <HAL_SPI_MspInit+0x88>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <HAL_SPI_MspInit+0x88>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c66:	4a10      	ldr	r2, [pc, #64]	@ (8002ca8 <HAL_SPI_MspInit+0x88>)
 8002c68:	f043 0302 	orr.w	r3, r3, #2
 8002c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <HAL_SPI_MspInit+0x88>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002c7a:	2338      	movs	r3, #56	@ 0x38
 8002c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c86:	2303      	movs	r3, #3
 8002c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c8a:	2305      	movs	r3, #5
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4619      	mov	r1, r3
 8002c94:	4805      	ldr	r0, [pc, #20]	@ (8002cac <HAL_SPI_MspInit+0x8c>)
 8002c96:	f002 f8bf 	bl	8004e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002c9a:	bf00      	nop
 8002c9c:	3728      	adds	r7, #40	@ 0x28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40013000 	.word	0x40013000
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020400 	.word	0x40020400

08002cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
 8002cba:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <HAL_MspInit+0x4c>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8002cfc <HAL_MspInit+0x4c>)
 8002cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cfc <HAL_MspInit+0x4c>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <HAL_MspInit+0x4c>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	4a08      	ldr	r2, [pc, #32]	@ (8002cfc <HAL_MspInit+0x4c>)
 8002cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ce2:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <HAL_MspInit+0x4c>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800

08002d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <NMI_Handler+0x4>

08002d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d0c:	bf00      	nop
 8002d0e:	e7fd      	b.n	8002d0c <HardFault_Handler+0x4>

08002d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <MemManage_Handler+0x4>

08002d18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <BusFault_Handler+0x4>

08002d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <UsageFault_Handler+0x4>

08002d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d56:	f001 f9bd 	bl	80040d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d64:	4802      	ldr	r0, [pc, #8]	@ (8002d70 <TIM2_IRQHandler+0x10>)
 8002d66:	f004 fabe 	bl	80072e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000610 	.word	0x20000610

08002d74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d78:	4802      	ldr	r0, [pc, #8]	@ (8002d84 <DMA2_Stream0_IRQHandler+0x10>)
 8002d7a:	f001 fe11 	bl	80049a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000124 	.word	0x20000124

08002d88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
	return 1;
 8002d8c:	2301      	movs	r3, #1
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <_kill>:

int _kill(int pid, int sig)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002da2:	f005 fb37 	bl	8008414 <__errno>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2216      	movs	r2, #22
 8002daa:	601a      	str	r2, [r3, #0]
	return -1;
 8002dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <_exit>:

void _exit (int status)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ffe7 	bl	8002d98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002dca:	bf00      	nop
 8002dcc:	e7fd      	b.n	8002dca <_exit+0x12>

08002dce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	e00a      	b.n	8002df6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002de0:	f3af 8000 	nop.w
 8002de4:	4601      	mov	r1, r0
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	60ba      	str	r2, [r7, #8]
 8002dec:	b2ca      	uxtb	r2, r1
 8002dee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	3301      	adds	r3, #1
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	dbf0      	blt.n	8002de0 <_read+0x12>
	}

return len;
 8002dfe:	687b      	ldr	r3, [r7, #4]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	e009      	b.n	8002e2e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	60ba      	str	r2, [r7, #8]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	dbf1      	blt.n	8002e1a <_write+0x12>
	}
	return len;
 8002e36:	687b      	ldr	r3, [r7, #4]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <_close>:

int _close(int file)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	return -1;
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e68:	605a      	str	r2, [r3, #4]
	return 0;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <_isatty>:

int _isatty(int file)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
	return 1;
 8002e80:	2301      	movs	r3, #1
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b085      	sub	sp, #20
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
	return 0;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002eb0:	4a14      	ldr	r2, [pc, #80]	@ (8002f04 <_sbrk+0x5c>)
 8002eb2:	4b15      	ldr	r3, [pc, #84]	@ (8002f08 <_sbrk+0x60>)
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ebc:	4b13      	ldr	r3, [pc, #76]	@ (8002f0c <_sbrk+0x64>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d102      	bne.n	8002eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ec4:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <_sbrk+0x64>)
 8002ec6:	4a12      	ldr	r2, [pc, #72]	@ (8002f10 <_sbrk+0x68>)
 8002ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eca:	4b10      	ldr	r3, [pc, #64]	@ (8002f0c <_sbrk+0x64>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d207      	bcs.n	8002ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ed8:	f005 fa9c 	bl	8008414 <__errno>
 8002edc:	4603      	mov	r3, r0
 8002ede:	220c      	movs	r2, #12
 8002ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee6:	e009      	b.n	8002efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ee8:	4b08      	ldr	r3, [pc, #32]	@ (8002f0c <_sbrk+0x64>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eee:	4b07      	ldr	r3, [pc, #28]	@ (8002f0c <_sbrk+0x64>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	4a05      	ldr	r2, [pc, #20]	@ (8002f0c <_sbrk+0x64>)
 8002ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002efa:	68fb      	ldr	r3, [r7, #12]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20020000 	.word	0x20020000
 8002f08:	00000400 	.word	0x00000400
 8002f0c:	200005c4 	.word	0x200005c4
 8002f10:	200007f0 	.word	0x200007f0

08002f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f18:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <SystemInit+0x20>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1e:	4a05      	ldr	r2, [pc, #20]	@ (8002f34 <SystemInit+0x20>)
 8002f20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f3e:	f107 0308 	add.w	r3, r7, #8
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	609a      	str	r2, [r3, #8]
 8002f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f4c:	463b      	mov	r3, r7
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f54:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd0 <MX_TIM1_Init+0x98>)
 8002f56:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd4 <MX_TIM1_Init+0x9c>)
 8002f58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd0 <MX_TIM1_Init+0x98>)
 8002f5c:	2253      	movs	r2, #83	@ 0x53
 8002f5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f60:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd0 <MX_TIM1_Init+0x98>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002f66:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd0 <MX_TIM1_Init+0x98>)
 8002f68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f6e:	4b18      	ldr	r3, [pc, #96]	@ (8002fd0 <MX_TIM1_Init+0x98>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f74:	4b16      	ldr	r3, [pc, #88]	@ (8002fd0 <MX_TIM1_Init+0x98>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f7a:	4b15      	ldr	r3, [pc, #84]	@ (8002fd0 <MX_TIM1_Init+0x98>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f80:	4813      	ldr	r0, [pc, #76]	@ (8002fd0 <MX_TIM1_Init+0x98>)
 8002f82:	f004 f82f 	bl	8006fe4 <HAL_TIM_Base_Init>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002f8c:	f7ff fd9e 	bl	8002acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f96:	f107 0308 	add.w	r3, r7, #8
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	480c      	ldr	r0, [pc, #48]	@ (8002fd0 <MX_TIM1_Init+0x98>)
 8002f9e:	f004 fb6d 	bl	800767c <HAL_TIM_ConfigClockSource>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002fa8:	f7ff fd90 	bl	8002acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fac:	2300      	movs	r3, #0
 8002fae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fb4:	463b      	mov	r3, r7
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4805      	ldr	r0, [pc, #20]	@ (8002fd0 <MX_TIM1_Init+0x98>)
 8002fba:	f004 ff39 	bl	8007e30 <HAL_TIMEx_MasterConfigSynchronization>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002fc4:	f7ff fd82 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002fc8:	bf00      	nop
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	200005c8 	.word	0x200005c8
 8002fd4:	40010000 	.word	0x40010000

08002fd8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fde:	f107 0308 	add.w	r3, r7, #8
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fec:	463b      	mov	r3, r7
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800306c <MX_TIM2_Init+0x94>)
 8002ff6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ffa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800306c <MX_TIM2_Init+0x94>)
 8002ffe:	f240 3247 	movw	r2, #839	@ 0x347
 8003002:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003004:	4b19      	ldr	r3, [pc, #100]	@ (800306c <MX_TIM2_Init+0x94>)
 8003006:	2200      	movs	r2, #0
 8003008:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800300a:	4b18      	ldr	r3, [pc, #96]	@ (800306c <MX_TIM2_Init+0x94>)
 800300c:	2263      	movs	r2, #99	@ 0x63
 800300e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003010:	4b16      	ldr	r3, [pc, #88]	@ (800306c <MX_TIM2_Init+0x94>)
 8003012:	2200      	movs	r2, #0
 8003014:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003016:	4b15      	ldr	r3, [pc, #84]	@ (800306c <MX_TIM2_Init+0x94>)
 8003018:	2200      	movs	r2, #0
 800301a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800301c:	4813      	ldr	r0, [pc, #76]	@ (800306c <MX_TIM2_Init+0x94>)
 800301e:	f003 ffe1 	bl	8006fe4 <HAL_TIM_Base_Init>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003028:	f7ff fd50 	bl	8002acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800302c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003030:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003032:	f107 0308 	add.w	r3, r7, #8
 8003036:	4619      	mov	r1, r3
 8003038:	480c      	ldr	r0, [pc, #48]	@ (800306c <MX_TIM2_Init+0x94>)
 800303a:	f004 fb1f 	bl	800767c <HAL_TIM_ConfigClockSource>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003044:	f7ff fd42 	bl	8002acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003048:	2300      	movs	r3, #0
 800304a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800304c:	2300      	movs	r3, #0
 800304e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003050:	463b      	mov	r3, r7
 8003052:	4619      	mov	r1, r3
 8003054:	4805      	ldr	r0, [pc, #20]	@ (800306c <MX_TIM2_Init+0x94>)
 8003056:	f004 feeb 	bl	8007e30 <HAL_TIMEx_MasterConfigSynchronization>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003060:	f7ff fd34 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003064:	bf00      	nop
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000610 	.word	0x20000610

08003070 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003076:	1d3b      	adds	r3, r7, #4
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
 8003084:	615a      	str	r2, [r3, #20]
 8003086:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003088:	4b1e      	ldr	r3, [pc, #120]	@ (8003104 <MX_TIM13_Init+0x94>)
 800308a:	4a1f      	ldr	r2, [pc, #124]	@ (8003108 <MX_TIM13_Init+0x98>)
 800308c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800308e:	4b1d      	ldr	r3, [pc, #116]	@ (8003104 <MX_TIM13_Init+0x94>)
 8003090:	f240 3247 	movw	r2, #839	@ 0x347
 8003094:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003096:	4b1b      	ldr	r3, [pc, #108]	@ (8003104 <MX_TIM13_Init+0x94>)
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 800309c:	4b19      	ldr	r3, [pc, #100]	@ (8003104 <MX_TIM13_Init+0x94>)
 800309e:	2263      	movs	r2, #99	@ 0x63
 80030a0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a2:	4b18      	ldr	r3, [pc, #96]	@ (8003104 <MX_TIM13_Init+0x94>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a8:	4b16      	ldr	r3, [pc, #88]	@ (8003104 <MX_TIM13_Init+0x94>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80030ae:	4815      	ldr	r0, [pc, #84]	@ (8003104 <MX_TIM13_Init+0x94>)
 80030b0:	f003 ff98 	bl	8006fe4 <HAL_TIM_Base_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80030ba:	f7ff fd07 	bl	8002acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80030be:	4811      	ldr	r0, [pc, #68]	@ (8003104 <MX_TIM13_Init+0x94>)
 80030c0:	f004 f8b8 	bl	8007234 <HAL_TIM_PWM_Init>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80030ca:	f7ff fcff 	bl	8002acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030ce:	2360      	movs	r3, #96	@ 0x60
 80030d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	2200      	movs	r2, #0
 80030e2:	4619      	mov	r1, r3
 80030e4:	4807      	ldr	r0, [pc, #28]	@ (8003104 <MX_TIM13_Init+0x94>)
 80030e6:	f004 fa07 	bl	80074f8 <HAL_TIM_PWM_ConfigChannel>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80030f0:	f7ff fcec 	bl	8002acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80030f4:	4803      	ldr	r0, [pc, #12]	@ (8003104 <MX_TIM13_Init+0x94>)
 80030f6:	f000 f85b 	bl	80031b0 <HAL_TIM_MspPostInit>

}
 80030fa:	bf00      	nop
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000658 	.word	0x20000658
 8003108:	40001c00 	.word	0x40001c00

0800310c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a22      	ldr	r2, [pc, #136]	@ (80031a4 <HAL_TIM_Base_MspInit+0x98>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d10e      	bne.n	800313c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	4b21      	ldr	r3, [pc, #132]	@ (80031a8 <HAL_TIM_Base_MspInit+0x9c>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003126:	4a20      	ldr	r2, [pc, #128]	@ (80031a8 <HAL_TIM_Base_MspInit+0x9c>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6453      	str	r3, [r2, #68]	@ 0x44
 800312e:	4b1e      	ldr	r3, [pc, #120]	@ (80031a8 <HAL_TIM_Base_MspInit+0x9c>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800313a:	e02e      	b.n	800319a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003144:	d116      	bne.n	8003174 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	4b17      	ldr	r3, [pc, #92]	@ (80031a8 <HAL_TIM_Base_MspInit+0x9c>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	4a16      	ldr	r2, [pc, #88]	@ (80031a8 <HAL_TIM_Base_MspInit+0x9c>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6413      	str	r3, [r2, #64]	@ 0x40
 8003156:	4b14      	ldr	r3, [pc, #80]	@ (80031a8 <HAL_TIM_Base_MspInit+0x9c>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	2100      	movs	r1, #0
 8003166:	201c      	movs	r0, #28
 8003168:	f001 fb35 	bl	80047d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800316c:	201c      	movs	r0, #28
 800316e:	f001 fb4e 	bl	800480e <HAL_NVIC_EnableIRQ>
}
 8003172:	e012      	b.n	800319a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a0c      	ldr	r2, [pc, #48]	@ (80031ac <HAL_TIM_Base_MspInit+0xa0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d10d      	bne.n	800319a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	4b09      	ldr	r3, [pc, #36]	@ (80031a8 <HAL_TIM_Base_MspInit+0x9c>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	4a08      	ldr	r2, [pc, #32]	@ (80031a8 <HAL_TIM_Base_MspInit+0x9c>)
 8003188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800318c:	6413      	str	r3, [r2, #64]	@ 0x40
 800318e:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <HAL_TIM_Base_MspInit+0x9c>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
}
 800319a:	bf00      	nop
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40010000 	.word	0x40010000
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40001c00 	.word	0x40001c00

080031b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b8:	f107 030c 	add.w	r3, r7, #12
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a12      	ldr	r2, [pc, #72]	@ (8003218 <HAL_TIM_MspPostInit+0x68>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d11e      	bne.n	8003210 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	4b11      	ldr	r3, [pc, #68]	@ (800321c <HAL_TIM_MspPostInit+0x6c>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	4a10      	ldr	r2, [pc, #64]	@ (800321c <HAL_TIM_MspPostInit+0x6c>)
 80031dc:	f043 0320 	orr.w	r3, r3, #32
 80031e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e2:	4b0e      	ldr	r3, [pc, #56]	@ (800321c <HAL_TIM_MspPostInit+0x6c>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f4:	2302      	movs	r3, #2
 80031f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003200:	2309      	movs	r3, #9
 8003202:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003204:	f107 030c 	add.w	r3, r7, #12
 8003208:	4619      	mov	r1, r3
 800320a:	4805      	ldr	r0, [pc, #20]	@ (8003220 <HAL_TIM_MspPostInit+0x70>)
 800320c:	f001 fe04 	bl	8004e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003210:	bf00      	nop
 8003212:	3720      	adds	r7, #32
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40001c00 	.word	0x40001c00
 800321c:	40023800 	.word	0x40023800
 8003220:	40021400 	.word	0x40021400

08003224 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800322e:	2300      	movs	r3, #0
 8003230:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]
 8003236:	e025      	b.n	8003284 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8003238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323c:	2b00      	cmp	r3, #0
 800323e:	da06      	bge.n	800324e <TP_Write_Byte+0x2a>
 8003240:	2201      	movs	r2, #1
 8003242:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003246:	4813      	ldr	r0, [pc, #76]	@ (8003294 <TP_Write_Byte+0x70>)
 8003248:	f001 ff9a 	bl	8005180 <HAL_GPIO_WritePin>
 800324c:	e005      	b.n	800325a <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 800324e:	2200      	movs	r2, #0
 8003250:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003254:	480f      	ldr	r0, [pc, #60]	@ (8003294 <TP_Write_Byte+0x70>)
 8003256:	f001 ff93 	bl	8005180 <HAL_GPIO_WritePin>
		num<<=1;
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003260:	2200      	movs	r2, #0
 8003262:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003266:	480c      	ldr	r0, [pc, #48]	@ (8003298 <TP_Write_Byte+0x74>)
 8003268:	f001 ff8a 	bl	8005180 <HAL_GPIO_WritePin>
		delay_us(1);
 800326c:	2001      	movs	r0, #1
 800326e:	f7ff fc87 	bl	8002b80 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8003272:	2201      	movs	r2, #1
 8003274:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003278:	4807      	ldr	r0, [pc, #28]	@ (8003298 <TP_Write_Byte+0x74>)
 800327a:	f001 ff81 	bl	8005180 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	3301      	adds	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b07      	cmp	r3, #7
 8003288:	d9d6      	bls.n	8003238 <TP_Write_Byte+0x14>
	}
}
 800328a:	bf00      	nop
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40020800 	.word	0x40020800
 8003298:	40021800 	.word	0x40021800

0800329c <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032b4:	482f      	ldr	r0, [pc, #188]	@ (8003374 <TP_Read_AD+0xd8>)
 80032b6:	f001 ff63 	bl	8005180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032c0:	482d      	ldr	r0, [pc, #180]	@ (8003378 <TP_Read_AD+0xdc>)
 80032c2:	f001 ff5d 	bl	8005180 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 80032c6:	2200      	movs	r2, #0
 80032c8:	2180      	movs	r1, #128	@ 0x80
 80032ca:	482a      	ldr	r0, [pc, #168]	@ (8003374 <TP_Read_AD+0xd8>)
 80032cc:	f001 ff58 	bl	8005180 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff ffa6 	bl	8003224 <TP_Write_Byte>
	delay_us(6);
 80032d8:	2006      	movs	r0, #6
 80032da:	f7ff fc51 	bl	8002b80 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80032de:	2200      	movs	r2, #0
 80032e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032e4:	4823      	ldr	r0, [pc, #140]	@ (8003374 <TP_Read_AD+0xd8>)
 80032e6:	f001 ff4b 	bl	8005180 <HAL_GPIO_WritePin>
	delay_us(1);
 80032ea:	2001      	movs	r0, #1
 80032ec:	f7ff fc48 	bl	8002b80 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80032f0:	2201      	movs	r2, #1
 80032f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032f6:	481f      	ldr	r0, [pc, #124]	@ (8003374 <TP_Read_AD+0xd8>)
 80032f8:	f001 ff42 	bl	8005180 <HAL_GPIO_WritePin>
	delay_us(1);
 80032fc:	2001      	movs	r0, #1
 80032fe:	f7ff fc3f 	bl	8002b80 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003308:	481a      	ldr	r0, [pc, #104]	@ (8003374 <TP_Read_AD+0xd8>)
 800330a:	f001 ff39 	bl	8005180 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
 8003312:	e01f      	b.n	8003354 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8003314:	89bb      	ldrh	r3, [r7, #12]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003320:	4814      	ldr	r0, [pc, #80]	@ (8003374 <TP_Read_AD+0xd8>)
 8003322:	f001 ff2d 	bl	8005180 <HAL_GPIO_WritePin>
		delay_us(1);
 8003326:	2001      	movs	r0, #1
 8003328:	f7ff fc2a 	bl	8002b80 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 800332c:	2201      	movs	r2, #1
 800332e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003332:	4810      	ldr	r0, [pc, #64]	@ (8003374 <TP_Read_AD+0xd8>)
 8003334:	f001 ff24 	bl	8005180 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8003338:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800333c:	480e      	ldr	r0, [pc, #56]	@ (8003378 <TP_Read_AD+0xdc>)
 800333e:	f001 ff07 	bl	8005150 <HAL_GPIO_ReadPin>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <TP_Read_AD+0xb2>
 8003348:	89bb      	ldrh	r3, [r7, #12]
 800334a:	3301      	adds	r3, #1
 800334c:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	3301      	adds	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b0f      	cmp	r3, #15
 8003358:	d9dc      	bls.n	8003314 <TP_Read_AD+0x78>
	}
	Num>>=4;
 800335a:	89bb      	ldrh	r3, [r7, #12]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8003360:	2201      	movs	r2, #1
 8003362:	2180      	movs	r1, #128	@ 0x80
 8003364:	4803      	ldr	r0, [pc, #12]	@ (8003374 <TP_Read_AD+0xd8>)
 8003366:	f001 ff0b 	bl	8005180 <HAL_GPIO_WritePin>
	return(Num);
 800336a:	89bb      	ldrh	r3, [r7, #12]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021800 	.word	0x40021800
 8003378:	40020800 	.word	0x40020800

0800337c <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b089      	sub	sp, #36	@ 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8003386:	2300      	movs	r3, #0
 8003388:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 800338a:	2300      	movs	r3, #0
 800338c:	83fb      	strh	r3, [r7, #30]
 800338e:	e00e      	b.n	80033ae <TP_Read_XOY+0x32>
 8003390:	8bfc      	ldrh	r4, [r7, #30]
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ff81 	bl	800329c <TP_Read_AD>
 800339a:	4603      	mov	r3, r0
 800339c:	461a      	mov	r2, r3
 800339e:	0063      	lsls	r3, r4, #1
 80033a0:	3320      	adds	r3, #32
 80033a2:	443b      	add	r3, r7
 80033a4:	f823 2c14 	strh.w	r2, [r3, #-20]
 80033a8:	8bfb      	ldrh	r3, [r7, #30]
 80033aa:	3301      	adds	r3, #1
 80033ac:	83fb      	strh	r3, [r7, #30]
 80033ae:	8bfb      	ldrh	r3, [r7, #30]
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d9ed      	bls.n	8003390 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 80033b4:	2300      	movs	r3, #0
 80033b6:	83fb      	strh	r3, [r7, #30]
 80033b8:	e035      	b.n	8003426 <TP_Read_XOY+0xaa>
	{
		for(j=i+1;j<READ_TIMES;j++)
 80033ba:	8bfb      	ldrh	r3, [r7, #30]
 80033bc:	3301      	adds	r3, #1
 80033be:	83bb      	strh	r3, [r7, #28]
 80033c0:	e02b      	b.n	800341a <TP_Read_XOY+0x9e>
		{
			if(buf[i]>buf[j])
 80033c2:	8bfb      	ldrh	r3, [r7, #30]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	3320      	adds	r3, #32
 80033c8:	443b      	add	r3, r7
 80033ca:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80033ce:	8bbb      	ldrh	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	3320      	adds	r3, #32
 80033d4:	443b      	add	r3, r7
 80033d6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d91a      	bls.n	8003414 <TP_Read_XOY+0x98>
			{
				temp=buf[i];
 80033de:	8bfb      	ldrh	r3, [r7, #30]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	3320      	adds	r3, #32
 80033e4:	443b      	add	r3, r7
 80033e6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80033ea:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 80033ec:	8bbb      	ldrh	r3, [r7, #28]
 80033ee:	8bfa      	ldrh	r2, [r7, #30]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	3320      	adds	r3, #32
 80033f4:	443b      	add	r3, r7
 80033f6:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 80033fa:	0053      	lsls	r3, r2, #1
 80033fc:	3320      	adds	r3, #32
 80033fe:	443b      	add	r3, r7
 8003400:	460a      	mov	r2, r1
 8003402:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8003406:	8bbb      	ldrh	r3, [r7, #28]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	3320      	adds	r3, #32
 800340c:	443b      	add	r3, r7
 800340e:	8b3a      	ldrh	r2, [r7, #24]
 8003410:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8003414:	8bbb      	ldrh	r3, [r7, #28]
 8003416:	3301      	adds	r3, #1
 8003418:	83bb      	strh	r3, [r7, #28]
 800341a:	8bbb      	ldrh	r3, [r7, #28]
 800341c:	2b04      	cmp	r3, #4
 800341e:	d9d0      	bls.n	80033c2 <TP_Read_XOY+0x46>
	for(i=0;i<READ_TIMES-1; i++)
 8003420:	8bfb      	ldrh	r3, [r7, #30]
 8003422:	3301      	adds	r3, #1
 8003424:	83fb      	strh	r3, [r7, #30]
 8003426:	8bfb      	ldrh	r3, [r7, #30]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d9c6      	bls.n	80033ba <TP_Read_XOY+0x3e>
			}
		}
	}
	sum=0;
 800342c:	2300      	movs	r3, #0
 800342e:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8003430:	2301      	movs	r3, #1
 8003432:	83fb      	strh	r3, [r7, #30]
 8003434:	e00b      	b.n	800344e <TP_Read_XOY+0xd2>
 8003436:	8bfb      	ldrh	r3, [r7, #30]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	3320      	adds	r3, #32
 800343c:	443b      	add	r3, r7
 800343e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003442:	8b7b      	ldrh	r3, [r7, #26]
 8003444:	4413      	add	r3, r2
 8003446:	837b      	strh	r3, [r7, #26]
 8003448:	8bfb      	ldrh	r3, [r7, #30]
 800344a:	3301      	adds	r3, #1
 800344c:	83fb      	strh	r3, [r7, #30]
 800344e:	8bfb      	ldrh	r3, [r7, #30]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d9f0      	bls.n	8003436 <TP_Read_XOY+0xba>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8003454:	8b7b      	ldrh	r3, [r7, #26]
 8003456:	4a05      	ldr	r2, [pc, #20]	@ (800346c <TP_Read_XOY+0xf0>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	833b      	strh	r3, [r7, #24]
	return temp;
 8003460:	8b3b      	ldrh	r3, [r7, #24]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	@ 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd90      	pop	{r4, r7, pc}
 800346a:	bf00      	nop
 800346c:	aaaaaaab 	.word	0xaaaaaaab

08003470 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 800347a:	4b0c      	ldr	r3, [pc, #48]	@ (80034ac <TP_Read_XY+0x3c>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff ff7c 	bl	800337c <TP_Read_XOY>
 8003484:	4603      	mov	r3, r0
 8003486:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8003488:	4b09      	ldr	r3, [pc, #36]	@ (80034b0 <TP_Read_XY+0x40>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ff75 	bl	800337c <TP_Read_XOY>
 8003492:	4603      	mov	r3, r0
 8003494:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	89fa      	ldrh	r2, [r7, #14]
 800349a:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	89ba      	ldrh	r2, [r7, #12]
 80034a0:	801a      	strh	r2, [r3, #0]
	return 1;
 80034a2:	2301      	movs	r3, #1
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	20000044 	.word	0x20000044
 80034b0:	20000045 	.word	0x20000045

080034b4 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 80034be:	f107 0212 	add.w	r2, r7, #18
 80034c2:	f107 0314 	add.w	r3, r7, #20
 80034c6:	4611      	mov	r1, r2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ffd1 	bl	8003470 <TP_Read_XY>
 80034ce:	4603      	mov	r3, r0
 80034d0:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 80034d2:	7dfb      	ldrb	r3, [r7, #23]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <TP_Read_XY2+0x28>
 80034d8:	2300      	movs	r3, #0
 80034da:	e049      	b.n	8003570 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 80034dc:	f107 020e 	add.w	r2, r7, #14
 80034e0:	f107 0310 	add.w	r3, r7, #16
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ffc2 	bl	8003470 <TP_Read_XY>
 80034ec:	4603      	mov	r3, r0
 80034ee:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <TP_Read_XY2+0x46>
 80034f6:	2300      	movs	r3, #0
 80034f8:	e03a      	b.n	8003570 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 80034fa:	8a3a      	ldrh	r2, [r7, #16]
 80034fc:	8abb      	ldrh	r3, [r7, #20]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d804      	bhi.n	800350c <TP_Read_XY2+0x58>
 8003502:	8a3b      	ldrh	r3, [r7, #16]
 8003504:	3363      	adds	r3, #99	@ 0x63
 8003506:	8aba      	ldrh	r2, [r7, #20]
 8003508:	4293      	cmp	r3, r2
 800350a:	da08      	bge.n	800351e <TP_Read_XY2+0x6a>
 800350c:	8aba      	ldrh	r2, [r7, #20]
 800350e:	8a3b      	ldrh	r3, [r7, #16]
 8003510:	429a      	cmp	r2, r3
 8003512:	d82c      	bhi.n	800356e <TP_Read_XY2+0xba>
 8003514:	8abb      	ldrh	r3, [r7, #20]
 8003516:	3363      	adds	r3, #99	@ 0x63
 8003518:	8a3a      	ldrh	r2, [r7, #16]
 800351a:	4293      	cmp	r3, r2
 800351c:	db27      	blt.n	800356e <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 800351e:	89fa      	ldrh	r2, [r7, #14]
 8003520:	8a7b      	ldrh	r3, [r7, #18]
 8003522:	429a      	cmp	r2, r3
 8003524:	d804      	bhi.n	8003530 <TP_Read_XY2+0x7c>
 8003526:	89fb      	ldrh	r3, [r7, #14]
 8003528:	3363      	adds	r3, #99	@ 0x63
 800352a:	8a7a      	ldrh	r2, [r7, #18]
 800352c:	4293      	cmp	r3, r2
 800352e:	da08      	bge.n	8003542 <TP_Read_XY2+0x8e>
 8003530:	8a7a      	ldrh	r2, [r7, #18]
 8003532:	89fb      	ldrh	r3, [r7, #14]
 8003534:	429a      	cmp	r2, r3
 8003536:	d81a      	bhi.n	800356e <TP_Read_XY2+0xba>
 8003538:	8a7b      	ldrh	r3, [r7, #18]
 800353a:	3363      	adds	r3, #99	@ 0x63
 800353c:	89fa      	ldrh	r2, [r7, #14]
 800353e:	4293      	cmp	r3, r2
 8003540:	db15      	blt.n	800356e <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8003542:	8abb      	ldrh	r3, [r7, #20]
 8003544:	461a      	mov	r2, r3
 8003546:	8a3b      	ldrh	r3, [r7, #16]
 8003548:	4413      	add	r3, r2
 800354a:	0fda      	lsrs	r2, r3, #31
 800354c:	4413      	add	r3, r2
 800354e:	105b      	asrs	r3, r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8003556:	8a7b      	ldrh	r3, [r7, #18]
 8003558:	461a      	mov	r2, r3
 800355a:	89fb      	ldrh	r3, [r7, #14]
 800355c:	4413      	add	r3, r2
 800355e:	0fda      	lsrs	r2, r3, #31
 8003560:	4413      	add	r3, r2
 8003562:	105b      	asrs	r3, r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	801a      	strh	r2, [r3, #0]
		return 1;
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <TP_Read_XY2+0xbc>
	}else return 0;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b085      	sub	sp, #20
 800357c:	af02      	add	r7, sp, #8
 800357e:	4603      	mov	r3, r0
 8003580:	80fb      	strh	r3, [r7, #6]
 8003582:	460b      	mov	r3, r1
 8003584:	80bb      	strh	r3, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	3b0c      	subs	r3, #12
 800358e:	b298      	uxth	r0, r3
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	330d      	adds	r3, #13
 8003594:	b29a      	uxth	r2, r3
 8003596:	88bc      	ldrh	r4, [r7, #4]
 8003598:	88b9      	ldrh	r1, [r7, #4]
 800359a:	887b      	ldrh	r3, [r7, #2]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	4623      	mov	r3, r4
 80035a0:	f7fe f9af 	bl	8001902 <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 80035a4:	88bb      	ldrh	r3, [r7, #4]
 80035a6:	3b0c      	subs	r3, #12
 80035a8:	b299      	uxth	r1, r3
 80035aa:	88bb      	ldrh	r3, [r7, #4]
 80035ac:	330d      	adds	r3, #13
 80035ae:	b29c      	uxth	r4, r3
 80035b0:	88fa      	ldrh	r2, [r7, #6]
 80035b2:	88f8      	ldrh	r0, [r7, #6]
 80035b4:	887b      	ldrh	r3, [r7, #2]
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	4623      	mov	r3, r4
 80035ba:	f7fe f9a2 	bl	8001902 <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	3301      	adds	r3, #1
 80035c2:	b298      	uxth	r0, r3
 80035c4:	88bb      	ldrh	r3, [r7, #4]
 80035c6:	3301      	adds	r3, #1
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	887a      	ldrh	r2, [r7, #2]
 80035cc:	4619      	mov	r1, r3
 80035ce:	f7fe f981 	bl	80018d4 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b298      	uxth	r0, r3
 80035d8:	88bb      	ldrh	r3, [r7, #4]
 80035da:	3301      	adds	r3, #1
 80035dc:	b29b      	uxth	r3, r3
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	4619      	mov	r1, r3
 80035e2:	f7fe f977 	bl	80018d4 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	3301      	adds	r3, #1
 80035ea:	b298      	uxth	r0, r3
 80035ec:	88bb      	ldrh	r3, [r7, #4]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	887a      	ldrh	r2, [r7, #2]
 80035f4:	4619      	mov	r1, r3
 80035f6:	f7fe f96d 	bl	80018d4 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b298      	uxth	r0, r3
 8003600:	88bb      	ldrh	r3, [r7, #4]
 8003602:	3b01      	subs	r3, #1
 8003604:	b29b      	uxth	r3, r3
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	4619      	mov	r1, r3
 800360a:	f7fe f963 	bl	80018d4 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 800360e:	88f8      	ldrh	r0, [r7, #6]
 8003610:	88b9      	ldrh	r1, [r7, #4]
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	2300      	movs	r3, #0
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	2306      	movs	r3, #6
 800361a:	f7fe fcd6 	bl	8001fca <lcd_DrawCircle>
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	bd90      	pop	{r4, r7, pc}
	...

08003628 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8003632:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003636:	4843      	ldr	r0, [pc, #268]	@ (8003744 <TP_Scan+0x11c>)
 8003638:	f001 fd8a 	bl	8005150 <HAL_GPIO_ReadPin>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d157      	bne.n	80036f2 <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d004      	beq.n	8003652 <TP_Scan+0x2a>
 8003648:	493f      	ldr	r1, [pc, #252]	@ (8003748 <TP_Scan+0x120>)
 800364a:	4840      	ldr	r0, [pc, #256]	@ (800374c <TP_Scan+0x124>)
 800364c:	f7ff ff32 	bl	80034b4 <TP_Read_XY2>
 8003650:	e03c      	b.n	80036cc <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8003652:	493d      	ldr	r1, [pc, #244]	@ (8003748 <TP_Scan+0x120>)
 8003654:	483d      	ldr	r0, [pc, #244]	@ (800374c <TP_Scan+0x124>)
 8003656:	f7ff ff2d 	bl	80034b4 <TP_Read_XY2>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d035      	beq.n	80036cc <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8003660:	4b3b      	ldr	r3, [pc, #236]	@ (8003750 <TP_Scan+0x128>)
 8003662:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003666:	4b3a      	ldr	r3, [pc, #232]	@ (8003750 <TP_Scan+0x128>)
 8003668:	899b      	ldrh	r3, [r3, #12]
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003676:	4b36      	ldr	r3, [pc, #216]	@ (8003750 <TP_Scan+0x128>)
 8003678:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800367c:	ee07 3a90 	vmov	s15, r3
 8003680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800368c:	ee17 3a90 	vmov	r3, s15
 8003690:	b29a      	uxth	r2, r3
 8003692:	4b2f      	ldr	r3, [pc, #188]	@ (8003750 <TP_Scan+0x128>)
 8003694:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8003696:	4b2e      	ldr	r3, [pc, #184]	@ (8003750 <TP_Scan+0x128>)
 8003698:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800369c:	4b2c      	ldr	r3, [pc, #176]	@ (8003750 <TP_Scan+0x128>)
 800369e:	8adb      	ldrh	r3, [r3, #22]
 80036a0:	ee07 3a90 	vmov	s15, r3
 80036a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036ac:	4b28      	ldr	r3, [pc, #160]	@ (8003750 <TP_Scan+0x128>)
 80036ae:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036c2:	ee17 3a90 	vmov	r3, s15
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	4b21      	ldr	r3, [pc, #132]	@ (8003750 <TP_Scan+0x128>)
 80036ca:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 80036cc:	4b20      	ldr	r3, [pc, #128]	@ (8003750 <TP_Scan+0x128>)
 80036ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d2:	b25b      	sxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	db2a      	blt.n	800372e <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 80036d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003750 <TP_Scan+0x128>)
 80036da:	22c0      	movs	r2, #192	@ 0xc0
 80036dc:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 80036e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003750 <TP_Scan+0x128>)
 80036e2:	899a      	ldrh	r2, [r3, #12]
 80036e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003750 <TP_Scan+0x128>)
 80036e6:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 80036e8:	4b19      	ldr	r3, [pc, #100]	@ (8003750 <TP_Scan+0x128>)
 80036ea:	8ada      	ldrh	r2, [r3, #22]
 80036ec:	4b18      	ldr	r3, [pc, #96]	@ (8003750 <TP_Scan+0x128>)
 80036ee:	83da      	strh	r2, [r3, #30]
 80036f0:	e01d      	b.n	800372e <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 80036f2:	4b17      	ldr	r3, [pc, #92]	@ (8003750 <TP_Scan+0x128>)
 80036f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f8:	b25b      	sxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	da09      	bge.n	8003712 <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 80036fe:	4b14      	ldr	r3, [pc, #80]	@ (8003750 <TP_Scan+0x128>)
 8003700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b11      	ldr	r3, [pc, #68]	@ (8003750 <TP_Scan+0x128>)
 800370c:	f883 2020 	strb.w	r2, [r3, #32]
 8003710:	e00d      	b.n	800372e <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8003712:	4b0f      	ldr	r3, [pc, #60]	@ (8003750 <TP_Scan+0x128>)
 8003714:	2200      	movs	r2, #0
 8003716:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8003718:	4b0d      	ldr	r3, [pc, #52]	@ (8003750 <TP_Scan+0x128>)
 800371a:	2200      	movs	r2, #0
 800371c:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 800371e:	4b0c      	ldr	r3, [pc, #48]	@ (8003750 <TP_Scan+0x128>)
 8003720:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003724:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8003726:	4b0a      	ldr	r3, [pc, #40]	@ (8003750 <TP_Scan+0x128>)
 8003728:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800372c:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 800372e:	4b08      	ldr	r3, [pc, #32]	@ (8003750 <TP_Scan+0x128>)
 8003730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003734:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003738:	b2db      	uxtb	r3, r3
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40020800 	.word	0x40020800
 8003748:	20000026 	.word	0x20000026
 800374c:	2000001c 	.word	0x2000001c
 8003750:	20000010 	.word	0x20000010

08003754 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8003758:	220e      	movs	r2, #14
 800375a:	4905      	ldr	r1, [pc, #20]	@ (8003770 <TP_Save_Adjdata+0x1c>)
 800375c:	2000      	movs	r0, #0
 800375e:	f7fd fd2b 	bl	80011b8 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8003762:	2100      	movs	r1, #0
 8003764:	200e      	movs	r0, #14
 8003766:	f7fd fcc7 	bl	80010f8 <at24c_WriteOneByte>
}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000034 	.word	0x20000034

08003774 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 800377e:	200e      	movs	r0, #14
 8003780:	f7fd fc9e 	bl	80010c0 <at24c_ReadOneByte>
 8003784:	4603      	mov	r3, r0
 8003786:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 800378e:	220e      	movs	r2, #14
 8003790:	4905      	ldr	r1, [pc, #20]	@ (80037a8 <TP_Get_Adjdata+0x34>)
 8003792:	2000      	movs	r0, #0
 8003794:	f7fd fcf1 	bl	800117a <at24c_Read>
		return 1;
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <TP_Get_Adjdata+0x2a>
	}
	return 0;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000034 	.word	0x20000034
 80037ac:	00000000 	.word	0x00000000

080037b0 <touch_Adjust>:


void touch_Adjust(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08e      	sub	sp, #56	@ 0x38
 80037b4:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 80037bc:	2300      	movs	r3, #0
 80037be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 80037c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003940 <touch_Adjust+0x190>)
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	4b5e      	ldr	r3, [pc, #376]	@ (8003940 <touch_Adjust+0x190>)
 80037c8:	885b      	ldrh	r3, [r3, #2]
 80037ca:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80037ce:	9100      	str	r1, [sp, #0]
 80037d0:	2100      	movs	r1, #0
 80037d2:	2000      	movs	r0, #0
 80037d4:	f7fe f848 	bl	8001868 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 80037d8:	2300      	movs	r3, #0
 80037da:	9302      	str	r3, [sp, #8]
 80037dc:	2310      	movs	r3, #16
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80037ea:	4a56      	ldr	r2, [pc, #344]	@ (8003944 <touch_Adjust+0x194>)
 80037ec:	2128      	movs	r1, #40	@ 0x28
 80037ee:	2005      	movs	r0, #5
 80037f0:	f7fe fc58 	bl	80020a4 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 80037f4:	2300      	movs	r3, #0
 80037f6:	9302      	str	r3, [sp, #8]
 80037f8:	2310      	movs	r3, #16
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003806:	4a50      	ldr	r2, [pc, #320]	@ (8003948 <touch_Adjust+0x198>)
 8003808:	2141      	movs	r1, #65	@ 0x41
 800380a:	2005      	movs	r0, #5
 800380c:	f7fe fc4a 	bl	80020a4 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8003810:	2300      	movs	r3, #0
 8003812:	9302      	str	r3, [sp, #8]
 8003814:	2310      	movs	r3, #16
 8003816:	9301      	str	r3, [sp, #4]
 8003818:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003822:	4a4a      	ldr	r2, [pc, #296]	@ (800394c <touch_Adjust+0x19c>)
 8003824:	215a      	movs	r1, #90	@ 0x5a
 8003826:	2005      	movs	r0, #5
 8003828:	f7fe fc3c 	bl	80020a4 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 800382c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003830:	2114      	movs	r1, #20
 8003832:	2014      	movs	r0, #20
 8003834:	f7ff fea0 	bl	8003578 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8003838:	4b45      	ldr	r3, [pc, #276]	@ (8003950 <touch_Adjust+0x1a0>)
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8003840:	4b43      	ldr	r3, [pc, #268]	@ (8003950 <touch_Adjust+0x1a0>)
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	625a      	str	r2, [r3, #36]	@ 0x24
	while(1)
	{
		HAL_Delay(50);
 8003848:	2032      	movs	r0, #50	@ 0x32
 800384a:	f000 fc63 	bl	8004114 <HAL_Delay>
		tp_dev.scan(1);
 800384e:	4b40      	ldr	r3, [pc, #256]	@ (8003950 <touch_Adjust+0x1a0>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2001      	movs	r0, #1
 8003854:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8003856:	4b3e      	ldr	r3, [pc, #248]	@ (8003950 <touch_Adjust+0x1a0>)
 8003858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800385c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003860:	2b40      	cmp	r3, #64	@ 0x40
 8003862:	d1f1      	bne.n	8003848 <touch_Adjust+0x98>
		{
			tp_dev.sta&=~(1<<6);
 8003864:	4b3a      	ldr	r3, [pc, #232]	@ (8003950 <touch_Adjust+0x1a0>)
 8003866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800386a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800386e:	b2da      	uxtb	r2, r3
 8003870:	4b37      	ldr	r3, [pc, #220]	@ (8003950 <touch_Adjust+0x1a0>)
 8003872:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8003876:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800387a:	4a35      	ldr	r2, [pc, #212]	@ (8003950 <touch_Adjust+0x1a0>)
 800387c:	8992      	ldrh	r2, [r2, #12]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	3328      	adds	r3, #40	@ 0x28
 8003882:	443b      	add	r3, r7
 8003884:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8003888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800388c:	4a30      	ldr	r2, [pc, #192]	@ (8003950 <touch_Adjust+0x1a0>)
 800388e:	8ad2      	ldrh	r2, [r2, #22]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	3328      	adds	r3, #40	@ 0x28
 8003894:	443b      	add	r3, r7
 8003896:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 800389a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800389e:	3301      	adds	r3, #1
 80038a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			switch(cnt)
 80038a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038a8:	3b01      	subs	r3, #1
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d8cc      	bhi.n	8003848 <touch_Adjust+0x98>
 80038ae:	a201      	add	r2, pc, #4	@ (adr r2, 80038b4 <touch_Adjust+0x104>)
 80038b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b4:	080038c5 	.word	0x080038c5
 80038b8:	080038e7 	.word	0x080038e7
 80038bc:	08003911 	.word	0x08003911
 80038c0:	08003955 	.word	0x08003955
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 80038c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038c8:	2114      	movs	r1, #20
 80038ca:	2014      	movs	r0, #20
 80038cc:	f7ff fe54 	bl	8003578 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 80038d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003940 <touch_Adjust+0x190>)
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	3b14      	subs	r3, #20
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80038dc:	2114      	movs	r1, #20
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fe4a 	bl	8003578 <TP_Drow_Touch_Point>
					break;
 80038e4:	e319      	b.n	8003f1a <touch_Adjust+0x76a>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 80038e6:	4b16      	ldr	r3, [pc, #88]	@ (8003940 <touch_Adjust+0x190>)
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	3b14      	subs	r3, #20
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038f2:	2114      	movs	r1, #20
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff fe3f 	bl	8003578 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 80038fa:	4b11      	ldr	r3, [pc, #68]	@ (8003940 <touch_Adjust+0x190>)
 80038fc:	885b      	ldrh	r3, [r3, #2]
 80038fe:	3b14      	subs	r3, #20
 8003900:	b29b      	uxth	r3, r3
 8003902:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003906:	4619      	mov	r1, r3
 8003908:	2014      	movs	r0, #20
 800390a:	f7ff fe35 	bl	8003578 <TP_Drow_Touch_Point>
					break;
 800390e:	e304      	b.n	8003f1a <touch_Adjust+0x76a>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8003910:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <touch_Adjust+0x190>)
 8003912:	885b      	ldrh	r3, [r3, #2]
 8003914:	3b14      	subs	r3, #20
 8003916:	b29b      	uxth	r3, r3
 8003918:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800391c:	4619      	mov	r1, r3
 800391e:	2014      	movs	r0, #20
 8003920:	f7ff fe2a 	bl	8003578 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8003924:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <touch_Adjust+0x190>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	3b14      	subs	r3, #20
 800392a:	b298      	uxth	r0, r3
 800392c:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <touch_Adjust+0x190>)
 800392e:	885b      	ldrh	r3, [r3, #2]
 8003930:	3b14      	subs	r3, #20
 8003932:	b29b      	uxth	r3, r3
 8003934:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003938:	4619      	mov	r1, r3
 800393a:	f7ff fe1d 	bl	8003578 <TP_Drow_Touch_Point>
					break;
 800393e:	e2ec      	b.n	8003f1a <touch_Adjust+0x76a>
 8003940:	2000022c 	.word	0x2000022c
 8003944:	08009320 	.word	0x08009320
 8003948:	0800933c 	.word	0x0800933c
 800394c:	08009354 	.word	0x08009354
 8003950:	20000010 	.word	0x20000010
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8003954:	883b      	ldrh	r3, [r7, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	88bb      	ldrh	r3, [r7, #4]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	bfb8      	it	lt
 8003960:	425b      	neglt	r3, r3
 8003962:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 8003964:	887b      	ldrh	r3, [r7, #2]
 8003966:	461a      	mov	r2, r3
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	bfb8      	it	lt
 8003970:	425b      	neglt	r3, r3
 8003972:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	fb03 f303 	mul.w	r3, r3, r3
 800397a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	fb03 f303 	mul.w	r3, r3, r3
 8003982:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003984:	6a3a      	ldr	r2, [r7, #32]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	4413      	add	r3, r2
 800398a:	4618      	mov	r0, r3
 800398c:	f7fc fdb2 	bl	80004f4 <__aeabi_ui2d>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	ec43 2b10 	vmov	d0, r2, r3
 8003998:	f005 fb88 	bl	80090ac <sqrt>
 800399c:	ec53 2b10 	vmov	r2, r3, d0
 80039a0:	4610      	mov	r0, r2
 80039a2:	4619      	mov	r1, r3
 80039a4:	f7fd f8d0 	bl	8000b48 <__aeabi_d2uiz>
 80039a8:	4603      	mov	r3, r0
 80039aa:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 80039ac:	893b      	ldrh	r3, [r7, #8]
 80039ae:	461a      	mov	r2, r3
 80039b0:	89bb      	ldrh	r3, [r7, #12]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bfb8      	it	lt
 80039b8:	425b      	neglt	r3, r3
 80039ba:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 80039bc:	897b      	ldrh	r3, [r7, #10]
 80039be:	461a      	mov	r2, r3
 80039c0:	89fb      	ldrh	r3, [r7, #14]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bfb8      	it	lt
 80039c8:	425b      	neglt	r3, r3
 80039ca:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	fb03 f303 	mul.w	r3, r3, r3
 80039d2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	fb03 f303 	mul.w	r3, r3, r3
 80039da:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80039dc:	6a3a      	ldr	r2, [r7, #32]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fc fd86 	bl	80004f4 <__aeabi_ui2d>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	ec43 2b10 	vmov	d0, r2, r3
 80039f0:	f005 fb5c 	bl	80090ac <sqrt>
 80039f4:	ec53 2b10 	vmov	r2, r3, d0
 80039f8:	4610      	mov	r0, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	f7fd f8a4 	bl	8000b48 <__aeabi_d2uiz>
 8003a00:	4603      	mov	r3, r0
 8003a02:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003a04:	8b7b      	ldrh	r3, [r7, #26]
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a0e:	8b3b      	ldrh	r3, [r7, #24]
 8003a10:	ee07 3a90 	vmov	s15, r3
 8003a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a18:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a1c:	ee16 0a90 	vmov	r0, s13
 8003a20:	f7fc fd8a 	bl	8000538 <__aeabi_f2d>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 8003a2c:	a384      	add	r3, pc, #528	@ (adr r3, 8003c40 <touch_Adjust+0x490>)
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a36:	f7fd f849 	bl	8000acc <__aeabi_dcmplt>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10f      	bne.n	8003a60 <touch_Adjust+0x2b0>
 8003a40:	a381      	add	r3, pc, #516	@ (adr r3, 8003c48 <touch_Adjust+0x498>)
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a4a:	f7fd f85d 	bl	8000b08 <__aeabi_dcmpgt>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d105      	bne.n	8003a60 <touch_Adjust+0x2b0>
 8003a54:	8b7b      	ldrh	r3, [r7, #26]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <touch_Adjust+0x2b0>
 8003a5a:	8b3b      	ldrh	r3, [r7, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d136      	bne.n	8003ace <touch_Adjust+0x31e>
					{
						cnt=0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003a66:	4b7a      	ldr	r3, [pc, #488]	@ (8003c50 <touch_Adjust+0x4a0>)
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	3b14      	subs	r3, #20
 8003a6c:	b298      	uxth	r0, r3
 8003a6e:	4b78      	ldr	r3, [pc, #480]	@ (8003c50 <touch_Adjust+0x4a0>)
 8003a70:	885b      	ldrh	r3, [r3, #2]
 8003a72:	3b14      	subs	r3, #20
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f7ff fd7c 	bl	8003578 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003a80:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003a84:	2114      	movs	r1, #20
 8003a86:	2014      	movs	r0, #20
 8003a88:	f7ff fd76 	bl	8003578 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	9302      	str	r3, [sp, #8]
 8003a90:	2310      	movs	r3, #16
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003a9e:	4a6d      	ldr	r2, [pc, #436]	@ (8003c54 <touch_Adjust+0x4a4>)
 8003aa0:	2128      	movs	r1, #40	@ 0x28
 8003aa2:	2005      	movs	r0, #5
 8003aa4:	f7fe fafe 	bl	80020a4 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	9302      	str	r3, [sp, #8]
 8003aac:	2310      	movs	r3, #16
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003aba:	4a67      	ldr	r2, [pc, #412]	@ (8003c58 <touch_Adjust+0x4a8>)
 8003abc:	213c      	movs	r1, #60	@ 0x3c
 8003abe:	2005      	movs	r0, #5
 8003ac0:	f7fe faf0 	bl	80020a4 <lcd_ShowStr>
						HAL_Delay(1000);
 8003ac4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003ac8:	f000 fb24 	bl	8004114 <HAL_Delay>
 						continue;
 8003acc:	e225      	b.n	8003f1a <touch_Adjust+0x76a>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8003ace:	883b      	ldrh	r3, [r7, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	893b      	ldrh	r3, [r7, #8]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bfb8      	it	lt
 8003ada:	425b      	neglt	r3, r3
 8003adc:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8003ade:	887b      	ldrh	r3, [r7, #2]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	897b      	ldrh	r3, [r7, #10]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	bfb8      	it	lt
 8003aea:	425b      	neglt	r3, r3
 8003aec:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	fb03 f303 	mul.w	r3, r3, r3
 8003af4:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	fb03 f303 	mul.w	r3, r3, r3
 8003afc:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003afe:	6a3a      	ldr	r2, [r7, #32]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	4413      	add	r3, r2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fc fcf5 	bl	80004f4 <__aeabi_ui2d>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	ec43 2b10 	vmov	d0, r2, r3
 8003b12:	f005 facb 	bl	80090ac <sqrt>
 8003b16:	ec53 2b10 	vmov	r2, r3, d0
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f7fd f813 	bl	8000b48 <__aeabi_d2uiz>
 8003b22:	4603      	mov	r3, r0
 8003b24:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8003b26:	88bb      	ldrh	r3, [r7, #4]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	89bb      	ldrh	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bfb8      	it	lt
 8003b32:	425b      	neglt	r3, r3
 8003b34:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	89fb      	ldrh	r3, [r7, #14]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bfb8      	it	lt
 8003b42:	425b      	neglt	r3, r3
 8003b44:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	fb03 f303 	mul.w	r3, r3, r3
 8003b4c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fb03 f303 	mul.w	r3, r3, r3
 8003b54:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003b56:	6a3a      	ldr	r2, [r7, #32]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fc fcc9 	bl	80004f4 <__aeabi_ui2d>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	ec43 2b10 	vmov	d0, r2, r3
 8003b6a:	f005 fa9f 	bl	80090ac <sqrt>
 8003b6e:	ec53 2b10 	vmov	r2, r3, d0
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	f7fc ffe7 	bl	8000b48 <__aeabi_d2uiz>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003b7e:	8b7b      	ldrh	r3, [r7, #26]
 8003b80:	ee07 3a90 	vmov	s15, r3
 8003b84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b88:	8b3b      	ldrh	r3, [r7, #24]
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b96:	ee16 0a90 	vmov	r0, s13
 8003b9a:	f7fc fccd 	bl	8000538 <__aeabi_f2d>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8003ba6:	a326      	add	r3, pc, #152	@ (adr r3, 8003c40 <touch_Adjust+0x490>)
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bb0:	f7fc ff8c 	bl	8000acc <__aeabi_dcmplt>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <touch_Adjust+0x41e>
 8003bba:	a323      	add	r3, pc, #140	@ (adr r3, 8003c48 <touch_Adjust+0x498>)
 8003bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bc4:	f7fc ffa0 	bl	8000b08 <__aeabi_dcmpgt>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d046      	beq.n	8003c5c <touch_Adjust+0x4ac>
					{
						cnt=0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c50 <touch_Adjust+0x4a0>)
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	3b14      	subs	r3, #20
 8003bda:	b298      	uxth	r0, r3
 8003bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8003c50 <touch_Adjust+0x4a0>)
 8003bde:	885b      	ldrh	r3, [r3, #2]
 8003be0:	3b14      	subs	r3, #20
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003be8:	4619      	mov	r1, r3
 8003bea:	f7ff fcc5 	bl	8003578 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003bee:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003bf2:	2114      	movs	r1, #20
 8003bf4:	2014      	movs	r0, #20
 8003bf6:	f7ff fcbf 	bl	8003578 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	9302      	str	r3, [sp, #8]
 8003bfe:	2310      	movs	r3, #16
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003c0c:	4a11      	ldr	r2, [pc, #68]	@ (8003c54 <touch_Adjust+0x4a4>)
 8003c0e:	2128      	movs	r1, #40	@ 0x28
 8003c10:	2005      	movs	r0, #5
 8003c12:	f7fe fa47 	bl	80020a4 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003c16:	2300      	movs	r3, #0
 8003c18:	9302      	str	r3, [sp, #8]
 8003c1a:	2310      	movs	r3, #16
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003c28:	4a0b      	ldr	r2, [pc, #44]	@ (8003c58 <touch_Adjust+0x4a8>)
 8003c2a:	213c      	movs	r1, #60	@ 0x3c
 8003c2c:	2005      	movs	r0, #5
 8003c2e:	f7fe fa39 	bl	80020a4 <lcd_ShowStr>
						HAL_Delay(1000);
 8003c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c36:	f000 fa6d 	bl	8004114 <HAL_Delay>
						continue;
 8003c3a:	e16e      	b.n	8003f1a <touch_Adjust+0x76a>
 8003c3c:	f3af 8000 	nop.w
 8003c40:	66666666 	.word	0x66666666
 8003c44:	3fee6666 	.word	0x3fee6666
 8003c48:	cccccccd 	.word	0xcccccccd
 8003c4c:	3ff0cccc 	.word	0x3ff0cccc
 8003c50:	2000022c 	.word	0x2000022c
 8003c54:	08009368 	.word	0x08009368
 8003c58:	08009388 	.word	0x08009388
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8003c5c:	88bb      	ldrh	r3, [r7, #4]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	893b      	ldrh	r3, [r7, #8]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bfb8      	it	lt
 8003c68:	425b      	neglt	r3, r3
 8003c6a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	897b      	ldrh	r3, [r7, #10]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bfb8      	it	lt
 8003c78:	425b      	neglt	r3, r3
 8003c7a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	fb03 f303 	mul.w	r3, r3, r3
 8003c82:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	fb03 f303 	mul.w	r3, r3, r3
 8003c8a:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003c8c:	6a3a      	ldr	r2, [r7, #32]
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fc fc2e 	bl	80004f4 <__aeabi_ui2d>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	ec43 2b10 	vmov	d0, r2, r3
 8003ca0:	f005 fa04 	bl	80090ac <sqrt>
 8003ca4:	ec53 2b10 	vmov	r2, r3, d0
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	f7fc ff4c 	bl	8000b48 <__aeabi_d2uiz>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8003cb4:	883b      	ldrh	r3, [r7, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	89bb      	ldrh	r3, [r7, #12]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bfb8      	it	lt
 8003cc0:	425b      	neglt	r3, r3
 8003cc2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8003cc4:	887b      	ldrh	r3, [r7, #2]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	89fb      	ldrh	r3, [r7, #14]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bfb8      	it	lt
 8003cd0:	425b      	neglt	r3, r3
 8003cd2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	fb03 f303 	mul.w	r3, r3, r3
 8003cda:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	fb03 f303 	mul.w	r3, r3, r3
 8003ce2:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003ce4:	6a3a      	ldr	r2, [r7, #32]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	4413      	add	r3, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fc02 	bl	80004f4 <__aeabi_ui2d>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	ec43 2b10 	vmov	d0, r2, r3
 8003cf8:	f005 f9d8 	bl	80090ac <sqrt>
 8003cfc:	ec53 2b10 	vmov	r2, r3, d0
 8003d00:	4610      	mov	r0, r2
 8003d02:	4619      	mov	r1, r3
 8003d04:	f7fc ff20 	bl	8000b48 <__aeabi_d2uiz>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003d0c:	8b7b      	ldrh	r3, [r7, #26]
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d16:	8b3b      	ldrh	r3, [r7, #24]
 8003d18:	ee07 3a90 	vmov	s15, r3
 8003d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d24:	ee16 0a90 	vmov	r0, s13
 8003d28:	f7fc fc06 	bl	8000538 <__aeabi_f2d>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8003d34:	a383      	add	r3, pc, #524	@ (adr r3, 8003f44 <touch_Adjust+0x794>)
 8003d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d3e:	f7fc fec5 	bl	8000acc <__aeabi_dcmplt>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d109      	bne.n	8003d5c <touch_Adjust+0x5ac>
 8003d48:	a380      	add	r3, pc, #512	@ (adr r3, 8003f4c <touch_Adjust+0x79c>)
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d52:	f7fc fed9 	bl	8000b08 <__aeabi_dcmpgt>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d036      	beq.n	8003dca <touch_Adjust+0x61a>
					{
						cnt=0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003d62:	4b71      	ldr	r3, [pc, #452]	@ (8003f28 <touch_Adjust+0x778>)
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	3b14      	subs	r3, #20
 8003d68:	b298      	uxth	r0, r3
 8003d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8003f28 <touch_Adjust+0x778>)
 8003d6c:	885b      	ldrh	r3, [r3, #2]
 8003d6e:	3b14      	subs	r3, #20
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d76:	4619      	mov	r1, r3
 8003d78:	f7ff fbfe 	bl	8003578 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003d7c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003d80:	2114      	movs	r1, #20
 8003d82:	2014      	movs	r0, #20
 8003d84:	f7ff fbf8 	bl	8003578 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003d88:	2300      	movs	r3, #0
 8003d8a:	9302      	str	r3, [sp, #8]
 8003d8c:	2310      	movs	r3, #16
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003d9a:	4a64      	ldr	r2, [pc, #400]	@ (8003f2c <touch_Adjust+0x77c>)
 8003d9c:	2128      	movs	r1, #40	@ 0x28
 8003d9e:	2005      	movs	r0, #5
 8003da0:	f7fe f980 	bl	80020a4 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003da4:	2300      	movs	r3, #0
 8003da6:	9302      	str	r3, [sp, #8]
 8003da8:	2310      	movs	r3, #16
 8003daa:	9301      	str	r3, [sp, #4]
 8003dac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003db6:	4a5e      	ldr	r2, [pc, #376]	@ (8003f30 <touch_Adjust+0x780>)
 8003db8:	213c      	movs	r1, #60	@ 0x3c
 8003dba:	2005      	movs	r0, #5
 8003dbc:	f7fe f972 	bl	80020a4 <lcd_ShowStr>

						HAL_Delay(1000);
 8003dc0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003dc4:	f000 f9a6 	bl	8004114 <HAL_Delay>
 							continue;
 8003dc8:	e0a7      	b.n	8003f1a <touch_Adjust+0x76a>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8003dca:	4b57      	ldr	r3, [pc, #348]	@ (8003f28 <touch_Adjust+0x778>)
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	3b28      	subs	r3, #40	@ 0x28
 8003dd0:	ee07 3a90 	vmov	s15, r3
 8003dd4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003dd8:	88bb      	ldrh	r3, [r7, #4]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	883b      	ldrh	r3, [r7, #0]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	ee07 3a90 	vmov	s15, r3
 8003de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dec:	4b51      	ldr	r3, [pc, #324]	@ (8003f34 <touch_Adjust+0x784>)
 8003dee:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8003df2:	4b4d      	ldr	r3, [pc, #308]	@ (8003f28 <touch_Adjust+0x778>)
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	ee07 3a90 	vmov	s15, r3
 8003dfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dfe:	4b4d      	ldr	r3, [pc, #308]	@ (8003f34 <touch_Adjust+0x784>)
 8003e00:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8003e04:	88bb      	ldrh	r3, [r7, #4]
 8003e06:	461a      	mov	r2, r3
 8003e08:	883b      	ldrh	r3, [r7, #0]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e1c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003e20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e28:	ee17 3a90 	vmov	r3, s15
 8003e2c:	b21a      	sxth	r2, r3
 8003e2e:	4b41      	ldr	r3, [pc, #260]	@ (8003f34 <touch_Adjust+0x784>)
 8003e30:	859a      	strh	r2, [r3, #44]	@ 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8003e32:	4b3d      	ldr	r3, [pc, #244]	@ (8003f28 <touch_Adjust+0x778>)
 8003e34:	885b      	ldrh	r3, [r3, #2]
 8003e36:	3b28      	subs	r3, #40	@ 0x28
 8003e38:	ee07 3a90 	vmov	s15, r3
 8003e3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e40:	897b      	ldrh	r3, [r7, #10]
 8003e42:	461a      	mov	r2, r3
 8003e44:	887b      	ldrh	r3, [r7, #2]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	ee07 3a90 	vmov	s15, r3
 8003e4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e54:	4b37      	ldr	r3, [pc, #220]	@ (8003f34 <touch_Adjust+0x784>)
 8003e56:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 8003e5a:	4b33      	ldr	r3, [pc, #204]	@ (8003f28 <touch_Adjust+0x778>)
 8003e5c:	885b      	ldrh	r3, [r3, #2]
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e66:	4b33      	ldr	r3, [pc, #204]	@ (8003f34 <touch_Adjust+0x784>)
 8003e68:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8003e6c:	897b      	ldrh	r3, [r7, #10]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	887b      	ldrh	r3, [r7, #2]
 8003e72:	4413      	add	r3, r2
 8003e74:	ee07 3a90 	vmov	s15, r3
 8003e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e84:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003e88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e90:	ee17 3a90 	vmov	r3, s15
 8003e94:	b21a      	sxth	r2, r3
 8003e96:	4b27      	ldr	r3, [pc, #156]	@ (8003f34 <touch_Adjust+0x784>)
 8003e98:	85da      	strh	r2, [r3, #46]	@ 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003e9a:	4b23      	ldr	r3, [pc, #140]	@ (8003f28 <touch_Adjust+0x778>)
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	3b14      	subs	r3, #20
 8003ea0:	b298      	uxth	r0, r3
 8003ea2:	4b21      	ldr	r3, [pc, #132]	@ (8003f28 <touch_Adjust+0x778>)
 8003ea4:	885b      	ldrh	r3, [r3, #2]
 8003ea6:	3b14      	subs	r3, #20
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003eae:	4619      	mov	r1, r3
 8003eb0:	f7ff fb62 	bl	8003578 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9302      	str	r3, [sp, #8]
 8003eb8:	2310      	movs	r3, #16
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f38 <touch_Adjust+0x788>)
 8003ec8:	2128      	movs	r1, #40	@ 0x28
 8003eca:	2005      	movs	r0, #5
 8003ecc:	f7fe f8ea 	bl	80020a4 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9302      	str	r3, [sp, #8]
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	9301      	str	r3, [sp, #4]
 8003ed8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003ee2:	4a16      	ldr	r2, [pc, #88]	@ (8003f3c <touch_Adjust+0x78c>)
 8003ee4:	213c      	movs	r1, #60	@ 0x3c
 8003ee6:	2005      	movs	r0, #5
 8003ee8:	f7fe f8dc 	bl	80020a4 <lcd_ShowStr>
					HAL_Delay(1000);
 8003eec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003ef0:	f000 f910 	bl	8004114 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	9302      	str	r3, [sp, #8]
 8003ef8:	2310      	movs	r3, #16
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003f06:	4a0e      	ldr	r2, [pc, #56]	@ (8003f40 <touch_Adjust+0x790>)
 8003f08:	2128      	movs	r1, #40	@ 0x28
 8003f0a:	2005      	movs	r0, #5
 8003f0c:	f7fe f8ca 	bl	80020a4 <lcd_ShowStr>
					TP_Save_Adjdata();
 8003f10:	f7ff fc20 	bl	8003754 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8003f14:	f7ff fc2e 	bl	8003774 <TP_Get_Adjdata>
					return;
 8003f18:	e000      	b.n	8003f1c <touch_Adjust+0x76c>
		HAL_Delay(50);
 8003f1a:	e495      	b.n	8003848 <touch_Adjust+0x98>
			}
		}
 	}
}
 8003f1c:	3728      	adds	r7, #40	@ 0x28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	f3af 8000 	nop.w
 8003f28:	2000022c 	.word	0x2000022c
 8003f2c:	08009368 	.word	0x08009368
 8003f30:	08009388 	.word	0x08009388
 8003f34:	20000010 	.word	0x20000010
 8003f38:	080093a8 	.word	0x080093a8
 8003f3c:	080093c8 	.word	0x080093c8
 8003f40:	080093e8 	.word	0x080093e8
 8003f44:	66666666 	.word	0x66666666
 8003f48:	3fee6666 	.word	0x3fee6666
 8003f4c:	cccccccd 	.word	0xcccccccd
 8003f50:	3ff0cccc 	.word	0x3ff0cccc

08003f54 <touch_init>:

void touch_init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8003f58:	4904      	ldr	r1, [pc, #16]	@ (8003f6c <touch_init+0x18>)
 8003f5a:	4805      	ldr	r0, [pc, #20]	@ (8003f70 <touch_init+0x1c>)
 8003f5c:	f7ff fa88 	bl	8003470 <TP_Read_XY>
	at24c_init();
 8003f60:	f7fd f8a8 	bl	80010b4 <at24c_init>
	TP_Get_Adjdata();
 8003f64:	f7ff fc06 	bl	8003774 <TP_Get_Adjdata>
}
 8003f68:	bf00      	nop
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000026 	.word	0x20000026
 8003f70:	2000001c 	.word	0x2000001c

08003f74 <touch_Scan>:

void touch_Scan(){
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8003f78:	4b02      	ldr	r3, [pc, #8]	@ (8003f84 <touch_Scan+0x10>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	4798      	blx	r3
}
 8003f80:	bf00      	nop
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20000010 	.word	0x20000010

08003f88 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 8003f8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f90:	4805      	ldr	r0, [pc, #20]	@ (8003fa8 <touch_IsTouched+0x20>)
 8003f92:	f001 f8dd 	bl	8005150 <HAL_GPIO_ReadPin>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf0c      	ite	eq
 8003f9c:	2301      	moveq	r3, #1
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40020800 	.word	0x40020800

08003fac <touch_GetX>:

uint16_t touch_GetX(){
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8003fb0:	4b03      	ldr	r3, [pc, #12]	@ (8003fc0 <touch_GetX+0x14>)
 8003fb2:	899b      	ldrh	r3, [r3, #12]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	20000010 	.word	0x20000010

08003fc4 <touch_GetY>:

uint16_t touch_GetY(){
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8003fc8:	4b03      	ldr	r3, [pc, #12]	@ (8003fd8 <touch_GetY+0x14>)
 8003fca:	8adb      	ldrh	r3, [r3, #22]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000010 	.word	0x20000010

08003fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003fdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004014 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fe0:	480d      	ldr	r0, [pc, #52]	@ (8004018 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003fe2:	490e      	ldr	r1, [pc, #56]	@ (800401c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8004020 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fe8:	e002      	b.n	8003ff0 <LoopCopyDataInit>

08003fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fee:	3304      	adds	r3, #4

08003ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ff4:	d3f9      	bcc.n	8003fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8004024 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ff8:	4c0b      	ldr	r4, [pc, #44]	@ (8004028 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ffc:	e001      	b.n	8004002 <LoopFillZerobss>

08003ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004000:	3204      	adds	r2, #4

08004002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004004:	d3fb      	bcc.n	8003ffe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004006:	f7fe ff85 	bl	8002f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800400a:	f004 fa09 	bl	8008420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800400e:	f7fe f939 	bl	8002284 <main>
  bx  lr    
 8004012:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004014:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800401c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8004020:	0800c490 	.word	0x0800c490
  ldr r2, =_sbss
 8004024:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8004028:	200007f0 	.word	0x200007f0

0800402c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800402c:	e7fe      	b.n	800402c <ADC_IRQHandler>
	...

08004030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004034:	4b0e      	ldr	r3, [pc, #56]	@ (8004070 <HAL_Init+0x40>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a0d      	ldr	r2, [pc, #52]	@ (8004070 <HAL_Init+0x40>)
 800403a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800403e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <HAL_Init+0x40>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0a      	ldr	r2, [pc, #40]	@ (8004070 <HAL_Init+0x40>)
 8004046:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800404a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800404c:	4b08      	ldr	r3, [pc, #32]	@ (8004070 <HAL_Init+0x40>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a07      	ldr	r2, [pc, #28]	@ (8004070 <HAL_Init+0x40>)
 8004052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004058:	2003      	movs	r0, #3
 800405a:	f000 fbb1 	bl	80047c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800405e:	200f      	movs	r0, #15
 8004060:	f000 f808 	bl	8004074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004064:	f7fe fe24 	bl	8002cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40023c00 	.word	0x40023c00

08004074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800407c:	4b12      	ldr	r3, [pc, #72]	@ (80040c8 <HAL_InitTick+0x54>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4b12      	ldr	r3, [pc, #72]	@ (80040cc <HAL_InitTick+0x58>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	4619      	mov	r1, r3
 8004086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800408a:	fbb3 f3f1 	udiv	r3, r3, r1
 800408e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fbc9 	bl	800482a <HAL_SYSTICK_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e00e      	b.n	80040c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b0f      	cmp	r3, #15
 80040a6:	d80a      	bhi.n	80040be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040a8:	2200      	movs	r2, #0
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	f04f 30ff 	mov.w	r0, #4294967295
 80040b0:	f000 fb91 	bl	80047d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040b4:	4a06      	ldr	r2, [pc, #24]	@ (80040d0 <HAL_InitTick+0x5c>)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	2000000c 	.word	0x2000000c
 80040cc:	2000004c 	.word	0x2000004c
 80040d0:	20000048 	.word	0x20000048

080040d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040d8:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <HAL_IncTick+0x20>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	4b06      	ldr	r3, [pc, #24]	@ (80040f8 <HAL_IncTick+0x24>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4413      	add	r3, r2
 80040e4:	4a04      	ldr	r2, [pc, #16]	@ (80040f8 <HAL_IncTick+0x24>)
 80040e6:	6013      	str	r3, [r2, #0]
}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	2000004c 	.word	0x2000004c
 80040f8:	200006a0 	.word	0x200006a0

080040fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004100:	4b03      	ldr	r3, [pc, #12]	@ (8004110 <HAL_GetTick+0x14>)
 8004102:	681b      	ldr	r3, [r3, #0]
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	200006a0 	.word	0x200006a0

08004114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800411c:	f7ff ffee 	bl	80040fc <HAL_GetTick>
 8004120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d005      	beq.n	800413a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800412e:	4b0a      	ldr	r3, [pc, #40]	@ (8004158 <HAL_Delay+0x44>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800413a:	bf00      	nop
 800413c:	f7ff ffde 	bl	80040fc <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	429a      	cmp	r2, r3
 800414a:	d8f7      	bhi.n	800413c <HAL_Delay+0x28>
  {
  }
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	2000004c 	.word	0x2000004c

0800415c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e033      	b.n	80041da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fc ff06 	bl	8000f8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	d118      	bne.n	80041cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80041a2:	f023 0302 	bic.w	r3, r3, #2
 80041a6:	f043 0202 	orr.w	r2, r3, #2
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f93a 	bl	8004428 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	f043 0201 	orr.w	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80041ca:	e001      	b.n	80041d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x1c>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e105      	b.n	800440c <HAL_ADC_ConfigChannel+0x228>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b09      	cmp	r3, #9
 800420e:	d925      	bls.n	800425c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68d9      	ldr	r1, [r3, #12]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	4613      	mov	r3, r2
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	4413      	add	r3, r2
 8004224:	3b1e      	subs	r3, #30
 8004226:	2207      	movs	r2, #7
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43da      	mvns	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	400a      	ands	r2, r1
 8004234:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68d9      	ldr	r1, [r3, #12]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	4618      	mov	r0, r3
 8004248:	4603      	mov	r3, r0
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4403      	add	r3, r0
 800424e:	3b1e      	subs	r3, #30
 8004250:	409a      	lsls	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	60da      	str	r2, [r3, #12]
 800425a:	e022      	b.n	80042a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6919      	ldr	r1, [r3, #16]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	4613      	mov	r3, r2
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	4413      	add	r3, r2
 8004270:	2207      	movs	r2, #7
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43da      	mvns	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	400a      	ands	r2, r1
 800427e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6919      	ldr	r1, [r3, #16]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	4618      	mov	r0, r3
 8004292:	4603      	mov	r3, r0
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4403      	add	r3, r0
 8004298:	409a      	lsls	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b06      	cmp	r3, #6
 80042a8:	d824      	bhi.n	80042f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	3b05      	subs	r3, #5
 80042bc:	221f      	movs	r2, #31
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43da      	mvns	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	400a      	ands	r2, r1
 80042ca:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	4618      	mov	r0, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	3b05      	subs	r3, #5
 80042e6:	fa00 f203 	lsl.w	r2, r0, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80042f2:	e04c      	b.n	800438e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b0c      	cmp	r3, #12
 80042fa:	d824      	bhi.n	8004346 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	3b23      	subs	r3, #35	@ 0x23
 800430e:	221f      	movs	r2, #31
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	43da      	mvns	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	400a      	ands	r2, r1
 800431c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	b29b      	uxth	r3, r3
 800432a:	4618      	mov	r0, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	3b23      	subs	r3, #35	@ 0x23
 8004338:	fa00 f203 	lsl.w	r2, r0, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30
 8004344:	e023      	b.n	800438e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	3b41      	subs	r3, #65	@ 0x41
 8004358:	221f      	movs	r2, #31
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43da      	mvns	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	400a      	ands	r2, r1
 8004366:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	b29b      	uxth	r3, r3
 8004374:	4618      	mov	r0, r3
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	3b41      	subs	r3, #65	@ 0x41
 8004382:	fa00 f203 	lsl.w	r2, r0, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800438e:	4b22      	ldr	r3, [pc, #136]	@ (8004418 <HAL_ADC_ConfigChannel+0x234>)
 8004390:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a21      	ldr	r2, [pc, #132]	@ (800441c <HAL_ADC_ConfigChannel+0x238>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d109      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x1cc>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b12      	cmp	r3, #18
 80043a2:	d105      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a19      	ldr	r2, [pc, #100]	@ (800441c <HAL_ADC_ConfigChannel+0x238>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d123      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x21e>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b10      	cmp	r3, #16
 80043c0:	d003      	beq.n	80043ca <HAL_ADC_ConfigChannel+0x1e6>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b11      	cmp	r3, #17
 80043c8:	d11b      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b10      	cmp	r3, #16
 80043dc:	d111      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043de:	4b10      	ldr	r3, [pc, #64]	@ (8004420 <HAL_ADC_ConfigChannel+0x23c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a10      	ldr	r2, [pc, #64]	@ (8004424 <HAL_ADC_ConfigChannel+0x240>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	0c9a      	lsrs	r2, r3, #18
 80043ea:	4613      	mov	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043f4:	e002      	b.n	80043fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f9      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	40012300 	.word	0x40012300
 800441c:	40012000 	.word	0x40012000
 8004420:	2000000c 	.word	0x2000000c
 8004424:	431bde83 	.word	0x431bde83

08004428 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004430:	4b79      	ldr	r3, [pc, #484]	@ (8004618 <ADC_Init+0x1f0>)
 8004432:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	431a      	orrs	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800445c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6859      	ldr	r1, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	021a      	lsls	r2, r3, #8
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6859      	ldr	r1, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6899      	ldr	r1, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ba:	4a58      	ldr	r2, [pc, #352]	@ (800461c <ADC_Init+0x1f4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d022      	beq.n	8004506 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6899      	ldr	r1, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80044f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6899      	ldr	r1, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	e00f      	b.n	8004526 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004524:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0202 	bic.w	r2, r2, #2
 8004534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6899      	ldr	r1, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	7e1b      	ldrb	r3, [r3, #24]
 8004540:	005a      	lsls	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01b      	beq.n	800458c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004562:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004572:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6859      	ldr	r1, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	3b01      	subs	r3, #1
 8004580:	035a      	lsls	r2, r3, #13
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	e007      	b.n	800459c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800459a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80045aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	051a      	lsls	r2, r3, #20
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80045d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6899      	ldr	r1, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80045de:	025a      	lsls	r2, r3, #9
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6899      	ldr	r1, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	029a      	lsls	r2, r3, #10
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	609a      	str	r2, [r3, #8]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40012300 	.word	0x40012300
 800461c:	0f000001 	.word	0x0f000001

08004620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004630:	4b0c      	ldr	r3, [pc, #48]	@ (8004664 <__NVIC_SetPriorityGrouping+0x44>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800463c:	4013      	ands	r3, r2
 800463e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800464c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004652:	4a04      	ldr	r2, [pc, #16]	@ (8004664 <__NVIC_SetPriorityGrouping+0x44>)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	60d3      	str	r3, [r2, #12]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800466c:	4b04      	ldr	r3, [pc, #16]	@ (8004680 <__NVIC_GetPriorityGrouping+0x18>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	0a1b      	lsrs	r3, r3, #8
 8004672:	f003 0307 	and.w	r3, r3, #7
}
 8004676:	4618      	mov	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	e000ed00 	.word	0xe000ed00

08004684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800468e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004692:	2b00      	cmp	r3, #0
 8004694:	db0b      	blt.n	80046ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	f003 021f 	and.w	r2, r3, #31
 800469c:	4907      	ldr	r1, [pc, #28]	@ (80046bc <__NVIC_EnableIRQ+0x38>)
 800469e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2001      	movs	r0, #1
 80046a6:	fa00 f202 	lsl.w	r2, r0, r2
 80046aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	e000e100 	.word	0xe000e100

080046c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	6039      	str	r1, [r7, #0]
 80046ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	db0a      	blt.n	80046ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	490c      	ldr	r1, [pc, #48]	@ (800470c <__NVIC_SetPriority+0x4c>)
 80046da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046de:	0112      	lsls	r2, r2, #4
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	440b      	add	r3, r1
 80046e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046e8:	e00a      	b.n	8004700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	4908      	ldr	r1, [pc, #32]	@ (8004710 <__NVIC_SetPriority+0x50>)
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	3b04      	subs	r3, #4
 80046f8:	0112      	lsls	r2, r2, #4
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	440b      	add	r3, r1
 80046fe:	761a      	strb	r2, [r3, #24]
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	e000e100 	.word	0xe000e100
 8004710:	e000ed00 	.word	0xe000ed00

08004714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004714:	b480      	push	{r7}
 8004716:	b089      	sub	sp, #36	@ 0x24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f1c3 0307 	rsb	r3, r3, #7
 800472e:	2b04      	cmp	r3, #4
 8004730:	bf28      	it	cs
 8004732:	2304      	movcs	r3, #4
 8004734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3304      	adds	r3, #4
 800473a:	2b06      	cmp	r3, #6
 800473c:	d902      	bls.n	8004744 <NVIC_EncodePriority+0x30>
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	3b03      	subs	r3, #3
 8004742:	e000      	b.n	8004746 <NVIC_EncodePriority+0x32>
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004748:	f04f 32ff 	mov.w	r2, #4294967295
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43da      	mvns	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	401a      	ands	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800475c:	f04f 31ff 	mov.w	r1, #4294967295
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	fa01 f303 	lsl.w	r3, r1, r3
 8004766:	43d9      	mvns	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800476c:	4313      	orrs	r3, r2
         );
}
 800476e:	4618      	mov	r0, r3
 8004770:	3724      	adds	r7, #36	@ 0x24
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
	...

0800477c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3b01      	subs	r3, #1
 8004788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800478c:	d301      	bcc.n	8004792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800478e:	2301      	movs	r3, #1
 8004790:	e00f      	b.n	80047b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004792:	4a0a      	ldr	r2, [pc, #40]	@ (80047bc <SysTick_Config+0x40>)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3b01      	subs	r3, #1
 8004798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800479a:	210f      	movs	r1, #15
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	f7ff ff8e 	bl	80046c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a4:	4b05      	ldr	r3, [pc, #20]	@ (80047bc <SysTick_Config+0x40>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047aa:	4b04      	ldr	r3, [pc, #16]	@ (80047bc <SysTick_Config+0x40>)
 80047ac:	2207      	movs	r2, #7
 80047ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	e000e010 	.word	0xe000e010

080047c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff ff29 	bl	8004620 <__NVIC_SetPriorityGrouping>
}
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b086      	sub	sp, #24
 80047da:	af00      	add	r7, sp, #0
 80047dc:	4603      	mov	r3, r0
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047e8:	f7ff ff3e 	bl	8004668 <__NVIC_GetPriorityGrouping>
 80047ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	6978      	ldr	r0, [r7, #20]
 80047f4:	f7ff ff8e 	bl	8004714 <NVIC_EncodePriority>
 80047f8:	4602      	mov	r2, r0
 80047fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047fe:	4611      	mov	r1, r2
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff5d 	bl	80046c0 <__NVIC_SetPriority>
}
 8004806:	bf00      	nop
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	4603      	mov	r3, r0
 8004816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff ff31 	bl	8004684 <__NVIC_EnableIRQ>
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff ffa2 	bl	800477c <SysTick_Config>
 8004838:	4603      	mov	r3, r0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004850:	f7ff fc54 	bl	80040fc <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e099      	b.n	8004994 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0201 	bic.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004880:	e00f      	b.n	80048a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004882:	f7ff fc3b 	bl	80040fc <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b05      	cmp	r3, #5
 800488e:	d908      	bls.n	80048a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2203      	movs	r2, #3
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e078      	b.n	8004994 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e8      	bne.n	8004882 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4b38      	ldr	r3, [pc, #224]	@ (800499c <HAL_DMA_Init+0x158>)
 80048bc:	4013      	ands	r3, r2
 80048be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d107      	bne.n	800490c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004904:	4313      	orrs	r3, r2
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f023 0307 	bic.w	r3, r3, #7
 8004922:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004932:	2b04      	cmp	r3, #4
 8004934:	d117      	bne.n	8004966 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00e      	beq.n	8004966 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f9e9 	bl	8004d20 <DMA_CheckFifoParam>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d008      	beq.n	8004966 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2240      	movs	r2, #64	@ 0x40
 8004958:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004962:	2301      	movs	r3, #1
 8004964:	e016      	b.n	8004994 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f9a0 	bl	8004cb4 <DMA_CalcBaseAndBitshift>
 8004974:	4603      	mov	r3, r0
 8004976:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497c:	223f      	movs	r2, #63	@ 0x3f
 800497e:	409a      	lsls	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	f010803f 	.word	0xf010803f

080049a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049ac:	4b8e      	ldr	r3, [pc, #568]	@ (8004be8 <HAL_DMA_IRQHandler+0x248>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a8e      	ldr	r2, [pc, #568]	@ (8004bec <HAL_DMA_IRQHandler+0x24c>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	0a9b      	lsrs	r3, r3, #10
 80049b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ca:	2208      	movs	r2, #8
 80049cc:	409a      	lsls	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01a      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d013      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0204 	bic.w	r2, r2, #4
 80049f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f8:	2208      	movs	r2, #8
 80049fa:	409a      	lsls	r2, r3
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a04:	f043 0201 	orr.w	r2, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a10:	2201      	movs	r2, #1
 8004a12:	409a      	lsls	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d012      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2e:	2201      	movs	r2, #1
 8004a30:	409a      	lsls	r2, r3
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3a:	f043 0202 	orr.w	r2, r3, #2
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a46:	2204      	movs	r2, #4
 8004a48:	409a      	lsls	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d012      	beq.n	8004a78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a64:	2204      	movs	r2, #4
 8004a66:	409a      	lsls	r2, r3
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a70:	f043 0204 	orr.w	r2, r3, #4
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7c:	2210      	movs	r2, #16
 8004a7e:	409a      	lsls	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d043      	beq.n	8004b10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d03c      	beq.n	8004b10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a9a:	2210      	movs	r2, #16
 8004a9c:	409a      	lsls	r2, r3
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d018      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d108      	bne.n	8004ad0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d024      	beq.n	8004b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	4798      	blx	r3
 8004ace:	e01f      	b.n	8004b10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01b      	beq.n	8004b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	4798      	blx	r3
 8004ae0:	e016      	b.n	8004b10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d107      	bne.n	8004b00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0208 	bic.w	r2, r2, #8
 8004afe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b14:	2220      	movs	r2, #32
 8004b16:	409a      	lsls	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 808f 	beq.w	8004c40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8087 	beq.w	8004c40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b36:	2220      	movs	r2, #32
 8004b38:	409a      	lsls	r2, r3
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b05      	cmp	r3, #5
 8004b48:	d136      	bne.n	8004bb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0216 	bic.w	r2, r2, #22
 8004b58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695a      	ldr	r2, [r3, #20]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d103      	bne.n	8004b7a <HAL_DMA_IRQHandler+0x1da>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0208 	bic.w	r2, r2, #8
 8004b88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b8e:	223f      	movs	r2, #63	@ 0x3f
 8004b90:	409a      	lsls	r2, r3
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d07e      	beq.n	8004cac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	4798      	blx	r3
        }
        return;
 8004bb6:	e079      	b.n	8004cac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d01d      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10d      	bne.n	8004bf0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d031      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	4798      	blx	r3
 8004be4:	e02c      	b.n	8004c40 <HAL_DMA_IRQHandler+0x2a0>
 8004be6:	bf00      	nop
 8004be8:	2000000c 	.word	0x2000000c
 8004bec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d023      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	4798      	blx	r3
 8004c00:	e01e      	b.n	8004c40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10f      	bne.n	8004c30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0210 	bic.w	r2, r2, #16
 8004c1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d032      	beq.n	8004cae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d022      	beq.n	8004c9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2205      	movs	r2, #5
 8004c58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d307      	bcc.n	8004c88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f2      	bne.n	8004c6c <HAL_DMA_IRQHandler+0x2cc>
 8004c86:	e000      	b.n	8004c8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	4798      	blx	r3
 8004caa:	e000      	b.n	8004cae <HAL_DMA_IRQHandler+0x30e>
        return;
 8004cac:	bf00      	nop
    }
  }
}
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	3b10      	subs	r3, #16
 8004cc4:	4a14      	ldr	r2, [pc, #80]	@ (8004d18 <DMA_CalcBaseAndBitshift+0x64>)
 8004cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cce:	4a13      	ldr	r2, [pc, #76]	@ (8004d1c <DMA_CalcBaseAndBitshift+0x68>)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d909      	bls.n	8004cf6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004cea:	f023 0303 	bic.w	r3, r3, #3
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	659a      	str	r2, [r3, #88]	@ 0x58
 8004cf4:	e007      	b.n	8004d06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004cfe:	f023 0303 	bic.w	r3, r3, #3
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	aaaaaaab 	.word	0xaaaaaaab
 8004d1c:	0800c398 	.word	0x0800c398

08004d20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d11f      	bne.n	8004d7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d856      	bhi.n	8004dee <DMA_CheckFifoParam+0xce>
 8004d40:	a201      	add	r2, pc, #4	@ (adr r2, 8004d48 <DMA_CheckFifoParam+0x28>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d6b 	.word	0x08004d6b
 8004d50:	08004d59 	.word	0x08004d59
 8004d54:	08004def 	.word	0x08004def
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d046      	beq.n	8004df2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d68:	e043      	b.n	8004df2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d72:	d140      	bne.n	8004df6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d78:	e03d      	b.n	8004df6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d82:	d121      	bne.n	8004dc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d837      	bhi.n	8004dfa <DMA_CheckFifoParam+0xda>
 8004d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d90 <DMA_CheckFifoParam+0x70>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004da1 	.word	0x08004da1
 8004d94:	08004da7 	.word	0x08004da7
 8004d98:	08004da1 	.word	0x08004da1
 8004d9c:	08004db9 	.word	0x08004db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
      break;
 8004da4:	e030      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004daa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d025      	beq.n	8004dfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004db6:	e022      	b.n	8004dfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004dc0:	d11f      	bne.n	8004e02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004dc6:	e01c      	b.n	8004e02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d903      	bls.n	8004dd6 <DMA_CheckFifoParam+0xb6>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d003      	beq.n	8004ddc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004dd4:	e018      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8004dda:	e015      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00e      	beq.n	8004e06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      break;
 8004dec:	e00b      	b.n	8004e06 <DMA_CheckFifoParam+0xe6>
      break;
 8004dee:	bf00      	nop
 8004df0:	e00a      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      break;
 8004df2:	bf00      	nop
 8004df4:	e008      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      break;
 8004df6:	bf00      	nop
 8004df8:	e006      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      break;
 8004dfa:	bf00      	nop
 8004dfc:	e004      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      break;
 8004dfe:	bf00      	nop
 8004e00:	e002      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e02:	bf00      	nop
 8004e04:	e000      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      break;
 8004e06:	bf00      	nop
    }
  } 
  
  return status; 
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop

08004e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b089      	sub	sp, #36	@ 0x24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
 8004e32:	e16b      	b.n	800510c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e34:	2201      	movs	r2, #1
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4013      	ands	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	f040 815a 	bne.w	8005106 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d005      	beq.n	8004e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d130      	bne.n	8004ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	2203      	movs	r2, #3
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4013      	ands	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	091b      	lsrs	r3, r3, #4
 8004eb6:	f003 0201 	and.w	r2, r3, #1
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d017      	beq.n	8004f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4013      	ands	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d123      	bne.n	8004f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	08da      	lsrs	r2, r3, #3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3208      	adds	r2, #8
 8004f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	220f      	movs	r2, #15
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	43db      	mvns	r3, r3
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4013      	ands	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	08da      	lsrs	r2, r3, #3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3208      	adds	r2, #8
 8004f56:	69b9      	ldr	r1, [r7, #24]
 8004f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	2203      	movs	r2, #3
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4013      	ands	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f003 0203 	and.w	r2, r3, #3
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80b4 	beq.w	8005106 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	4b60      	ldr	r3, [pc, #384]	@ (8005124 <HAL_GPIO_Init+0x30c>)
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa6:	4a5f      	ldr	r2, [pc, #380]	@ (8005124 <HAL_GPIO_Init+0x30c>)
 8004fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fae:	4b5d      	ldr	r3, [pc, #372]	@ (8005124 <HAL_GPIO_Init+0x30c>)
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fba:	4a5b      	ldr	r2, [pc, #364]	@ (8005128 <HAL_GPIO_Init+0x310>)
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	089b      	lsrs	r3, r3, #2
 8004fc0:	3302      	adds	r3, #2
 8004fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	220f      	movs	r2, #15
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a52      	ldr	r2, [pc, #328]	@ (800512c <HAL_GPIO_Init+0x314>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d02b      	beq.n	800503e <HAL_GPIO_Init+0x226>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a51      	ldr	r2, [pc, #324]	@ (8005130 <HAL_GPIO_Init+0x318>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d025      	beq.n	800503a <HAL_GPIO_Init+0x222>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a50      	ldr	r2, [pc, #320]	@ (8005134 <HAL_GPIO_Init+0x31c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d01f      	beq.n	8005036 <HAL_GPIO_Init+0x21e>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a4f      	ldr	r2, [pc, #316]	@ (8005138 <HAL_GPIO_Init+0x320>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d019      	beq.n	8005032 <HAL_GPIO_Init+0x21a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a4e      	ldr	r2, [pc, #312]	@ (800513c <HAL_GPIO_Init+0x324>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d013      	beq.n	800502e <HAL_GPIO_Init+0x216>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a4d      	ldr	r2, [pc, #308]	@ (8005140 <HAL_GPIO_Init+0x328>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00d      	beq.n	800502a <HAL_GPIO_Init+0x212>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a4c      	ldr	r2, [pc, #304]	@ (8005144 <HAL_GPIO_Init+0x32c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <HAL_GPIO_Init+0x20e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a4b      	ldr	r2, [pc, #300]	@ (8005148 <HAL_GPIO_Init+0x330>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d101      	bne.n	8005022 <HAL_GPIO_Init+0x20a>
 800501e:	2307      	movs	r3, #7
 8005020:	e00e      	b.n	8005040 <HAL_GPIO_Init+0x228>
 8005022:	2308      	movs	r3, #8
 8005024:	e00c      	b.n	8005040 <HAL_GPIO_Init+0x228>
 8005026:	2306      	movs	r3, #6
 8005028:	e00a      	b.n	8005040 <HAL_GPIO_Init+0x228>
 800502a:	2305      	movs	r3, #5
 800502c:	e008      	b.n	8005040 <HAL_GPIO_Init+0x228>
 800502e:	2304      	movs	r3, #4
 8005030:	e006      	b.n	8005040 <HAL_GPIO_Init+0x228>
 8005032:	2303      	movs	r3, #3
 8005034:	e004      	b.n	8005040 <HAL_GPIO_Init+0x228>
 8005036:	2302      	movs	r3, #2
 8005038:	e002      	b.n	8005040 <HAL_GPIO_Init+0x228>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <HAL_GPIO_Init+0x228>
 800503e:	2300      	movs	r3, #0
 8005040:	69fa      	ldr	r2, [r7, #28]
 8005042:	f002 0203 	and.w	r2, r2, #3
 8005046:	0092      	lsls	r2, r2, #2
 8005048:	4093      	lsls	r3, r2
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4313      	orrs	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005050:	4935      	ldr	r1, [pc, #212]	@ (8005128 <HAL_GPIO_Init+0x310>)
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	089b      	lsrs	r3, r3, #2
 8005056:	3302      	adds	r3, #2
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800505e:	4b3b      	ldr	r3, [pc, #236]	@ (800514c <HAL_GPIO_Init+0x334>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	43db      	mvns	r3, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4013      	ands	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005082:	4a32      	ldr	r2, [pc, #200]	@ (800514c <HAL_GPIO_Init+0x334>)
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005088:	4b30      	ldr	r3, [pc, #192]	@ (800514c <HAL_GPIO_Init+0x334>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	43db      	mvns	r3, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4013      	ands	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050ac:	4a27      	ldr	r2, [pc, #156]	@ (800514c <HAL_GPIO_Init+0x334>)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050b2:	4b26      	ldr	r3, [pc, #152]	@ (800514c <HAL_GPIO_Init+0x334>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	43db      	mvns	r3, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4013      	ands	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050d6:	4a1d      	ldr	r2, [pc, #116]	@ (800514c <HAL_GPIO_Init+0x334>)
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050dc:	4b1b      	ldr	r3, [pc, #108]	@ (800514c <HAL_GPIO_Init+0x334>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	43db      	mvns	r3, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4013      	ands	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005100:	4a12      	ldr	r2, [pc, #72]	@ (800514c <HAL_GPIO_Init+0x334>)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	3301      	adds	r3, #1
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b0f      	cmp	r3, #15
 8005110:	f67f ae90 	bls.w	8004e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	3724      	adds	r7, #36	@ 0x24
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800
 8005128:	40013800 	.word	0x40013800
 800512c:	40020000 	.word	0x40020000
 8005130:	40020400 	.word	0x40020400
 8005134:	40020800 	.word	0x40020800
 8005138:	40020c00 	.word	0x40020c00
 800513c:	40021000 	.word	0x40021000
 8005140:	40021400 	.word	0x40021400
 8005144:	40021800 	.word	0x40021800
 8005148:	40021c00 	.word	0x40021c00
 800514c:	40013c00 	.word	0x40013c00

08005150 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	887b      	ldrh	r3, [r7, #2]
 8005162:	4013      	ands	r3, r2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
 800516c:	e001      	b.n	8005172 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800516e:	2300      	movs	r3, #0
 8005170:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	807b      	strh	r3, [r7, #2]
 800518c:	4613      	mov	r3, r2
 800518e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005190:	787b      	ldrb	r3, [r7, #1]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005196:	887a      	ldrh	r2, [r7, #2]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800519c:	e003      	b.n	80051a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800519e:	887b      	ldrh	r3, [r7, #2]
 80051a0:	041a      	lsls	r2, r3, #16
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	619a      	str	r2, [r3, #24]
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e12b      	b.n	800541e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fc fa4c 	bl	8001678 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2224      	movs	r2, #36	@ 0x24
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0201 	bic.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005218:	f001 fbfc 	bl	8006a14 <HAL_RCC_GetPCLK1Freq>
 800521c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	4a81      	ldr	r2, [pc, #516]	@ (8005428 <HAL_I2C_Init+0x274>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d807      	bhi.n	8005238 <HAL_I2C_Init+0x84>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4a80      	ldr	r2, [pc, #512]	@ (800542c <HAL_I2C_Init+0x278>)
 800522c:	4293      	cmp	r3, r2
 800522e:	bf94      	ite	ls
 8005230:	2301      	movls	r3, #1
 8005232:	2300      	movhi	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e006      	b.n	8005246 <HAL_I2C_Init+0x92>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4a7d      	ldr	r2, [pc, #500]	@ (8005430 <HAL_I2C_Init+0x27c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	bf94      	ite	ls
 8005240:	2301      	movls	r3, #1
 8005242:	2300      	movhi	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e0e7      	b.n	800541e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4a78      	ldr	r2, [pc, #480]	@ (8005434 <HAL_I2C_Init+0x280>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	0c9b      	lsrs	r3, r3, #18
 8005258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	4a6a      	ldr	r2, [pc, #424]	@ (8005428 <HAL_I2C_Init+0x274>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d802      	bhi.n	8005288 <HAL_I2C_Init+0xd4>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	3301      	adds	r3, #1
 8005286:	e009      	b.n	800529c <HAL_I2C_Init+0xe8>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800528e:	fb02 f303 	mul.w	r3, r2, r3
 8005292:	4a69      	ldr	r2, [pc, #420]	@ (8005438 <HAL_I2C_Init+0x284>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	099b      	lsrs	r3, r3, #6
 800529a:	3301      	adds	r3, #1
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	430b      	orrs	r3, r1
 80052a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80052ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	495c      	ldr	r1, [pc, #368]	@ (8005428 <HAL_I2C_Init+0x274>)
 80052b8:	428b      	cmp	r3, r1
 80052ba:	d819      	bhi.n	80052f0 <HAL_I2C_Init+0x13c>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	1e59      	subs	r1, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80052ca:	1c59      	adds	r1, r3, #1
 80052cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80052d0:	400b      	ands	r3, r1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_I2C_Init+0x138>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1e59      	subs	r1, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80052e4:	3301      	adds	r3, #1
 80052e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ea:	e051      	b.n	8005390 <HAL_I2C_Init+0x1dc>
 80052ec:	2304      	movs	r3, #4
 80052ee:	e04f      	b.n	8005390 <HAL_I2C_Init+0x1dc>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d111      	bne.n	800531c <HAL_I2C_Init+0x168>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	1e58      	subs	r0, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6859      	ldr	r1, [r3, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	440b      	add	r3, r1
 8005306:	fbb0 f3f3 	udiv	r3, r0, r3
 800530a:	3301      	adds	r3, #1
 800530c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf0c      	ite	eq
 8005314:	2301      	moveq	r3, #1
 8005316:	2300      	movne	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	e012      	b.n	8005342 <HAL_I2C_Init+0x18e>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	1e58      	subs	r0, r3, #1
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6859      	ldr	r1, [r3, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	0099      	lsls	r1, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005332:	3301      	adds	r3, #1
 8005334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005338:	2b00      	cmp	r3, #0
 800533a:	bf0c      	ite	eq
 800533c:	2301      	moveq	r3, #1
 800533e:	2300      	movne	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_I2C_Init+0x196>
 8005346:	2301      	movs	r3, #1
 8005348:	e022      	b.n	8005390 <HAL_I2C_Init+0x1dc>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10e      	bne.n	8005370 <HAL_I2C_Init+0x1bc>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	1e58      	subs	r0, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6859      	ldr	r1, [r3, #4]
 800535a:	460b      	mov	r3, r1
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	440b      	add	r3, r1
 8005360:	fbb0 f3f3 	udiv	r3, r0, r3
 8005364:	3301      	adds	r3, #1
 8005366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800536e:	e00f      	b.n	8005390 <HAL_I2C_Init+0x1dc>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	1e58      	subs	r0, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6859      	ldr	r1, [r3, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	0099      	lsls	r1, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	fbb0 f3f3 	udiv	r3, r0, r3
 8005386:	3301      	adds	r3, #1
 8005388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800538c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	6809      	ldr	r1, [r1, #0]
 8005394:	4313      	orrs	r3, r2
 8005396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69da      	ldr	r2, [r3, #28]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80053be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6911      	ldr	r1, [r2, #16]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68d2      	ldr	r2, [r2, #12]
 80053ca:	4311      	orrs	r1, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695a      	ldr	r2, [r3, #20]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	000186a0 	.word	0x000186a0
 800542c:	001e847f 	.word	0x001e847f
 8005430:	003d08ff 	.word	0x003d08ff
 8005434:	431bde83 	.word	0x431bde83
 8005438:	10624dd3 	.word	0x10624dd3

0800543c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	4608      	mov	r0, r1
 8005446:	4611      	mov	r1, r2
 8005448:	461a      	mov	r2, r3
 800544a:	4603      	mov	r3, r0
 800544c:	817b      	strh	r3, [r7, #10]
 800544e:	460b      	mov	r3, r1
 8005450:	813b      	strh	r3, [r7, #8]
 8005452:	4613      	mov	r3, r2
 8005454:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005456:	f7fe fe51 	bl	80040fc <HAL_GetTick>
 800545a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b20      	cmp	r3, #32
 8005466:	f040 80d9 	bne.w	800561c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	2319      	movs	r3, #25
 8005470:	2201      	movs	r2, #1
 8005472:	496d      	ldr	r1, [pc, #436]	@ (8005628 <HAL_I2C_Mem_Write+0x1ec>)
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 fc7f 	bl	8005d78 <I2C_WaitOnFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005480:	2302      	movs	r3, #2
 8005482:	e0cc      	b.n	800561e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_I2C_Mem_Write+0x56>
 800548e:	2302      	movs	r3, #2
 8005490:	e0c5      	b.n	800561e <HAL_I2C_Mem_Write+0x1e2>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d007      	beq.n	80054b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2221      	movs	r2, #33	@ 0x21
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2240      	movs	r2, #64	@ 0x40
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a3a      	ldr	r2, [r7, #32]
 80054e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80054e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4a4d      	ldr	r2, [pc, #308]	@ (800562c <HAL_I2C_Mem_Write+0x1f0>)
 80054f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054fa:	88f8      	ldrh	r0, [r7, #6]
 80054fc:	893a      	ldrh	r2, [r7, #8]
 80054fe:	8979      	ldrh	r1, [r7, #10]
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	9301      	str	r3, [sp, #4]
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	4603      	mov	r3, r0
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fab6 	bl	8005a7c <I2C_RequestMemoryWrite>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d052      	beq.n	80055bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e081      	b.n	800561e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 fd00 	bl	8005f24 <I2C_WaitOnTXEFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00d      	beq.n	8005546 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	2b04      	cmp	r3, #4
 8005530:	d107      	bne.n	8005542 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005540:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e06b      	b.n	800561e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	781a      	ldrb	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b04      	cmp	r3, #4
 8005582:	d11b      	bne.n	80055bc <HAL_I2C_Mem_Write+0x180>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005588:	2b00      	cmp	r3, #0
 800558a:	d017      	beq.n	80055bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005590:	781a      	ldrb	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1aa      	bne.n	800551a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 fcec 	bl	8005fa6 <I2C_WaitOnBTFFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00d      	beq.n	80055f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d107      	bne.n	80055ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e016      	b.n	800561e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	e000      	b.n	800561e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800561c:	2302      	movs	r3, #2
  }
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	00100002 	.word	0x00100002
 800562c:	ffff0000 	.word	0xffff0000

08005630 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08c      	sub	sp, #48	@ 0x30
 8005634:	af02      	add	r7, sp, #8
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	4608      	mov	r0, r1
 800563a:	4611      	mov	r1, r2
 800563c:	461a      	mov	r2, r3
 800563e:	4603      	mov	r3, r0
 8005640:	817b      	strh	r3, [r7, #10]
 8005642:	460b      	mov	r3, r1
 8005644:	813b      	strh	r3, [r7, #8]
 8005646:	4613      	mov	r3, r2
 8005648:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800564a:	f7fe fd57 	bl	80040fc <HAL_GetTick>
 800564e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b20      	cmp	r3, #32
 800565a:	f040 8208 	bne.w	8005a6e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800565e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	2319      	movs	r3, #25
 8005664:	2201      	movs	r2, #1
 8005666:	497b      	ldr	r1, [pc, #492]	@ (8005854 <HAL_I2C_Mem_Read+0x224>)
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 fb85 	bl	8005d78 <I2C_WaitOnFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005674:	2302      	movs	r3, #2
 8005676:	e1fb      	b.n	8005a70 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <HAL_I2C_Mem_Read+0x56>
 8005682:	2302      	movs	r3, #2
 8005684:	e1f4      	b.n	8005a70 <HAL_I2C_Mem_Read+0x440>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	d007      	beq.n	80056ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2222      	movs	r2, #34	@ 0x22
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2240      	movs	r2, #64	@ 0x40
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80056dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4a5b      	ldr	r2, [pc, #364]	@ (8005858 <HAL_I2C_Mem_Read+0x228>)
 80056ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056ee:	88f8      	ldrh	r0, [r7, #6]
 80056f0:	893a      	ldrh	r2, [r7, #8]
 80056f2:	8979      	ldrh	r1, [r7, #10]
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	9301      	str	r3, [sp, #4]
 80056f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	4603      	mov	r3, r0
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 fa52 	bl	8005ba8 <I2C_RequestMemoryRead>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e1b0      	b.n	8005a70 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005712:	2b00      	cmp	r3, #0
 8005714:	d113      	bne.n	800573e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005716:	2300      	movs	r3, #0
 8005718:	623b      	str	r3, [r7, #32]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	623b      	str	r3, [r7, #32]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	623b      	str	r3, [r7, #32]
 800572a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	e184      	b.n	8005a48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005742:	2b01      	cmp	r3, #1
 8005744:	d11b      	bne.n	800577e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005754:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	61fb      	str	r3, [r7, #28]
 800576a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	e164      	b.n	8005a48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005782:	2b02      	cmp	r3, #2
 8005784:	d11b      	bne.n	80057be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005794:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057a6:	2300      	movs	r3, #0
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	e144      	b.n	8005a48 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80057d4:	e138      	b.n	8005a48 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057da:	2b03      	cmp	r3, #3
 80057dc:	f200 80f1 	bhi.w	80059c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d123      	bne.n	8005830 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fc1b 	bl	8006028 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e139      	b.n	8005a70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800582e:	e10b      	b.n	8005a48 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005834:	2b02      	cmp	r3, #2
 8005836:	d14e      	bne.n	80058d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583e:	2200      	movs	r2, #0
 8005840:	4906      	ldr	r1, [pc, #24]	@ (800585c <HAL_I2C_Mem_Read+0x22c>)
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fa98 	bl	8005d78 <I2C_WaitOnFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d008      	beq.n	8005860 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e10e      	b.n	8005a70 <HAL_I2C_Mem_Read+0x440>
 8005852:	bf00      	nop
 8005854:	00100002 	.word	0x00100002
 8005858:	ffff0000 	.word	0xffff0000
 800585c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800586e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691a      	ldr	r2, [r3, #16]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058d4:	e0b8      	b.n	8005a48 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058dc:	2200      	movs	r2, #0
 80058de:	4966      	ldr	r1, [pc, #408]	@ (8005a78 <HAL_I2C_Mem_Read+0x448>)
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 fa49 	bl	8005d78 <I2C_WaitOnFlagUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0bf      	b.n	8005a70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005938:	2200      	movs	r2, #0
 800593a:	494f      	ldr	r1, [pc, #316]	@ (8005a78 <HAL_I2C_Mem_Read+0x448>)
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 fa1b 	bl	8005d78 <I2C_WaitOnFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e091      	b.n	8005a70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800595a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691a      	ldr	r2, [r3, #16]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005998:	b2d2      	uxtb	r2, r2
 800599a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059aa:	3b01      	subs	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059c0:	e042      	b.n	8005a48 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fb2e 	bl	8006028 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e04c      	b.n	8005a70 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d118      	bne.n	8005a48 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f47f aec2 	bne.w	80057d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e000      	b.n	8005a70 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005a6e:	2302      	movs	r3, #2
  }
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3728      	adds	r7, #40	@ 0x28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	00010004 	.word	0x00010004

08005a7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	4608      	mov	r0, r1
 8005a86:	4611      	mov	r1, r2
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	817b      	strh	r3, [r7, #10]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	813b      	strh	r3, [r7, #8]
 8005a92:	4613      	mov	r3, r2
 8005a94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005aa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f960 	bl	8005d78 <I2C_WaitOnFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00d      	beq.n	8005ada <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005acc:	d103      	bne.n	8005ad6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ad4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e05f      	b.n	8005b9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ada:	897b      	ldrh	r3, [r7, #10]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ae8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	6a3a      	ldr	r2, [r7, #32]
 8005aee:	492d      	ldr	r1, [pc, #180]	@ (8005ba4 <I2C_RequestMemoryWrite+0x128>)
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f998 	bl	8005e26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e04c      	b.n	8005b9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b18:	6a39      	ldr	r1, [r7, #32]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 fa02 	bl	8005f24 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00d      	beq.n	8005b42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d107      	bne.n	8005b3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e02b      	b.n	8005b9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d105      	bne.n	8005b54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b48:	893b      	ldrh	r3, [r7, #8]
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	611a      	str	r2, [r3, #16]
 8005b52:	e021      	b.n	8005b98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b54:	893b      	ldrh	r3, [r7, #8]
 8005b56:	0a1b      	lsrs	r3, r3, #8
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b64:	6a39      	ldr	r1, [r7, #32]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f9dc 	bl	8005f24 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00d      	beq.n	8005b8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d107      	bne.n	8005b8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e005      	b.n	8005b9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b8e:	893b      	ldrh	r3, [r7, #8]
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	00010002 	.word	0x00010002

08005ba8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	4608      	mov	r0, r1
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	817b      	strh	r3, [r7, #10]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	813b      	strh	r3, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005bd0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005be0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f8c2 	bl	8005d78 <I2C_WaitOnFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00d      	beq.n	8005c16 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c08:	d103      	bne.n	8005c12 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e0aa      	b.n	8005d6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c16:	897b      	ldrh	r3, [r7, #10]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	6a3a      	ldr	r2, [r7, #32]
 8005c2a:	4952      	ldr	r1, [pc, #328]	@ (8005d74 <I2C_RequestMemoryRead+0x1cc>)
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f8fa 	bl	8005e26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e097      	b.n	8005d6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c54:	6a39      	ldr	r1, [r7, #32]
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 f964 	bl	8005f24 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00d      	beq.n	8005c7e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d107      	bne.n	8005c7a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e076      	b.n	8005d6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d105      	bne.n	8005c90 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c84:	893b      	ldrh	r3, [r7, #8]
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	611a      	str	r2, [r3, #16]
 8005c8e:	e021      	b.n	8005cd4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c90:	893b      	ldrh	r3, [r7, #8]
 8005c92:	0a1b      	lsrs	r3, r3, #8
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca0:	6a39      	ldr	r1, [r7, #32]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f93e 	bl	8005f24 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00d      	beq.n	8005cca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d107      	bne.n	8005cc6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e050      	b.n	8005d6c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cca:	893b      	ldrh	r3, [r7, #8]
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd6:	6a39      	ldr	r1, [r7, #32]
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f923 	bl	8005f24 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00d      	beq.n	8005d00 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d107      	bne.n	8005cfc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cfa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e035      	b.n	8005d6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d0e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 f82b 	bl	8005d78 <I2C_WaitOnFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00d      	beq.n	8005d44 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d36:	d103      	bne.n	8005d40 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e013      	b.n	8005d6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d44:	897b      	ldrh	r3, [r7, #10]
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d56:	6a3a      	ldr	r2, [r7, #32]
 8005d58:	4906      	ldr	r1, [pc, #24]	@ (8005d74 <I2C_RequestMemoryRead+0x1cc>)
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 f863 	bl	8005e26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	00010002 	.word	0x00010002

08005d78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	4613      	mov	r3, r2
 8005d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d88:	e025      	b.n	8005dd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d90:	d021      	beq.n	8005dd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d92:	f7fe f9b3 	bl	80040fc <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d302      	bcc.n	8005da8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d116      	bne.n	8005dd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc2:	f043 0220 	orr.w	r2, r3, #32
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e023      	b.n	8005e1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	0c1b      	lsrs	r3, r3, #16
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d10d      	bne.n	8005dfc <I2C_WaitOnFlagUntilTimeout+0x84>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	43da      	mvns	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4013      	ands	r3, r2
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	bf0c      	ite	eq
 8005df2:	2301      	moveq	r3, #1
 8005df4:	2300      	movne	r3, #0
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	461a      	mov	r2, r3
 8005dfa:	e00c      	b.n	8005e16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	43da      	mvns	r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4013      	ands	r3, r2
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bf0c      	ite	eq
 8005e0e:	2301      	moveq	r3, #1
 8005e10:	2300      	movne	r3, #0
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	79fb      	ldrb	r3, [r7, #7]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d0b6      	beq.n	8005d8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	607a      	str	r2, [r7, #4]
 8005e32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e34:	e051      	b.n	8005eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e44:	d123      	bne.n	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7a:	f043 0204 	orr.w	r2, r3, #4
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e046      	b.n	8005f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e94:	d021      	beq.n	8005eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e96:	f7fe f931 	bl	80040fc <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d302      	bcc.n	8005eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d116      	bne.n	8005eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec6:	f043 0220 	orr.w	r2, r3, #32
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e020      	b.n	8005f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	0c1b      	lsrs	r3, r3, #16
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d10c      	bne.n	8005efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	43da      	mvns	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bf14      	ite	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	2300      	moveq	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	e00b      	b.n	8005f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	43da      	mvns	r2, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	bf14      	ite	ne
 8005f10:	2301      	movne	r3, #1
 8005f12:	2300      	moveq	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d18d      	bne.n	8005e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f30:	e02d      	b.n	8005f8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 f8ce 	bl	80060d4 <I2C_IsAcknowledgeFailed>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e02d      	b.n	8005f9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f48:	d021      	beq.n	8005f8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4a:	f7fe f8d7 	bl	80040fc <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d302      	bcc.n	8005f60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d116      	bne.n	8005f8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7a:	f043 0220 	orr.w	r2, r3, #32
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e007      	b.n	8005f9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f98:	2b80      	cmp	r3, #128	@ 0x80
 8005f9a:	d1ca      	bne.n	8005f32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fb2:	e02d      	b.n	8006010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f88d 	bl	80060d4 <I2C_IsAcknowledgeFailed>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e02d      	b.n	8006020 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d021      	beq.n	8006010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fcc:	f7fe f896 	bl	80040fc <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d302      	bcc.n	8005fe2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d116      	bne.n	8006010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffc:	f043 0220 	orr.w	r2, r3, #32
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e007      	b.n	8006020 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b04      	cmp	r3, #4
 800601c:	d1ca      	bne.n	8005fb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006034:	e042      	b.n	80060bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	2b10      	cmp	r3, #16
 8006042:	d119      	bne.n	8006078 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0210 	mvn.w	r2, #16
 800604c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e029      	b.n	80060cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006078:	f7fe f840 	bl	80040fc <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	429a      	cmp	r2, r3
 8006086:	d302      	bcc.n	800608e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d116      	bne.n	80060bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a8:	f043 0220 	orr.w	r2, r3, #32
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e007      	b.n	80060cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c6:	2b40      	cmp	r3, #64	@ 0x40
 80060c8:	d1b5      	bne.n	8006036 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ea:	d11b      	bne.n	8006124 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006110:	f043 0204 	orr.w	r2, r3, #4
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e000      	b.n	8006126 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e267      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d075      	beq.n	800623e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006152:	4b88      	ldr	r3, [pc, #544]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 030c 	and.w	r3, r3, #12
 800615a:	2b04      	cmp	r3, #4
 800615c:	d00c      	beq.n	8006178 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800615e:	4b85      	ldr	r3, [pc, #532]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006166:	2b08      	cmp	r3, #8
 8006168:	d112      	bne.n	8006190 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800616a:	4b82      	ldr	r3, [pc, #520]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006172:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006176:	d10b      	bne.n	8006190 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006178:	4b7e      	ldr	r3, [pc, #504]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d05b      	beq.n	800623c <HAL_RCC_OscConfig+0x108>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d157      	bne.n	800623c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e242      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006198:	d106      	bne.n	80061a8 <HAL_RCC_OscConfig+0x74>
 800619a:	4b76      	ldr	r3, [pc, #472]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a75      	ldr	r2, [pc, #468]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 80061a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	e01d      	b.n	80061e4 <HAL_RCC_OscConfig+0xb0>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061b0:	d10c      	bne.n	80061cc <HAL_RCC_OscConfig+0x98>
 80061b2:	4b70      	ldr	r3, [pc, #448]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a6f      	ldr	r2, [pc, #444]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 80061b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	4b6d      	ldr	r3, [pc, #436]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a6c      	ldr	r2, [pc, #432]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 80061c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	e00b      	b.n	80061e4 <HAL_RCC_OscConfig+0xb0>
 80061cc:	4b69      	ldr	r3, [pc, #420]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a68      	ldr	r2, [pc, #416]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 80061d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	4b66      	ldr	r3, [pc, #408]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a65      	ldr	r2, [pc, #404]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 80061de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d013      	beq.n	8006214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ec:	f7fd ff86 	bl	80040fc <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061f4:	f7fd ff82 	bl	80040fc <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b64      	cmp	r3, #100	@ 0x64
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e207      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006206:	4b5b      	ldr	r3, [pc, #364]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f0      	beq.n	80061f4 <HAL_RCC_OscConfig+0xc0>
 8006212:	e014      	b.n	800623e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006214:	f7fd ff72 	bl	80040fc <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800621c:	f7fd ff6e 	bl	80040fc <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b64      	cmp	r3, #100	@ 0x64
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e1f3      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800622e:	4b51      	ldr	r3, [pc, #324]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <HAL_RCC_OscConfig+0xe8>
 800623a:	e000      	b.n	800623e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800623c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d063      	beq.n	8006312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800624a:	4b4a      	ldr	r3, [pc, #296]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 030c 	and.w	r3, r3, #12
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00b      	beq.n	800626e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006256:	4b47      	ldr	r3, [pc, #284]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800625e:	2b08      	cmp	r3, #8
 8006260:	d11c      	bne.n	800629c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006262:	4b44      	ldr	r3, [pc, #272]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d116      	bne.n	800629c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800626e:	4b41      	ldr	r3, [pc, #260]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_RCC_OscConfig+0x152>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d001      	beq.n	8006286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e1c7      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006286:	4b3b      	ldr	r3, [pc, #236]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	4937      	ldr	r1, [pc, #220]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 8006296:	4313      	orrs	r3, r2
 8006298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800629a:	e03a      	b.n	8006312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d020      	beq.n	80062e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062a4:	4b34      	ldr	r3, [pc, #208]	@ (8006378 <HAL_RCC_OscConfig+0x244>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062aa:	f7fd ff27 	bl	80040fc <HAL_GetTick>
 80062ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062b0:	e008      	b.n	80062c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062b2:	f7fd ff23 	bl	80040fc <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e1a8      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0f0      	beq.n	80062b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d0:	4b28      	ldr	r3, [pc, #160]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	4925      	ldr	r1, [pc, #148]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	600b      	str	r3, [r1, #0]
 80062e4:	e015      	b.n	8006312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062e6:	4b24      	ldr	r3, [pc, #144]	@ (8006378 <HAL_RCC_OscConfig+0x244>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ec:	f7fd ff06 	bl	80040fc <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062f4:	f7fd ff02 	bl	80040fc <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e187      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006306:	4b1b      	ldr	r3, [pc, #108]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f0      	bne.n	80062f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d036      	beq.n	800638c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d016      	beq.n	8006354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006326:	4b15      	ldr	r3, [pc, #84]	@ (800637c <HAL_RCC_OscConfig+0x248>)
 8006328:	2201      	movs	r2, #1
 800632a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632c:	f7fd fee6 	bl	80040fc <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006334:	f7fd fee2 	bl	80040fc <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e167      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006346:	4b0b      	ldr	r3, [pc, #44]	@ (8006374 <HAL_RCC_OscConfig+0x240>)
 8006348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0f0      	beq.n	8006334 <HAL_RCC_OscConfig+0x200>
 8006352:	e01b      	b.n	800638c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006354:	4b09      	ldr	r3, [pc, #36]	@ (800637c <HAL_RCC_OscConfig+0x248>)
 8006356:	2200      	movs	r2, #0
 8006358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800635a:	f7fd fecf 	bl	80040fc <HAL_GetTick>
 800635e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006360:	e00e      	b.n	8006380 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006362:	f7fd fecb 	bl	80040fc <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d907      	bls.n	8006380 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e150      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
 8006374:	40023800 	.word	0x40023800
 8006378:	42470000 	.word	0x42470000
 800637c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006380:	4b88      	ldr	r3, [pc, #544]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 8006382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1ea      	bne.n	8006362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8097 	beq.w	80064c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800639a:	2300      	movs	r3, #0
 800639c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800639e:	4b81      	ldr	r3, [pc, #516]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 80063a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10f      	bne.n	80063ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063aa:	2300      	movs	r3, #0
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	4b7d      	ldr	r3, [pc, #500]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 80063b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b2:	4a7c      	ldr	r2, [pc, #496]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 80063b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80063ba:	4b7a      	ldr	r3, [pc, #488]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 80063bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063c2:	60bb      	str	r3, [r7, #8]
 80063c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063c6:	2301      	movs	r3, #1
 80063c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ca:	4b77      	ldr	r3, [pc, #476]	@ (80065a8 <HAL_RCC_OscConfig+0x474>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d118      	bne.n	8006408 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063d6:	4b74      	ldr	r3, [pc, #464]	@ (80065a8 <HAL_RCC_OscConfig+0x474>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a73      	ldr	r2, [pc, #460]	@ (80065a8 <HAL_RCC_OscConfig+0x474>)
 80063dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063e2:	f7fd fe8b 	bl	80040fc <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063e8:	e008      	b.n	80063fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ea:	f7fd fe87 	bl	80040fc <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d901      	bls.n	80063fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e10c      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063fc:	4b6a      	ldr	r3, [pc, #424]	@ (80065a8 <HAL_RCC_OscConfig+0x474>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0f0      	beq.n	80063ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d106      	bne.n	800641e <HAL_RCC_OscConfig+0x2ea>
 8006410:	4b64      	ldr	r3, [pc, #400]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 8006412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006414:	4a63      	ldr	r2, [pc, #396]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 8006416:	f043 0301 	orr.w	r3, r3, #1
 800641a:	6713      	str	r3, [r2, #112]	@ 0x70
 800641c:	e01c      	b.n	8006458 <HAL_RCC_OscConfig+0x324>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b05      	cmp	r3, #5
 8006424:	d10c      	bne.n	8006440 <HAL_RCC_OscConfig+0x30c>
 8006426:	4b5f      	ldr	r3, [pc, #380]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 8006428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800642a:	4a5e      	ldr	r2, [pc, #376]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 800642c:	f043 0304 	orr.w	r3, r3, #4
 8006430:	6713      	str	r3, [r2, #112]	@ 0x70
 8006432:	4b5c      	ldr	r3, [pc, #368]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006436:	4a5b      	ldr	r2, [pc, #364]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 8006438:	f043 0301 	orr.w	r3, r3, #1
 800643c:	6713      	str	r3, [r2, #112]	@ 0x70
 800643e:	e00b      	b.n	8006458 <HAL_RCC_OscConfig+0x324>
 8006440:	4b58      	ldr	r3, [pc, #352]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 8006442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006444:	4a57      	ldr	r2, [pc, #348]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 8006446:	f023 0301 	bic.w	r3, r3, #1
 800644a:	6713      	str	r3, [r2, #112]	@ 0x70
 800644c:	4b55      	ldr	r3, [pc, #340]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 800644e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006450:	4a54      	ldr	r2, [pc, #336]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 8006452:	f023 0304 	bic.w	r3, r3, #4
 8006456:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d015      	beq.n	800648c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006460:	f7fd fe4c 	bl	80040fc <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006466:	e00a      	b.n	800647e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006468:	f7fd fe48 	bl	80040fc <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006476:	4293      	cmp	r3, r2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e0cb      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800647e:	4b49      	ldr	r3, [pc, #292]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 8006480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0ee      	beq.n	8006468 <HAL_RCC_OscConfig+0x334>
 800648a:	e014      	b.n	80064b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800648c:	f7fd fe36 	bl	80040fc <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006492:	e00a      	b.n	80064aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006494:	f7fd fe32 	bl	80040fc <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e0b5      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064aa:	4b3e      	ldr	r3, [pc, #248]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 80064ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1ee      	bne.n	8006494 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d105      	bne.n	80064c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064bc:	4b39      	ldr	r3, [pc, #228]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 80064be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c0:	4a38      	ldr	r2, [pc, #224]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 80064c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 80a1 	beq.w	8006614 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064d2:	4b34      	ldr	r3, [pc, #208]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 030c 	and.w	r3, r3, #12
 80064da:	2b08      	cmp	r3, #8
 80064dc:	d05c      	beq.n	8006598 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d141      	bne.n	800656a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064e6:	4b31      	ldr	r3, [pc, #196]	@ (80065ac <HAL_RCC_OscConfig+0x478>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ec:	f7fd fe06 	bl	80040fc <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064f4:	f7fd fe02 	bl	80040fc <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e087      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006506:	4b27      	ldr	r3, [pc, #156]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f0      	bne.n	80064f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69da      	ldr	r2, [r3, #28]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006520:	019b      	lsls	r3, r3, #6
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006528:	085b      	lsrs	r3, r3, #1
 800652a:	3b01      	subs	r3, #1
 800652c:	041b      	lsls	r3, r3, #16
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006534:	061b      	lsls	r3, r3, #24
 8006536:	491b      	ldr	r1, [pc, #108]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 8006538:	4313      	orrs	r3, r2
 800653a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800653c:	4b1b      	ldr	r3, [pc, #108]	@ (80065ac <HAL_RCC_OscConfig+0x478>)
 800653e:	2201      	movs	r2, #1
 8006540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006542:	f7fd fddb 	bl	80040fc <HAL_GetTick>
 8006546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006548:	e008      	b.n	800655c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800654a:	f7fd fdd7 	bl	80040fc <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d901      	bls.n	800655c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e05c      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800655c:	4b11      	ldr	r3, [pc, #68]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0f0      	beq.n	800654a <HAL_RCC_OscConfig+0x416>
 8006568:	e054      	b.n	8006614 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800656a:	4b10      	ldr	r3, [pc, #64]	@ (80065ac <HAL_RCC_OscConfig+0x478>)
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006570:	f7fd fdc4 	bl	80040fc <HAL_GetTick>
 8006574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006578:	f7fd fdc0 	bl	80040fc <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e045      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800658a:	4b06      	ldr	r3, [pc, #24]	@ (80065a4 <HAL_RCC_OscConfig+0x470>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1f0      	bne.n	8006578 <HAL_RCC_OscConfig+0x444>
 8006596:	e03d      	b.n	8006614 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d107      	bne.n	80065b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e038      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
 80065a4:	40023800 	.word	0x40023800
 80065a8:	40007000 	.word	0x40007000
 80065ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006620 <HAL_RCC_OscConfig+0x4ec>)
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d028      	beq.n	8006610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d121      	bne.n	8006610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d11a      	bne.n	8006610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80065e0:	4013      	ands	r3, r2
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80065e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d111      	bne.n	8006610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f6:	085b      	lsrs	r3, r3, #1
 80065f8:	3b01      	subs	r3, #1
 80065fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d107      	bne.n	8006610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800660c:	429a      	cmp	r2, r3
 800660e:	d001      	beq.n	8006614 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e000      	b.n	8006616 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40023800 	.word	0x40023800

08006624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e0cc      	b.n	80067d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006638:	4b68      	ldr	r3, [pc, #416]	@ (80067dc <HAL_RCC_ClockConfig+0x1b8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	429a      	cmp	r2, r3
 8006644:	d90c      	bls.n	8006660 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006646:	4b65      	ldr	r3, [pc, #404]	@ (80067dc <HAL_RCC_ClockConfig+0x1b8>)
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800664e:	4b63      	ldr	r3, [pc, #396]	@ (80067dc <HAL_RCC_ClockConfig+0x1b8>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	429a      	cmp	r2, r3
 800665a:	d001      	beq.n	8006660 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e0b8      	b.n	80067d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d020      	beq.n	80066ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006678:	4b59      	ldr	r3, [pc, #356]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	4a58      	ldr	r2, [pc, #352]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 800667e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006682:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0308 	and.w	r3, r3, #8
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006690:	4b53      	ldr	r3, [pc, #332]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	4a52      	ldr	r2, [pc, #328]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006696:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800669a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800669c:	4b50      	ldr	r3, [pc, #320]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	494d      	ldr	r1, [pc, #308]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d044      	beq.n	8006744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d107      	bne.n	80066d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066c2:	4b47      	ldr	r3, [pc, #284]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d119      	bne.n	8006702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e07f      	b.n	80067d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d003      	beq.n	80066e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d107      	bne.n	80066f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066e2:	4b3f      	ldr	r3, [pc, #252]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e06f      	b.n	80067d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066f2:	4b3b      	ldr	r3, [pc, #236]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e067      	b.n	80067d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006702:	4b37      	ldr	r3, [pc, #220]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f023 0203 	bic.w	r2, r3, #3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	4934      	ldr	r1, [pc, #208]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006710:	4313      	orrs	r3, r2
 8006712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006714:	f7fd fcf2 	bl	80040fc <HAL_GetTick>
 8006718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800671a:	e00a      	b.n	8006732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800671c:	f7fd fcee 	bl	80040fc <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800672a:	4293      	cmp	r3, r2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e04f      	b.n	80067d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006732:	4b2b      	ldr	r3, [pc, #172]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 020c 	and.w	r2, r3, #12
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	429a      	cmp	r2, r3
 8006742:	d1eb      	bne.n	800671c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006744:	4b25      	ldr	r3, [pc, #148]	@ (80067dc <HAL_RCC_ClockConfig+0x1b8>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d20c      	bcs.n	800676c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006752:	4b22      	ldr	r3, [pc, #136]	@ (80067dc <HAL_RCC_ClockConfig+0x1b8>)
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800675a:	4b20      	ldr	r3, [pc, #128]	@ (80067dc <HAL_RCC_ClockConfig+0x1b8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d001      	beq.n	800676c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e032      	b.n	80067d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d008      	beq.n	800678a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006778:	4b19      	ldr	r3, [pc, #100]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	4916      	ldr	r1, [pc, #88]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006786:	4313      	orrs	r3, r2
 8006788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006796:	4b12      	ldr	r3, [pc, #72]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	490e      	ldr	r1, [pc, #56]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067aa:	f000 f821 	bl	80067f0 <HAL_RCC_GetSysClockFreq>
 80067ae:	4602      	mov	r2, r0
 80067b0:	4b0b      	ldr	r3, [pc, #44]	@ (80067e0 <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	091b      	lsrs	r3, r3, #4
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	490a      	ldr	r1, [pc, #40]	@ (80067e4 <HAL_RCC_ClockConfig+0x1c0>)
 80067bc:	5ccb      	ldrb	r3, [r1, r3]
 80067be:	fa22 f303 	lsr.w	r3, r2, r3
 80067c2:	4a09      	ldr	r2, [pc, #36]	@ (80067e8 <HAL_RCC_ClockConfig+0x1c4>)
 80067c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067c6:	4b09      	ldr	r3, [pc, #36]	@ (80067ec <HAL_RCC_ClockConfig+0x1c8>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fd fc52 	bl	8004074 <HAL_InitTick>

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	40023c00 	.word	0x40023c00
 80067e0:	40023800 	.word	0x40023800
 80067e4:	0800c380 	.word	0x0800c380
 80067e8:	2000000c 	.word	0x2000000c
 80067ec:	20000048 	.word	0x20000048

080067f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067f4:	b094      	sub	sp, #80	@ 0x50
 80067f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80067fc:	2300      	movs	r3, #0
 80067fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006800:	2300      	movs	r3, #0
 8006802:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006808:	4b79      	ldr	r3, [pc, #484]	@ (80069f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 030c 	and.w	r3, r3, #12
 8006810:	2b08      	cmp	r3, #8
 8006812:	d00d      	beq.n	8006830 <HAL_RCC_GetSysClockFreq+0x40>
 8006814:	2b08      	cmp	r3, #8
 8006816:	f200 80e1 	bhi.w	80069dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <HAL_RCC_GetSysClockFreq+0x34>
 800681e:	2b04      	cmp	r3, #4
 8006820:	d003      	beq.n	800682a <HAL_RCC_GetSysClockFreq+0x3a>
 8006822:	e0db      	b.n	80069dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006824:	4b73      	ldr	r3, [pc, #460]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006826:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006828:	e0db      	b.n	80069e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800682a:	4b73      	ldr	r3, [pc, #460]	@ (80069f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800682c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800682e:	e0d8      	b.n	80069e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006830:	4b6f      	ldr	r3, [pc, #444]	@ (80069f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006838:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800683a:	4b6d      	ldr	r3, [pc, #436]	@ (80069f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d063      	beq.n	800690e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006846:	4b6a      	ldr	r3, [pc, #424]	@ (80069f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	099b      	lsrs	r3, r3, #6
 800684c:	2200      	movs	r2, #0
 800684e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006850:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006858:	633b      	str	r3, [r7, #48]	@ 0x30
 800685a:	2300      	movs	r3, #0
 800685c:	637b      	str	r3, [r7, #52]	@ 0x34
 800685e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006862:	4622      	mov	r2, r4
 8006864:	462b      	mov	r3, r5
 8006866:	f04f 0000 	mov.w	r0, #0
 800686a:	f04f 0100 	mov.w	r1, #0
 800686e:	0159      	lsls	r1, r3, #5
 8006870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006874:	0150      	lsls	r0, r2, #5
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4621      	mov	r1, r4
 800687c:	1a51      	subs	r1, r2, r1
 800687e:	6139      	str	r1, [r7, #16]
 8006880:	4629      	mov	r1, r5
 8006882:	eb63 0301 	sbc.w	r3, r3, r1
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006894:	4659      	mov	r1, fp
 8006896:	018b      	lsls	r3, r1, #6
 8006898:	4651      	mov	r1, sl
 800689a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800689e:	4651      	mov	r1, sl
 80068a0:	018a      	lsls	r2, r1, #6
 80068a2:	4651      	mov	r1, sl
 80068a4:	ebb2 0801 	subs.w	r8, r2, r1
 80068a8:	4659      	mov	r1, fp
 80068aa:	eb63 0901 	sbc.w	r9, r3, r1
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	f04f 0300 	mov.w	r3, #0
 80068b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068c2:	4690      	mov	r8, r2
 80068c4:	4699      	mov	r9, r3
 80068c6:	4623      	mov	r3, r4
 80068c8:	eb18 0303 	adds.w	r3, r8, r3
 80068cc:	60bb      	str	r3, [r7, #8]
 80068ce:	462b      	mov	r3, r5
 80068d0:	eb49 0303 	adc.w	r3, r9, r3
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	f04f 0200 	mov.w	r2, #0
 80068da:	f04f 0300 	mov.w	r3, #0
 80068de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80068e2:	4629      	mov	r1, r5
 80068e4:	024b      	lsls	r3, r1, #9
 80068e6:	4621      	mov	r1, r4
 80068e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80068ec:	4621      	mov	r1, r4
 80068ee:	024a      	lsls	r2, r1, #9
 80068f0:	4610      	mov	r0, r2
 80068f2:	4619      	mov	r1, r3
 80068f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068f6:	2200      	movs	r2, #0
 80068f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006900:	f7fa f942 	bl	8000b88 <__aeabi_uldivmod>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4613      	mov	r3, r2
 800690a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800690c:	e058      	b.n	80069c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800690e:	4b38      	ldr	r3, [pc, #224]	@ (80069f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	099b      	lsrs	r3, r3, #6
 8006914:	2200      	movs	r2, #0
 8006916:	4618      	mov	r0, r3
 8006918:	4611      	mov	r1, r2
 800691a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800691e:	623b      	str	r3, [r7, #32]
 8006920:	2300      	movs	r3, #0
 8006922:	627b      	str	r3, [r7, #36]	@ 0x24
 8006924:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006928:	4642      	mov	r2, r8
 800692a:	464b      	mov	r3, r9
 800692c:	f04f 0000 	mov.w	r0, #0
 8006930:	f04f 0100 	mov.w	r1, #0
 8006934:	0159      	lsls	r1, r3, #5
 8006936:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800693a:	0150      	lsls	r0, r2, #5
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4641      	mov	r1, r8
 8006942:	ebb2 0a01 	subs.w	sl, r2, r1
 8006946:	4649      	mov	r1, r9
 8006948:	eb63 0b01 	sbc.w	fp, r3, r1
 800694c:	f04f 0200 	mov.w	r2, #0
 8006950:	f04f 0300 	mov.w	r3, #0
 8006954:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006958:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800695c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006960:	ebb2 040a 	subs.w	r4, r2, sl
 8006964:	eb63 050b 	sbc.w	r5, r3, fp
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	00eb      	lsls	r3, r5, #3
 8006972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006976:	00e2      	lsls	r2, r4, #3
 8006978:	4614      	mov	r4, r2
 800697a:	461d      	mov	r5, r3
 800697c:	4643      	mov	r3, r8
 800697e:	18e3      	adds	r3, r4, r3
 8006980:	603b      	str	r3, [r7, #0]
 8006982:	464b      	mov	r3, r9
 8006984:	eb45 0303 	adc.w	r3, r5, r3
 8006988:	607b      	str	r3, [r7, #4]
 800698a:	f04f 0200 	mov.w	r2, #0
 800698e:	f04f 0300 	mov.w	r3, #0
 8006992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006996:	4629      	mov	r1, r5
 8006998:	028b      	lsls	r3, r1, #10
 800699a:	4621      	mov	r1, r4
 800699c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069a0:	4621      	mov	r1, r4
 80069a2:	028a      	lsls	r2, r1, #10
 80069a4:	4610      	mov	r0, r2
 80069a6:	4619      	mov	r1, r3
 80069a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069aa:	2200      	movs	r2, #0
 80069ac:	61bb      	str	r3, [r7, #24]
 80069ae:	61fa      	str	r2, [r7, #28]
 80069b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069b4:	f7fa f8e8 	bl	8000b88 <__aeabi_uldivmod>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4613      	mov	r3, r2
 80069be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069c0:	4b0b      	ldr	r3, [pc, #44]	@ (80069f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	0c1b      	lsrs	r3, r3, #16
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	3301      	adds	r3, #1
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80069d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069da:	e002      	b.n	80069e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069dc:	4b05      	ldr	r3, [pc, #20]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80069de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3750      	adds	r7, #80	@ 0x50
 80069e8:	46bd      	mov	sp, r7
 80069ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ee:	bf00      	nop
 80069f0:	40023800 	.word	0x40023800
 80069f4:	00f42400 	.word	0x00f42400
 80069f8:	007a1200 	.word	0x007a1200

080069fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a00:	4b03      	ldr	r3, [pc, #12]	@ (8006a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a02:	681b      	ldr	r3, [r3, #0]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	2000000c 	.word	0x2000000c

08006a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a18:	f7ff fff0 	bl	80069fc <HAL_RCC_GetHCLKFreq>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	4b05      	ldr	r3, [pc, #20]	@ (8006a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	0a9b      	lsrs	r3, r3, #10
 8006a24:	f003 0307 	and.w	r3, r3, #7
 8006a28:	4903      	ldr	r1, [pc, #12]	@ (8006a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a2a:	5ccb      	ldrb	r3, [r1, r3]
 8006a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	40023800 	.word	0x40023800
 8006a38:	0800c390 	.word	0x0800c390

08006a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e07b      	b.n	8006b46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d108      	bne.n	8006a68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a5e:	d009      	beq.n	8006a74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	61da      	str	r2, [r3, #28]
 8006a66:	e005      	b.n	8006a74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fc f8c6 	bl	8002c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af8:	ea42 0103 	orr.w	r1, r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	0c1b      	lsrs	r3, r3, #16
 8006b12:	f003 0104 	and.w	r1, r3, #4
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1a:	f003 0210 	and.w	r2, r3, #16
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69da      	ldr	r2, [r3, #28]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b088      	sub	sp, #32
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	603b      	str	r3, [r7, #0]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <HAL_SPI_Transmit+0x22>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e126      	b.n	8006dbe <HAL_SPI_Transmit+0x270>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b78:	f7fd fac0 	bl	80040fc <HAL_GetTick>
 8006b7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d002      	beq.n	8006b94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b8e:	2302      	movs	r3, #2
 8006b90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b92:	e10b      	b.n	8006dac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <HAL_SPI_Transmit+0x52>
 8006b9a:	88fb      	ldrh	r3, [r7, #6]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ba4:	e102      	b.n	8006dac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2203      	movs	r2, #3
 8006baa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	88fa      	ldrh	r2, [r7, #6]
 8006bbe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	88fa      	ldrh	r2, [r7, #6]
 8006bc4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bec:	d10f      	bne.n	8006c0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c18:	2b40      	cmp	r3, #64	@ 0x40
 8006c1a:	d007      	beq.n	8006c2c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c34:	d14b      	bne.n	8006cce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <HAL_SPI_Transmit+0xf6>
 8006c3e:	8afb      	ldrh	r3, [r7, #22]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d13e      	bne.n	8006cc2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c48:	881a      	ldrh	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c54:	1c9a      	adds	r2, r3, #2
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c68:	e02b      	b.n	8006cc2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d112      	bne.n	8006c9e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c7c:	881a      	ldrh	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c88:	1c9a      	adds	r2, r3, #2
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006c9c:	e011      	b.n	8006cc2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c9e:	f7fd fa2d 	bl	80040fc <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d803      	bhi.n	8006cb6 <HAL_SPI_Transmit+0x168>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb4:	d102      	bne.n	8006cbc <HAL_SPI_Transmit+0x16e>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cc0:	e074      	b.n	8006dac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1ce      	bne.n	8006c6a <HAL_SPI_Transmit+0x11c>
 8006ccc:	e04c      	b.n	8006d68 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <HAL_SPI_Transmit+0x18e>
 8006cd6:	8afb      	ldrh	r3, [r7, #22]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d140      	bne.n	8006d5e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	330c      	adds	r3, #12
 8006ce6:	7812      	ldrb	r2, [r2, #0]
 8006ce8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d02:	e02c      	b.n	8006d5e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d113      	bne.n	8006d3a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	330c      	adds	r3, #12
 8006d1c:	7812      	ldrb	r2, [r2, #0]
 8006d1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006d38:	e011      	b.n	8006d5e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d3a:	f7fd f9df 	bl	80040fc <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d803      	bhi.n	8006d52 <HAL_SPI_Transmit+0x204>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d50:	d102      	bne.n	8006d58 <HAL_SPI_Transmit+0x20a>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d102      	bne.n	8006d5e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d5c:	e026      	b.n	8006dac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1cd      	bne.n	8006d04 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 f8b3 	bl	8006ed8 <SPI_EndRxTxTransaction>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d86:	2300      	movs	r3, #0
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	613b      	str	r3, [r7, #16]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	77fb      	strb	r3, [r7, #31]
 8006da8:	e000      	b.n	8006dac <HAL_SPI_Transmit+0x25e>
  }

error:
 8006daa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006dbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	603b      	str	r3, [r7, #0]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006dd8:	f7fd f990 	bl	80040fc <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de0:	1a9b      	subs	r3, r3, r2
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	4413      	add	r3, r2
 8006de6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006de8:	f7fd f988 	bl	80040fc <HAL_GetTick>
 8006dec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006dee:	4b39      	ldr	r3, [pc, #228]	@ (8006ed4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	015b      	lsls	r3, r3, #5
 8006df4:	0d1b      	lsrs	r3, r3, #20
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	fb02 f303 	mul.w	r3, r2, r3
 8006dfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dfe:	e054      	b.n	8006eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e06:	d050      	beq.n	8006eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e08:	f7fd f978 	bl	80040fc <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d902      	bls.n	8006e1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d13d      	bne.n	8006e9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e36:	d111      	bne.n	8006e5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e40:	d004      	beq.n	8006e4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e4a:	d107      	bne.n	8006e5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e64:	d10f      	bne.n	8006e86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e017      	b.n	8006eca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	bf0c      	ite	eq
 8006eba:	2301      	moveq	r3, #1
 8006ebc:	2300      	movne	r3, #0
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d19b      	bne.n	8006e00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3720      	adds	r7, #32
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	2000000c 	.word	0x2000000c

08006ed8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af02      	add	r7, sp, #8
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8006f54 <SPI_EndRxTxTransaction+0x7c>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8006f58 <SPI_EndRxTxTransaction+0x80>)
 8006eea:	fba2 2303 	umull	r2, r3, r2, r3
 8006eee:	0d5b      	lsrs	r3, r3, #21
 8006ef0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006ef4:	fb02 f303 	mul.w	r3, r2, r3
 8006ef8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f02:	d112      	bne.n	8006f2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2180      	movs	r1, #128	@ 0x80
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f7ff ff5a 	bl	8006dc8 <SPI_WaitFlagStateUntilTimeout>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d016      	beq.n	8006f48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f1e:	f043 0220 	orr.w	r2, r3, #32
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e00f      	b.n	8006f4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00a      	beq.n	8006f46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f40:	2b80      	cmp	r3, #128	@ 0x80
 8006f42:	d0f2      	beq.n	8006f2a <SPI_EndRxTxTransaction+0x52>
 8006f44:	e000      	b.n	8006f48 <SPI_EndRxTxTransaction+0x70>
        break;
 8006f46:	bf00      	nop
  }

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	2000000c 	.word	0x2000000c
 8006f58:	165e9f81 	.word	0x165e9f81

08006f5c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e034      	b.n	8006fdc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d106      	bne.n	8006f8c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f7fa fa28 	bl	80013dc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	3308      	adds	r3, #8
 8006f94:	4619      	mov	r1, r3
 8006f96:	4610      	mov	r0, r2
 8006f98:	f000 ffda 	bl	8007f50 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	68b9      	ldr	r1, [r7, #8]
 8006fa8:	f001 f824 	bl	8007ff4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6858      	ldr	r0, [r3, #4]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	f001 f859 	bl	8008070 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	6892      	ldr	r2, [r2, #8]
 8006fc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	6892      	ldr	r2, [r2, #8]
 8006fd2:	f041 0101 	orr.w	r1, r1, #1
 8006fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e041      	b.n	800707a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d106      	bne.n	8007010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7fc f87e 	bl	800310c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3304      	adds	r3, #4
 8007020:	4619      	mov	r1, r3
 8007022:	4610      	mov	r0, r2
 8007024:	f000 fc1a 	bl	800785c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
	...

08007084 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b01      	cmp	r3, #1
 8007096:	d001      	beq.n	800709c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e046      	b.n	800712a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a23      	ldr	r2, [pc, #140]	@ (8007138 <HAL_TIM_Base_Start+0xb4>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d022      	beq.n	80070f4 <HAL_TIM_Base_Start+0x70>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070b6:	d01d      	beq.n	80070f4 <HAL_TIM_Base_Start+0x70>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1f      	ldr	r2, [pc, #124]	@ (800713c <HAL_TIM_Base_Start+0xb8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d018      	beq.n	80070f4 <HAL_TIM_Base_Start+0x70>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a1e      	ldr	r2, [pc, #120]	@ (8007140 <HAL_TIM_Base_Start+0xbc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d013      	beq.n	80070f4 <HAL_TIM_Base_Start+0x70>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007144 <HAL_TIM_Base_Start+0xc0>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00e      	beq.n	80070f4 <HAL_TIM_Base_Start+0x70>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a1b      	ldr	r2, [pc, #108]	@ (8007148 <HAL_TIM_Base_Start+0xc4>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d009      	beq.n	80070f4 <HAL_TIM_Base_Start+0x70>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a19      	ldr	r2, [pc, #100]	@ (800714c <HAL_TIM_Base_Start+0xc8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d004      	beq.n	80070f4 <HAL_TIM_Base_Start+0x70>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a18      	ldr	r2, [pc, #96]	@ (8007150 <HAL_TIM_Base_Start+0xcc>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d111      	bne.n	8007118 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b06      	cmp	r3, #6
 8007104:	d010      	beq.n	8007128 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f042 0201 	orr.w	r2, r2, #1
 8007114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007116:	e007      	b.n	8007128 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0201 	orr.w	r2, r2, #1
 8007126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40010000 	.word	0x40010000
 800713c:	40000400 	.word	0x40000400
 8007140:	40000800 	.word	0x40000800
 8007144:	40000c00 	.word	0x40000c00
 8007148:	40010400 	.word	0x40010400
 800714c:	40014000 	.word	0x40014000
 8007150:	40001800 	.word	0x40001800

08007154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b01      	cmp	r3, #1
 8007166:	d001      	beq.n	800716c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e04e      	b.n	800720a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0201 	orr.w	r2, r2, #1
 8007182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a23      	ldr	r2, [pc, #140]	@ (8007218 <HAL_TIM_Base_Start_IT+0xc4>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d022      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x80>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007196:	d01d      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x80>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a1f      	ldr	r2, [pc, #124]	@ (800721c <HAL_TIM_Base_Start_IT+0xc8>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d018      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x80>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a1e      	ldr	r2, [pc, #120]	@ (8007220 <HAL_TIM_Base_Start_IT+0xcc>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d013      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x80>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a1c      	ldr	r2, [pc, #112]	@ (8007224 <HAL_TIM_Base_Start_IT+0xd0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00e      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x80>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007228 <HAL_TIM_Base_Start_IT+0xd4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d009      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x80>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a19      	ldr	r2, [pc, #100]	@ (800722c <HAL_TIM_Base_Start_IT+0xd8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d004      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x80>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a18      	ldr	r2, [pc, #96]	@ (8007230 <HAL_TIM_Base_Start_IT+0xdc>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d111      	bne.n	80071f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 0307 	and.w	r3, r3, #7
 80071de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b06      	cmp	r3, #6
 80071e4:	d010      	beq.n	8007208 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 0201 	orr.w	r2, r2, #1
 80071f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f6:	e007      	b.n	8007208 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40010000 	.word	0x40010000
 800721c:	40000400 	.word	0x40000400
 8007220:	40000800 	.word	0x40000800
 8007224:	40000c00 	.word	0x40000c00
 8007228:	40010400 	.word	0x40010400
 800722c:	40014000 	.word	0x40014000
 8007230:	40001800 	.word	0x40001800

08007234 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e041      	b.n	80072ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f839 	bl	80072d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3304      	adds	r3, #4
 8007270:	4619      	mov	r1, r3
 8007272:	4610      	mov	r0, r2
 8007274:	f000 faf2 	bl	800785c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b083      	sub	sp, #12
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072da:	bf00      	nop
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d122      	bne.n	8007342 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b02      	cmp	r3, #2
 8007308:	d11b      	bne.n	8007342 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f06f 0202 	mvn.w	r2, #2
 8007312:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	f003 0303 	and.w	r3, r3, #3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fa78 	bl	800781e <HAL_TIM_IC_CaptureCallback>
 800732e:	e005      	b.n	800733c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fa6a 	bl	800780a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa7b 	bl	8007832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b04      	cmp	r3, #4
 800734e:	d122      	bne.n	8007396 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f003 0304 	and.w	r3, r3, #4
 800735a:	2b04      	cmp	r3, #4
 800735c:	d11b      	bne.n	8007396 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f06f 0204 	mvn.w	r2, #4
 8007366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fa4e 	bl	800781e <HAL_TIM_IC_CaptureCallback>
 8007382:	e005      	b.n	8007390 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fa40 	bl	800780a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fa51 	bl	8007832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d122      	bne.n	80073ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f003 0308 	and.w	r3, r3, #8
 80073ae:	2b08      	cmp	r3, #8
 80073b0:	d11b      	bne.n	80073ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f06f 0208 	mvn.w	r2, #8
 80073ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2204      	movs	r2, #4
 80073c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	f003 0303 	and.w	r3, r3, #3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fa24 	bl	800781e <HAL_TIM_IC_CaptureCallback>
 80073d6:	e005      	b.n	80073e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fa16 	bl	800780a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa27 	bl	8007832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	f003 0310 	and.w	r3, r3, #16
 80073f4:	2b10      	cmp	r3, #16
 80073f6:	d122      	bne.n	800743e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f003 0310 	and.w	r3, r3, #16
 8007402:	2b10      	cmp	r3, #16
 8007404:	d11b      	bne.n	800743e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f06f 0210 	mvn.w	r2, #16
 800740e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2208      	movs	r2, #8
 8007414:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f9fa 	bl	800781e <HAL_TIM_IC_CaptureCallback>
 800742a:	e005      	b.n	8007438 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f9ec 	bl	800780a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f9fd 	bl	8007832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	2b01      	cmp	r3, #1
 800744a:	d10e      	bne.n	800746a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b01      	cmp	r3, #1
 8007458:	d107      	bne.n	800746a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f06f 0201 	mvn.w	r2, #1
 8007462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7fb fb61 	bl	8002b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007474:	2b80      	cmp	r3, #128	@ 0x80
 8007476:	d10e      	bne.n	8007496 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007482:	2b80      	cmp	r3, #128	@ 0x80
 8007484:	d107      	bne.n	8007496 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800748e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fd53 	bl	8007f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a0:	2b40      	cmp	r3, #64	@ 0x40
 80074a2:	d10e      	bne.n	80074c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ae:	2b40      	cmp	r3, #64	@ 0x40
 80074b0:	d107      	bne.n	80074c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f9c2 	bl	8007846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d10e      	bne.n	80074ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b20      	cmp	r3, #32
 80074dc:	d107      	bne.n	80074ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f06f 0220 	mvn.w	r2, #32
 80074e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fd1d 	bl	8007f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074ee:	bf00      	nop
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800750e:	2b01      	cmp	r3, #1
 8007510:	d101      	bne.n	8007516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007512:	2302      	movs	r3, #2
 8007514:	e0ae      	b.n	8007674 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b0c      	cmp	r3, #12
 8007522:	f200 809f 	bhi.w	8007664 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007526:	a201      	add	r2, pc, #4	@ (adr r2, 800752c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	08007561 	.word	0x08007561
 8007530:	08007665 	.word	0x08007665
 8007534:	08007665 	.word	0x08007665
 8007538:	08007665 	.word	0x08007665
 800753c:	080075a1 	.word	0x080075a1
 8007540:	08007665 	.word	0x08007665
 8007544:	08007665 	.word	0x08007665
 8007548:	08007665 	.word	0x08007665
 800754c:	080075e3 	.word	0x080075e3
 8007550:	08007665 	.word	0x08007665
 8007554:	08007665 	.word	0x08007665
 8007558:	08007665 	.word	0x08007665
 800755c:	08007623 	.word	0x08007623
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68b9      	ldr	r1, [r7, #8]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fa18 	bl	800799c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0208 	orr.w	r2, r2, #8
 800757a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0204 	bic.w	r2, r2, #4
 800758a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6999      	ldr	r1, [r3, #24]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	691a      	ldr	r2, [r3, #16]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	619a      	str	r2, [r3, #24]
      break;
 800759e:	e064      	b.n	800766a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fa68 	bl	8007a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699a      	ldr	r2, [r3, #24]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6999      	ldr	r1, [r3, #24]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	021a      	lsls	r2, r3, #8
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	619a      	str	r2, [r3, #24]
      break;
 80075e0:	e043      	b.n	800766a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68b9      	ldr	r1, [r7, #8]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fabd 	bl	8007b68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69da      	ldr	r2, [r3, #28]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f042 0208 	orr.w	r2, r2, #8
 80075fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69da      	ldr	r2, [r3, #28]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0204 	bic.w	r2, r2, #4
 800760c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69d9      	ldr	r1, [r3, #28]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	61da      	str	r2, [r3, #28]
      break;
 8007620:	e023      	b.n	800766a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68b9      	ldr	r1, [r7, #8]
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fb11 	bl	8007c50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	69da      	ldr	r2, [r3, #28]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800763c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69da      	ldr	r2, [r3, #28]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800764c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69d9      	ldr	r1, [r3, #28]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	021a      	lsls	r2, r3, #8
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	61da      	str	r2, [r3, #28]
      break;
 8007662:	e002      	b.n	800766a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	75fb      	strb	r3, [r7, #23]
      break;
 8007668:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007672:	7dfb      	ldrb	r3, [r7, #23]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_TIM_ConfigClockSource+0x1c>
 8007694:	2302      	movs	r3, #2
 8007696:	e0b4      	b.n	8007802 <HAL_TIM_ConfigClockSource+0x186>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80076b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076d0:	d03e      	beq.n	8007750 <HAL_TIM_ConfigClockSource+0xd4>
 80076d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076d6:	f200 8087 	bhi.w	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 80076da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076de:	f000 8086 	beq.w	80077ee <HAL_TIM_ConfigClockSource+0x172>
 80076e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e6:	d87f      	bhi.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 80076e8:	2b70      	cmp	r3, #112	@ 0x70
 80076ea:	d01a      	beq.n	8007722 <HAL_TIM_ConfigClockSource+0xa6>
 80076ec:	2b70      	cmp	r3, #112	@ 0x70
 80076ee:	d87b      	bhi.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 80076f0:	2b60      	cmp	r3, #96	@ 0x60
 80076f2:	d050      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0x11a>
 80076f4:	2b60      	cmp	r3, #96	@ 0x60
 80076f6:	d877      	bhi.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 80076f8:	2b50      	cmp	r3, #80	@ 0x50
 80076fa:	d03c      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0xfa>
 80076fc:	2b50      	cmp	r3, #80	@ 0x50
 80076fe:	d873      	bhi.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007700:	2b40      	cmp	r3, #64	@ 0x40
 8007702:	d058      	beq.n	80077b6 <HAL_TIM_ConfigClockSource+0x13a>
 8007704:	2b40      	cmp	r3, #64	@ 0x40
 8007706:	d86f      	bhi.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007708:	2b30      	cmp	r3, #48	@ 0x30
 800770a:	d064      	beq.n	80077d6 <HAL_TIM_ConfigClockSource+0x15a>
 800770c:	2b30      	cmp	r3, #48	@ 0x30
 800770e:	d86b      	bhi.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007710:	2b20      	cmp	r3, #32
 8007712:	d060      	beq.n	80077d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007714:	2b20      	cmp	r3, #32
 8007716:	d867      	bhi.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007718:	2b00      	cmp	r3, #0
 800771a:	d05c      	beq.n	80077d6 <HAL_TIM_ConfigClockSource+0x15a>
 800771c:	2b10      	cmp	r3, #16
 800771e:	d05a      	beq.n	80077d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007720:	e062      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	6899      	ldr	r1, [r3, #8]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f000 fb5d 	bl	8007df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	609a      	str	r2, [r3, #8]
      break;
 800774e:	e04f      	b.n	80077f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6818      	ldr	r0, [r3, #0]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	6899      	ldr	r1, [r3, #8]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f000 fb46 	bl	8007df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689a      	ldr	r2, [r3, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007772:	609a      	str	r2, [r3, #8]
      break;
 8007774:	e03c      	b.n	80077f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	6859      	ldr	r1, [r3, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	461a      	mov	r2, r3
 8007784:	f000 faba 	bl	8007cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2150      	movs	r1, #80	@ 0x50
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fb13 	bl	8007dba <TIM_ITRx_SetConfig>
      break;
 8007794:	e02c      	b.n	80077f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	6859      	ldr	r1, [r3, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	461a      	mov	r2, r3
 80077a4:	f000 fad9 	bl	8007d5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2160      	movs	r1, #96	@ 0x60
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fb03 	bl	8007dba <TIM_ITRx_SetConfig>
      break;
 80077b4:	e01c      	b.n	80077f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	6859      	ldr	r1, [r3, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	461a      	mov	r2, r3
 80077c4:	f000 fa9a 	bl	8007cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2140      	movs	r1, #64	@ 0x40
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 faf3 	bl	8007dba <TIM_ITRx_SetConfig>
      break;
 80077d4:	e00c      	b.n	80077f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4619      	mov	r1, r3
 80077e0:	4610      	mov	r0, r2
 80077e2:	f000 faea 	bl	8007dba <TIM_ITRx_SetConfig>
      break;
 80077e6:	e003      	b.n	80077f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	73fb      	strb	r3, [r7, #15]
      break;
 80077ec:	e000      	b.n	80077f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007812:	bf00      	nop
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007826:	bf00      	nop
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800784e:	bf00      	nop
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
	...

0800785c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a40      	ldr	r2, [pc, #256]	@ (8007970 <TIM_Base_SetConfig+0x114>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d013      	beq.n	800789c <TIM_Base_SetConfig+0x40>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800787a:	d00f      	beq.n	800789c <TIM_Base_SetConfig+0x40>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a3d      	ldr	r2, [pc, #244]	@ (8007974 <TIM_Base_SetConfig+0x118>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d00b      	beq.n	800789c <TIM_Base_SetConfig+0x40>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a3c      	ldr	r2, [pc, #240]	@ (8007978 <TIM_Base_SetConfig+0x11c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d007      	beq.n	800789c <TIM_Base_SetConfig+0x40>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a3b      	ldr	r2, [pc, #236]	@ (800797c <TIM_Base_SetConfig+0x120>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d003      	beq.n	800789c <TIM_Base_SetConfig+0x40>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a3a      	ldr	r2, [pc, #232]	@ (8007980 <TIM_Base_SetConfig+0x124>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d108      	bne.n	80078ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a2f      	ldr	r2, [pc, #188]	@ (8007970 <TIM_Base_SetConfig+0x114>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d02b      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078bc:	d027      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a2c      	ldr	r2, [pc, #176]	@ (8007974 <TIM_Base_SetConfig+0x118>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d023      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a2b      	ldr	r2, [pc, #172]	@ (8007978 <TIM_Base_SetConfig+0x11c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d01f      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a2a      	ldr	r2, [pc, #168]	@ (800797c <TIM_Base_SetConfig+0x120>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d01b      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a29      	ldr	r2, [pc, #164]	@ (8007980 <TIM_Base_SetConfig+0x124>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d017      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a28      	ldr	r2, [pc, #160]	@ (8007984 <TIM_Base_SetConfig+0x128>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d013      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a27      	ldr	r2, [pc, #156]	@ (8007988 <TIM_Base_SetConfig+0x12c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d00f      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a26      	ldr	r2, [pc, #152]	@ (800798c <TIM_Base_SetConfig+0x130>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00b      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a25      	ldr	r2, [pc, #148]	@ (8007990 <TIM_Base_SetConfig+0x134>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d007      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a24      	ldr	r2, [pc, #144]	@ (8007994 <TIM_Base_SetConfig+0x138>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d003      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a23      	ldr	r2, [pc, #140]	@ (8007998 <TIM_Base_SetConfig+0x13c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d108      	bne.n	8007920 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	4313      	orrs	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	4313      	orrs	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a0a      	ldr	r2, [pc, #40]	@ (8007970 <TIM_Base_SetConfig+0x114>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d003      	beq.n	8007954 <TIM_Base_SetConfig+0xf8>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a0c      	ldr	r2, [pc, #48]	@ (8007980 <TIM_Base_SetConfig+0x124>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d103      	bne.n	800795c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	615a      	str	r2, [r3, #20]
}
 8007962:	bf00      	nop
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	40010000 	.word	0x40010000
 8007974:	40000400 	.word	0x40000400
 8007978:	40000800 	.word	0x40000800
 800797c:	40000c00 	.word	0x40000c00
 8007980:	40010400 	.word	0x40010400
 8007984:	40014000 	.word	0x40014000
 8007988:	40014400 	.word	0x40014400
 800798c:	40014800 	.word	0x40014800
 8007990:	40001800 	.word	0x40001800
 8007994:	40001c00 	.word	0x40001c00
 8007998:	40002000 	.word	0x40002000

0800799c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	f023 0201 	bic.w	r2, r3, #1
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0303 	bic.w	r3, r3, #3
 80079d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	f023 0302 	bic.w	r3, r3, #2
 80079e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a20      	ldr	r2, [pc, #128]	@ (8007a74 <TIM_OC1_SetConfig+0xd8>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d003      	beq.n	8007a00 <TIM_OC1_SetConfig+0x64>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a1f      	ldr	r2, [pc, #124]	@ (8007a78 <TIM_OC1_SetConfig+0xdc>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d10c      	bne.n	8007a1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f023 0308 	bic.w	r3, r3, #8
 8007a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f023 0304 	bic.w	r3, r3, #4
 8007a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a15      	ldr	r2, [pc, #84]	@ (8007a74 <TIM_OC1_SetConfig+0xd8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d003      	beq.n	8007a2a <TIM_OC1_SetConfig+0x8e>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a14      	ldr	r2, [pc, #80]	@ (8007a78 <TIM_OC1_SetConfig+0xdc>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d111      	bne.n	8007a4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	621a      	str	r2, [r3, #32]
}
 8007a68:	bf00      	nop
 8007a6a:	371c      	adds	r7, #28
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	40010000 	.word	0x40010000
 8007a78:	40010400 	.word	0x40010400

08007a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	f023 0210 	bic.w	r2, r3, #16
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	021b      	lsls	r3, r3, #8
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f023 0320 	bic.w	r3, r3, #32
 8007ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	011b      	lsls	r3, r3, #4
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a22      	ldr	r2, [pc, #136]	@ (8007b60 <TIM_OC2_SetConfig+0xe4>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d003      	beq.n	8007ae4 <TIM_OC2_SetConfig+0x68>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a21      	ldr	r2, [pc, #132]	@ (8007b64 <TIM_OC2_SetConfig+0xe8>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d10d      	bne.n	8007b00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	011b      	lsls	r3, r3, #4
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007afe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a17      	ldr	r2, [pc, #92]	@ (8007b60 <TIM_OC2_SetConfig+0xe4>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d003      	beq.n	8007b10 <TIM_OC2_SetConfig+0x94>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a16      	ldr	r2, [pc, #88]	@ (8007b64 <TIM_OC2_SetConfig+0xe8>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d113      	bne.n	8007b38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	621a      	str	r2, [r3, #32]
}
 8007b52:	bf00      	nop
 8007b54:	371c      	adds	r7, #28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40010000 	.word	0x40010000
 8007b64:	40010400 	.word	0x40010400

08007b68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b087      	sub	sp, #28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	69db      	ldr	r3, [r3, #28]
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 0303 	bic.w	r3, r3, #3
 8007b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	021b      	lsls	r3, r3, #8
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a21      	ldr	r2, [pc, #132]	@ (8007c48 <TIM_OC3_SetConfig+0xe0>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d003      	beq.n	8007bce <TIM_OC3_SetConfig+0x66>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a20      	ldr	r2, [pc, #128]	@ (8007c4c <TIM_OC3_SetConfig+0xe4>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d10d      	bne.n	8007bea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a16      	ldr	r2, [pc, #88]	@ (8007c48 <TIM_OC3_SetConfig+0xe0>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d003      	beq.n	8007bfa <TIM_OC3_SetConfig+0x92>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a15      	ldr	r2, [pc, #84]	@ (8007c4c <TIM_OC3_SetConfig+0xe4>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d113      	bne.n	8007c22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	621a      	str	r2, [r3, #32]
}
 8007c3c:	bf00      	nop
 8007c3e:	371c      	adds	r7, #28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	40010000 	.word	0x40010000
 8007c4c:	40010400 	.word	0x40010400

08007c50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	021b      	lsls	r3, r3, #8
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	031b      	lsls	r3, r3, #12
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a12      	ldr	r2, [pc, #72]	@ (8007cf4 <TIM_OC4_SetConfig+0xa4>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d003      	beq.n	8007cb8 <TIM_OC4_SetConfig+0x68>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a11      	ldr	r2, [pc, #68]	@ (8007cf8 <TIM_OC4_SetConfig+0xa8>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d109      	bne.n	8007ccc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	019b      	lsls	r3, r3, #6
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	621a      	str	r2, [r3, #32]
}
 8007ce6:	bf00      	nop
 8007ce8:	371c      	adds	r7, #28
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	40010000 	.word	0x40010000
 8007cf8:	40010400 	.word	0x40010400

08007cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	f023 0201 	bic.w	r2, r3, #1
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	011b      	lsls	r3, r3, #4
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f023 030a 	bic.w	r3, r3, #10
 8007d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	621a      	str	r2, [r3, #32]
}
 8007d4e:	bf00      	nop
 8007d50:	371c      	adds	r7, #28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b087      	sub	sp, #28
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	f023 0210 	bic.w	r2, r3, #16
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6a1b      	ldr	r3, [r3, #32]
 8007d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	031b      	lsls	r3, r3, #12
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	621a      	str	r2, [r3, #32]
}
 8007dae:	bf00      	nop
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	f043 0307 	orr.w	r3, r3, #7
 8007ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	609a      	str	r2, [r3, #8]
}
 8007de4:	bf00      	nop
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	021a      	lsls	r2, r3, #8
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	431a      	orrs	r2, r3
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	609a      	str	r2, [r3, #8]
}
 8007e24:	bf00      	nop
 8007e26:	371c      	adds	r7, #28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d101      	bne.n	8007e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e44:	2302      	movs	r3, #2
 8007e46:	e05a      	b.n	8007efe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2202      	movs	r2, #2
 8007e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a21      	ldr	r2, [pc, #132]	@ (8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d022      	beq.n	8007ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e94:	d01d      	beq.n	8007ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8007f10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d018      	beq.n	8007ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8007f14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d013      	beq.n	8007ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a1a      	ldr	r2, [pc, #104]	@ (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d00e      	beq.n	8007ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a18      	ldr	r2, [pc, #96]	@ (8007f1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d009      	beq.n	8007ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a17      	ldr	r2, [pc, #92]	@ (8007f20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d004      	beq.n	8007ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a15      	ldr	r2, [pc, #84]	@ (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d10c      	bne.n	8007eec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	40010000 	.word	0x40010000
 8007f10:	40000400 	.word	0x40000400
 8007f14:	40000800 	.word	0x40000800
 8007f18:	40000c00 	.word	0x40000c00
 8007f1c:	40010400 	.word	0x40010400
 8007f20:	40014000 	.word	0x40014000
 8007f24:	40001800 	.word	0x40001800

08007f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f68:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4b20      	ldr	r3, [pc, #128]	@ (8007ff0 <FSMC_NORSRAM_Init+0xa0>)
 8007f6e:	4013      	ands	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007f7a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007f80:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007f86:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007f8c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007f92:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007f98:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007f9e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 8007fa4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 8007faa:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8007fb0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 8007fb6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8007fbc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	2b08      	cmp	r3, #8
 8007fca:	d103      	bne.n	8007fd4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fd2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68f9      	ldr	r1, [r7, #12]
 8007fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	fff00080 	.word	0xfff00080

08007ff4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b087      	sub	sp, #28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008016:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008022:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800802a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008032:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	3b01      	subs	r3, #1
 800803a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800803c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	3b02      	subs	r3, #2
 8008044:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008046:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800804c:	4313      	orrs	r3, r2
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	4313      	orrs	r3, r2
 8008052:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6979      	ldr	r1, [r7, #20]
 800805c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
	...

08008070 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008088:	d122      	bne.n	80080d0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008092:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	4b15      	ldr	r3, [pc, #84]	@ (80080ec <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008098:	4013      	ands	r3, r2
 800809a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80080a6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80080ae:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80080b6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80080bc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	6979      	ldr	r1, [r7, #20]
 80080ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80080ce:	e005      	b.n	80080dc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80080d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	371c      	adds	r7, #28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	cff00000 	.word	0xcff00000

080080f0 <rand>:
 80080f0:	4b16      	ldr	r3, [pc, #88]	@ (800814c <rand+0x5c>)
 80080f2:	b510      	push	{r4, lr}
 80080f4:	681c      	ldr	r4, [r3, #0]
 80080f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80080f8:	b9b3      	cbnz	r3, 8008128 <rand+0x38>
 80080fa:	2018      	movs	r0, #24
 80080fc:	f000 fa20 	bl	8008540 <malloc>
 8008100:	4602      	mov	r2, r0
 8008102:	6320      	str	r0, [r4, #48]	@ 0x30
 8008104:	b920      	cbnz	r0, 8008110 <rand+0x20>
 8008106:	4b12      	ldr	r3, [pc, #72]	@ (8008150 <rand+0x60>)
 8008108:	4812      	ldr	r0, [pc, #72]	@ (8008154 <rand+0x64>)
 800810a:	2152      	movs	r1, #82	@ 0x52
 800810c:	f000 f9b0 	bl	8008470 <__assert_func>
 8008110:	4911      	ldr	r1, [pc, #68]	@ (8008158 <rand+0x68>)
 8008112:	4b12      	ldr	r3, [pc, #72]	@ (800815c <rand+0x6c>)
 8008114:	e9c0 1300 	strd	r1, r3, [r0]
 8008118:	4b11      	ldr	r3, [pc, #68]	@ (8008160 <rand+0x70>)
 800811a:	6083      	str	r3, [r0, #8]
 800811c:	230b      	movs	r3, #11
 800811e:	8183      	strh	r3, [r0, #12]
 8008120:	2100      	movs	r1, #0
 8008122:	2001      	movs	r0, #1
 8008124:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008128:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800812a:	480e      	ldr	r0, [pc, #56]	@ (8008164 <rand+0x74>)
 800812c:	690b      	ldr	r3, [r1, #16]
 800812e:	694c      	ldr	r4, [r1, #20]
 8008130:	4a0d      	ldr	r2, [pc, #52]	@ (8008168 <rand+0x78>)
 8008132:	4358      	muls	r0, r3
 8008134:	fb02 0004 	mla	r0, r2, r4, r0
 8008138:	fba3 3202 	umull	r3, r2, r3, r2
 800813c:	3301      	adds	r3, #1
 800813e:	eb40 0002 	adc.w	r0, r0, r2
 8008142:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008146:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800814a:	bd10      	pop	{r4, pc}
 800814c:	2000005c 	.word	0x2000005c
 8008150:	0800c3a0 	.word	0x0800c3a0
 8008154:	0800c3b7 	.word	0x0800c3b7
 8008158:	abcd330e 	.word	0xabcd330e
 800815c:	e66d1234 	.word	0xe66d1234
 8008160:	0005deec 	.word	0x0005deec
 8008164:	5851f42d 	.word	0x5851f42d
 8008168:	4c957f2d 	.word	0x4c957f2d

0800816c <std>:
 800816c:	2300      	movs	r3, #0
 800816e:	b510      	push	{r4, lr}
 8008170:	4604      	mov	r4, r0
 8008172:	e9c0 3300 	strd	r3, r3, [r0]
 8008176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800817a:	6083      	str	r3, [r0, #8]
 800817c:	8181      	strh	r1, [r0, #12]
 800817e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008180:	81c2      	strh	r2, [r0, #14]
 8008182:	6183      	str	r3, [r0, #24]
 8008184:	4619      	mov	r1, r3
 8008186:	2208      	movs	r2, #8
 8008188:	305c      	adds	r0, #92	@ 0x5c
 800818a:	f000 f8f4 	bl	8008376 <memset>
 800818e:	4b0d      	ldr	r3, [pc, #52]	@ (80081c4 <std+0x58>)
 8008190:	6263      	str	r3, [r4, #36]	@ 0x24
 8008192:	4b0d      	ldr	r3, [pc, #52]	@ (80081c8 <std+0x5c>)
 8008194:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008196:	4b0d      	ldr	r3, [pc, #52]	@ (80081cc <std+0x60>)
 8008198:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800819a:	4b0d      	ldr	r3, [pc, #52]	@ (80081d0 <std+0x64>)
 800819c:	6323      	str	r3, [r4, #48]	@ 0x30
 800819e:	4b0d      	ldr	r3, [pc, #52]	@ (80081d4 <std+0x68>)
 80081a0:	6224      	str	r4, [r4, #32]
 80081a2:	429c      	cmp	r4, r3
 80081a4:	d006      	beq.n	80081b4 <std+0x48>
 80081a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081aa:	4294      	cmp	r4, r2
 80081ac:	d002      	beq.n	80081b4 <std+0x48>
 80081ae:	33d0      	adds	r3, #208	@ 0xd0
 80081b0:	429c      	cmp	r4, r3
 80081b2:	d105      	bne.n	80081c0 <std+0x54>
 80081b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081bc:	f000 b954 	b.w	8008468 <__retarget_lock_init_recursive>
 80081c0:	bd10      	pop	{r4, pc}
 80081c2:	bf00      	nop
 80081c4:	080082f1 	.word	0x080082f1
 80081c8:	08008313 	.word	0x08008313
 80081cc:	0800834b 	.word	0x0800834b
 80081d0:	0800836f 	.word	0x0800836f
 80081d4:	200006a4 	.word	0x200006a4

080081d8 <stdio_exit_handler>:
 80081d8:	4a02      	ldr	r2, [pc, #8]	@ (80081e4 <stdio_exit_handler+0xc>)
 80081da:	4903      	ldr	r1, [pc, #12]	@ (80081e8 <stdio_exit_handler+0x10>)
 80081dc:	4803      	ldr	r0, [pc, #12]	@ (80081ec <stdio_exit_handler+0x14>)
 80081de:	f000 b869 	b.w	80082b4 <_fwalk_sglue>
 80081e2:	bf00      	nop
 80081e4:	20000050 	.word	0x20000050
 80081e8:	080087b5 	.word	0x080087b5
 80081ec:	20000060 	.word	0x20000060

080081f0 <cleanup_stdio>:
 80081f0:	6841      	ldr	r1, [r0, #4]
 80081f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008224 <cleanup_stdio+0x34>)
 80081f4:	4299      	cmp	r1, r3
 80081f6:	b510      	push	{r4, lr}
 80081f8:	4604      	mov	r4, r0
 80081fa:	d001      	beq.n	8008200 <cleanup_stdio+0x10>
 80081fc:	f000 fada 	bl	80087b4 <_fflush_r>
 8008200:	68a1      	ldr	r1, [r4, #8]
 8008202:	4b09      	ldr	r3, [pc, #36]	@ (8008228 <cleanup_stdio+0x38>)
 8008204:	4299      	cmp	r1, r3
 8008206:	d002      	beq.n	800820e <cleanup_stdio+0x1e>
 8008208:	4620      	mov	r0, r4
 800820a:	f000 fad3 	bl	80087b4 <_fflush_r>
 800820e:	68e1      	ldr	r1, [r4, #12]
 8008210:	4b06      	ldr	r3, [pc, #24]	@ (800822c <cleanup_stdio+0x3c>)
 8008212:	4299      	cmp	r1, r3
 8008214:	d004      	beq.n	8008220 <cleanup_stdio+0x30>
 8008216:	4620      	mov	r0, r4
 8008218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800821c:	f000 baca 	b.w	80087b4 <_fflush_r>
 8008220:	bd10      	pop	{r4, pc}
 8008222:	bf00      	nop
 8008224:	200006a4 	.word	0x200006a4
 8008228:	2000070c 	.word	0x2000070c
 800822c:	20000774 	.word	0x20000774

08008230 <global_stdio_init.part.0>:
 8008230:	b510      	push	{r4, lr}
 8008232:	4b0b      	ldr	r3, [pc, #44]	@ (8008260 <global_stdio_init.part.0+0x30>)
 8008234:	4c0b      	ldr	r4, [pc, #44]	@ (8008264 <global_stdio_init.part.0+0x34>)
 8008236:	4a0c      	ldr	r2, [pc, #48]	@ (8008268 <global_stdio_init.part.0+0x38>)
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	4620      	mov	r0, r4
 800823c:	2200      	movs	r2, #0
 800823e:	2104      	movs	r1, #4
 8008240:	f7ff ff94 	bl	800816c <std>
 8008244:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008248:	2201      	movs	r2, #1
 800824a:	2109      	movs	r1, #9
 800824c:	f7ff ff8e 	bl	800816c <std>
 8008250:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008254:	2202      	movs	r2, #2
 8008256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800825a:	2112      	movs	r1, #18
 800825c:	f7ff bf86 	b.w	800816c <std>
 8008260:	200007dc 	.word	0x200007dc
 8008264:	200006a4 	.word	0x200006a4
 8008268:	080081d9 	.word	0x080081d9

0800826c <__sfp_lock_acquire>:
 800826c:	4801      	ldr	r0, [pc, #4]	@ (8008274 <__sfp_lock_acquire+0x8>)
 800826e:	f000 b8fc 	b.w	800846a <__retarget_lock_acquire_recursive>
 8008272:	bf00      	nop
 8008274:	200007e5 	.word	0x200007e5

08008278 <__sfp_lock_release>:
 8008278:	4801      	ldr	r0, [pc, #4]	@ (8008280 <__sfp_lock_release+0x8>)
 800827a:	f000 b8f7 	b.w	800846c <__retarget_lock_release_recursive>
 800827e:	bf00      	nop
 8008280:	200007e5 	.word	0x200007e5

08008284 <__sinit>:
 8008284:	b510      	push	{r4, lr}
 8008286:	4604      	mov	r4, r0
 8008288:	f7ff fff0 	bl	800826c <__sfp_lock_acquire>
 800828c:	6a23      	ldr	r3, [r4, #32]
 800828e:	b11b      	cbz	r3, 8008298 <__sinit+0x14>
 8008290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008294:	f7ff bff0 	b.w	8008278 <__sfp_lock_release>
 8008298:	4b04      	ldr	r3, [pc, #16]	@ (80082ac <__sinit+0x28>)
 800829a:	6223      	str	r3, [r4, #32]
 800829c:	4b04      	ldr	r3, [pc, #16]	@ (80082b0 <__sinit+0x2c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1f5      	bne.n	8008290 <__sinit+0xc>
 80082a4:	f7ff ffc4 	bl	8008230 <global_stdio_init.part.0>
 80082a8:	e7f2      	b.n	8008290 <__sinit+0xc>
 80082aa:	bf00      	nop
 80082ac:	080081f1 	.word	0x080081f1
 80082b0:	200007dc 	.word	0x200007dc

080082b4 <_fwalk_sglue>:
 80082b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082b8:	4607      	mov	r7, r0
 80082ba:	4688      	mov	r8, r1
 80082bc:	4614      	mov	r4, r2
 80082be:	2600      	movs	r6, #0
 80082c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082c4:	f1b9 0901 	subs.w	r9, r9, #1
 80082c8:	d505      	bpl.n	80082d6 <_fwalk_sglue+0x22>
 80082ca:	6824      	ldr	r4, [r4, #0]
 80082cc:	2c00      	cmp	r4, #0
 80082ce:	d1f7      	bne.n	80082c0 <_fwalk_sglue+0xc>
 80082d0:	4630      	mov	r0, r6
 80082d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082d6:	89ab      	ldrh	r3, [r5, #12]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d907      	bls.n	80082ec <_fwalk_sglue+0x38>
 80082dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082e0:	3301      	adds	r3, #1
 80082e2:	d003      	beq.n	80082ec <_fwalk_sglue+0x38>
 80082e4:	4629      	mov	r1, r5
 80082e6:	4638      	mov	r0, r7
 80082e8:	47c0      	blx	r8
 80082ea:	4306      	orrs	r6, r0
 80082ec:	3568      	adds	r5, #104	@ 0x68
 80082ee:	e7e9      	b.n	80082c4 <_fwalk_sglue+0x10>

080082f0 <__sread>:
 80082f0:	b510      	push	{r4, lr}
 80082f2:	460c      	mov	r4, r1
 80082f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f8:	f000 f868 	bl	80083cc <_read_r>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	bfab      	itete	ge
 8008300:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008302:	89a3      	ldrhlt	r3, [r4, #12]
 8008304:	181b      	addge	r3, r3, r0
 8008306:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800830a:	bfac      	ite	ge
 800830c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800830e:	81a3      	strhlt	r3, [r4, #12]
 8008310:	bd10      	pop	{r4, pc}

08008312 <__swrite>:
 8008312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008316:	461f      	mov	r7, r3
 8008318:	898b      	ldrh	r3, [r1, #12]
 800831a:	05db      	lsls	r3, r3, #23
 800831c:	4605      	mov	r5, r0
 800831e:	460c      	mov	r4, r1
 8008320:	4616      	mov	r6, r2
 8008322:	d505      	bpl.n	8008330 <__swrite+0x1e>
 8008324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008328:	2302      	movs	r3, #2
 800832a:	2200      	movs	r2, #0
 800832c:	f000 f83c 	bl	80083a8 <_lseek_r>
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008336:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	4632      	mov	r2, r6
 800833e:	463b      	mov	r3, r7
 8008340:	4628      	mov	r0, r5
 8008342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008346:	f000 b853 	b.w	80083f0 <_write_r>

0800834a <__sseek>:
 800834a:	b510      	push	{r4, lr}
 800834c:	460c      	mov	r4, r1
 800834e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008352:	f000 f829 	bl	80083a8 <_lseek_r>
 8008356:	1c43      	adds	r3, r0, #1
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	bf15      	itete	ne
 800835c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800835e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008362:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008366:	81a3      	strheq	r3, [r4, #12]
 8008368:	bf18      	it	ne
 800836a:	81a3      	strhne	r3, [r4, #12]
 800836c:	bd10      	pop	{r4, pc}

0800836e <__sclose>:
 800836e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008372:	f000 b809 	b.w	8008388 <_close_r>

08008376 <memset>:
 8008376:	4402      	add	r2, r0
 8008378:	4603      	mov	r3, r0
 800837a:	4293      	cmp	r3, r2
 800837c:	d100      	bne.n	8008380 <memset+0xa>
 800837e:	4770      	bx	lr
 8008380:	f803 1b01 	strb.w	r1, [r3], #1
 8008384:	e7f9      	b.n	800837a <memset+0x4>
	...

08008388 <_close_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4d06      	ldr	r5, [pc, #24]	@ (80083a4 <_close_r+0x1c>)
 800838c:	2300      	movs	r3, #0
 800838e:	4604      	mov	r4, r0
 8008390:	4608      	mov	r0, r1
 8008392:	602b      	str	r3, [r5, #0]
 8008394:	f7fa fd54 	bl	8002e40 <_close>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d102      	bne.n	80083a2 <_close_r+0x1a>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	b103      	cbz	r3, 80083a2 <_close_r+0x1a>
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	200007e0 	.word	0x200007e0

080083a8 <_lseek_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d07      	ldr	r5, [pc, #28]	@ (80083c8 <_lseek_r+0x20>)
 80083ac:	4604      	mov	r4, r0
 80083ae:	4608      	mov	r0, r1
 80083b0:	4611      	mov	r1, r2
 80083b2:	2200      	movs	r2, #0
 80083b4:	602a      	str	r2, [r5, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	f7fa fd69 	bl	8002e8e <_lseek>
 80083bc:	1c43      	adds	r3, r0, #1
 80083be:	d102      	bne.n	80083c6 <_lseek_r+0x1e>
 80083c0:	682b      	ldr	r3, [r5, #0]
 80083c2:	b103      	cbz	r3, 80083c6 <_lseek_r+0x1e>
 80083c4:	6023      	str	r3, [r4, #0]
 80083c6:	bd38      	pop	{r3, r4, r5, pc}
 80083c8:	200007e0 	.word	0x200007e0

080083cc <_read_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4d07      	ldr	r5, [pc, #28]	@ (80083ec <_read_r+0x20>)
 80083d0:	4604      	mov	r4, r0
 80083d2:	4608      	mov	r0, r1
 80083d4:	4611      	mov	r1, r2
 80083d6:	2200      	movs	r2, #0
 80083d8:	602a      	str	r2, [r5, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	f7fa fcf7 	bl	8002dce <_read>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_read_r+0x1e>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_read_r+0x1e>
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	200007e0 	.word	0x200007e0

080083f0 <_write_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	@ (8008410 <_write_r+0x20>)
 80083f4:	4604      	mov	r4, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f7fa fd02 	bl	8002e08 <_write>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_write_r+0x1e>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_write_r+0x1e>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	200007e0 	.word	0x200007e0

08008414 <__errno>:
 8008414:	4b01      	ldr	r3, [pc, #4]	@ (800841c <__errno+0x8>)
 8008416:	6818      	ldr	r0, [r3, #0]
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	2000005c 	.word	0x2000005c

08008420 <__libc_init_array>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	4d0d      	ldr	r5, [pc, #52]	@ (8008458 <__libc_init_array+0x38>)
 8008424:	4c0d      	ldr	r4, [pc, #52]	@ (800845c <__libc_init_array+0x3c>)
 8008426:	1b64      	subs	r4, r4, r5
 8008428:	10a4      	asrs	r4, r4, #2
 800842a:	2600      	movs	r6, #0
 800842c:	42a6      	cmp	r6, r4
 800842e:	d109      	bne.n	8008444 <__libc_init_array+0x24>
 8008430:	4d0b      	ldr	r5, [pc, #44]	@ (8008460 <__libc_init_array+0x40>)
 8008432:	4c0c      	ldr	r4, [pc, #48]	@ (8008464 <__libc_init_array+0x44>)
 8008434:	f000 ff40 	bl	80092b8 <_init>
 8008438:	1b64      	subs	r4, r4, r5
 800843a:	10a4      	asrs	r4, r4, #2
 800843c:	2600      	movs	r6, #0
 800843e:	42a6      	cmp	r6, r4
 8008440:	d105      	bne.n	800844e <__libc_init_array+0x2e>
 8008442:	bd70      	pop	{r4, r5, r6, pc}
 8008444:	f855 3b04 	ldr.w	r3, [r5], #4
 8008448:	4798      	blx	r3
 800844a:	3601      	adds	r6, #1
 800844c:	e7ee      	b.n	800842c <__libc_init_array+0xc>
 800844e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008452:	4798      	blx	r3
 8008454:	3601      	adds	r6, #1
 8008456:	e7f2      	b.n	800843e <__libc_init_array+0x1e>
 8008458:	0800c488 	.word	0x0800c488
 800845c:	0800c488 	.word	0x0800c488
 8008460:	0800c488 	.word	0x0800c488
 8008464:	0800c48c 	.word	0x0800c48c

08008468 <__retarget_lock_init_recursive>:
 8008468:	4770      	bx	lr

0800846a <__retarget_lock_acquire_recursive>:
 800846a:	4770      	bx	lr

0800846c <__retarget_lock_release_recursive>:
 800846c:	4770      	bx	lr
	...

08008470 <__assert_func>:
 8008470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008472:	4614      	mov	r4, r2
 8008474:	461a      	mov	r2, r3
 8008476:	4b09      	ldr	r3, [pc, #36]	@ (800849c <__assert_func+0x2c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4605      	mov	r5, r0
 800847c:	68d8      	ldr	r0, [r3, #12]
 800847e:	b954      	cbnz	r4, 8008496 <__assert_func+0x26>
 8008480:	4b07      	ldr	r3, [pc, #28]	@ (80084a0 <__assert_func+0x30>)
 8008482:	461c      	mov	r4, r3
 8008484:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008488:	9100      	str	r1, [sp, #0]
 800848a:	462b      	mov	r3, r5
 800848c:	4905      	ldr	r1, [pc, #20]	@ (80084a4 <__assert_func+0x34>)
 800848e:	f000 f9b9 	bl	8008804 <fiprintf>
 8008492:	f000 f9d9 	bl	8008848 <abort>
 8008496:	4b04      	ldr	r3, [pc, #16]	@ (80084a8 <__assert_func+0x38>)
 8008498:	e7f4      	b.n	8008484 <__assert_func+0x14>
 800849a:	bf00      	nop
 800849c:	2000005c 	.word	0x2000005c
 80084a0:	0800c44a 	.word	0x0800c44a
 80084a4:	0800c41c 	.word	0x0800c41c
 80084a8:	0800c40f 	.word	0x0800c40f

080084ac <_free_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4605      	mov	r5, r0
 80084b0:	2900      	cmp	r1, #0
 80084b2:	d041      	beq.n	8008538 <_free_r+0x8c>
 80084b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084b8:	1f0c      	subs	r4, r1, #4
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	bfb8      	it	lt
 80084be:	18e4      	addlt	r4, r4, r3
 80084c0:	f000 f8e8 	bl	8008694 <__malloc_lock>
 80084c4:	4a1d      	ldr	r2, [pc, #116]	@ (800853c <_free_r+0x90>)
 80084c6:	6813      	ldr	r3, [r2, #0]
 80084c8:	b933      	cbnz	r3, 80084d8 <_free_r+0x2c>
 80084ca:	6063      	str	r3, [r4, #4]
 80084cc:	6014      	str	r4, [r2, #0]
 80084ce:	4628      	mov	r0, r5
 80084d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084d4:	f000 b8e4 	b.w	80086a0 <__malloc_unlock>
 80084d8:	42a3      	cmp	r3, r4
 80084da:	d908      	bls.n	80084ee <_free_r+0x42>
 80084dc:	6820      	ldr	r0, [r4, #0]
 80084de:	1821      	adds	r1, r4, r0
 80084e0:	428b      	cmp	r3, r1
 80084e2:	bf01      	itttt	eq
 80084e4:	6819      	ldreq	r1, [r3, #0]
 80084e6:	685b      	ldreq	r3, [r3, #4]
 80084e8:	1809      	addeq	r1, r1, r0
 80084ea:	6021      	streq	r1, [r4, #0]
 80084ec:	e7ed      	b.n	80084ca <_free_r+0x1e>
 80084ee:	461a      	mov	r2, r3
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	b10b      	cbz	r3, 80084f8 <_free_r+0x4c>
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	d9fa      	bls.n	80084ee <_free_r+0x42>
 80084f8:	6811      	ldr	r1, [r2, #0]
 80084fa:	1850      	adds	r0, r2, r1
 80084fc:	42a0      	cmp	r0, r4
 80084fe:	d10b      	bne.n	8008518 <_free_r+0x6c>
 8008500:	6820      	ldr	r0, [r4, #0]
 8008502:	4401      	add	r1, r0
 8008504:	1850      	adds	r0, r2, r1
 8008506:	4283      	cmp	r3, r0
 8008508:	6011      	str	r1, [r2, #0]
 800850a:	d1e0      	bne.n	80084ce <_free_r+0x22>
 800850c:	6818      	ldr	r0, [r3, #0]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	6053      	str	r3, [r2, #4]
 8008512:	4408      	add	r0, r1
 8008514:	6010      	str	r0, [r2, #0]
 8008516:	e7da      	b.n	80084ce <_free_r+0x22>
 8008518:	d902      	bls.n	8008520 <_free_r+0x74>
 800851a:	230c      	movs	r3, #12
 800851c:	602b      	str	r3, [r5, #0]
 800851e:	e7d6      	b.n	80084ce <_free_r+0x22>
 8008520:	6820      	ldr	r0, [r4, #0]
 8008522:	1821      	adds	r1, r4, r0
 8008524:	428b      	cmp	r3, r1
 8008526:	bf04      	itt	eq
 8008528:	6819      	ldreq	r1, [r3, #0]
 800852a:	685b      	ldreq	r3, [r3, #4]
 800852c:	6063      	str	r3, [r4, #4]
 800852e:	bf04      	itt	eq
 8008530:	1809      	addeq	r1, r1, r0
 8008532:	6021      	streq	r1, [r4, #0]
 8008534:	6054      	str	r4, [r2, #4]
 8008536:	e7ca      	b.n	80084ce <_free_r+0x22>
 8008538:	bd38      	pop	{r3, r4, r5, pc}
 800853a:	bf00      	nop
 800853c:	200007ec 	.word	0x200007ec

08008540 <malloc>:
 8008540:	4b02      	ldr	r3, [pc, #8]	@ (800854c <malloc+0xc>)
 8008542:	4601      	mov	r1, r0
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	f000 b825 	b.w	8008594 <_malloc_r>
 800854a:	bf00      	nop
 800854c:	2000005c 	.word	0x2000005c

08008550 <sbrk_aligned>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	4e0f      	ldr	r6, [pc, #60]	@ (8008590 <sbrk_aligned+0x40>)
 8008554:	460c      	mov	r4, r1
 8008556:	6831      	ldr	r1, [r6, #0]
 8008558:	4605      	mov	r5, r0
 800855a:	b911      	cbnz	r1, 8008562 <sbrk_aligned+0x12>
 800855c:	f000 f964 	bl	8008828 <_sbrk_r>
 8008560:	6030      	str	r0, [r6, #0]
 8008562:	4621      	mov	r1, r4
 8008564:	4628      	mov	r0, r5
 8008566:	f000 f95f 	bl	8008828 <_sbrk_r>
 800856a:	1c43      	adds	r3, r0, #1
 800856c:	d103      	bne.n	8008576 <sbrk_aligned+0x26>
 800856e:	f04f 34ff 	mov.w	r4, #4294967295
 8008572:	4620      	mov	r0, r4
 8008574:	bd70      	pop	{r4, r5, r6, pc}
 8008576:	1cc4      	adds	r4, r0, #3
 8008578:	f024 0403 	bic.w	r4, r4, #3
 800857c:	42a0      	cmp	r0, r4
 800857e:	d0f8      	beq.n	8008572 <sbrk_aligned+0x22>
 8008580:	1a21      	subs	r1, r4, r0
 8008582:	4628      	mov	r0, r5
 8008584:	f000 f950 	bl	8008828 <_sbrk_r>
 8008588:	3001      	adds	r0, #1
 800858a:	d1f2      	bne.n	8008572 <sbrk_aligned+0x22>
 800858c:	e7ef      	b.n	800856e <sbrk_aligned+0x1e>
 800858e:	bf00      	nop
 8008590:	200007e8 	.word	0x200007e8

08008594 <_malloc_r>:
 8008594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008598:	1ccd      	adds	r5, r1, #3
 800859a:	f025 0503 	bic.w	r5, r5, #3
 800859e:	3508      	adds	r5, #8
 80085a0:	2d0c      	cmp	r5, #12
 80085a2:	bf38      	it	cc
 80085a4:	250c      	movcc	r5, #12
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	4606      	mov	r6, r0
 80085aa:	db01      	blt.n	80085b0 <_malloc_r+0x1c>
 80085ac:	42a9      	cmp	r1, r5
 80085ae:	d904      	bls.n	80085ba <_malloc_r+0x26>
 80085b0:	230c      	movs	r3, #12
 80085b2:	6033      	str	r3, [r6, #0]
 80085b4:	2000      	movs	r0, #0
 80085b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008690 <_malloc_r+0xfc>
 80085be:	f000 f869 	bl	8008694 <__malloc_lock>
 80085c2:	f8d8 3000 	ldr.w	r3, [r8]
 80085c6:	461c      	mov	r4, r3
 80085c8:	bb44      	cbnz	r4, 800861c <_malloc_r+0x88>
 80085ca:	4629      	mov	r1, r5
 80085cc:	4630      	mov	r0, r6
 80085ce:	f7ff ffbf 	bl	8008550 <sbrk_aligned>
 80085d2:	1c43      	adds	r3, r0, #1
 80085d4:	4604      	mov	r4, r0
 80085d6:	d158      	bne.n	800868a <_malloc_r+0xf6>
 80085d8:	f8d8 4000 	ldr.w	r4, [r8]
 80085dc:	4627      	mov	r7, r4
 80085de:	2f00      	cmp	r7, #0
 80085e0:	d143      	bne.n	800866a <_malloc_r+0xd6>
 80085e2:	2c00      	cmp	r4, #0
 80085e4:	d04b      	beq.n	800867e <_malloc_r+0xea>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	4639      	mov	r1, r7
 80085ea:	4630      	mov	r0, r6
 80085ec:	eb04 0903 	add.w	r9, r4, r3
 80085f0:	f000 f91a 	bl	8008828 <_sbrk_r>
 80085f4:	4581      	cmp	r9, r0
 80085f6:	d142      	bne.n	800867e <_malloc_r+0xea>
 80085f8:	6821      	ldr	r1, [r4, #0]
 80085fa:	1a6d      	subs	r5, r5, r1
 80085fc:	4629      	mov	r1, r5
 80085fe:	4630      	mov	r0, r6
 8008600:	f7ff ffa6 	bl	8008550 <sbrk_aligned>
 8008604:	3001      	adds	r0, #1
 8008606:	d03a      	beq.n	800867e <_malloc_r+0xea>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	442b      	add	r3, r5
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	f8d8 3000 	ldr.w	r3, [r8]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	bb62      	cbnz	r2, 8008670 <_malloc_r+0xdc>
 8008616:	f8c8 7000 	str.w	r7, [r8]
 800861a:	e00f      	b.n	800863c <_malloc_r+0xa8>
 800861c:	6822      	ldr	r2, [r4, #0]
 800861e:	1b52      	subs	r2, r2, r5
 8008620:	d420      	bmi.n	8008664 <_malloc_r+0xd0>
 8008622:	2a0b      	cmp	r2, #11
 8008624:	d917      	bls.n	8008656 <_malloc_r+0xc2>
 8008626:	1961      	adds	r1, r4, r5
 8008628:	42a3      	cmp	r3, r4
 800862a:	6025      	str	r5, [r4, #0]
 800862c:	bf18      	it	ne
 800862e:	6059      	strne	r1, [r3, #4]
 8008630:	6863      	ldr	r3, [r4, #4]
 8008632:	bf08      	it	eq
 8008634:	f8c8 1000 	streq.w	r1, [r8]
 8008638:	5162      	str	r2, [r4, r5]
 800863a:	604b      	str	r3, [r1, #4]
 800863c:	4630      	mov	r0, r6
 800863e:	f000 f82f 	bl	80086a0 <__malloc_unlock>
 8008642:	f104 000b 	add.w	r0, r4, #11
 8008646:	1d23      	adds	r3, r4, #4
 8008648:	f020 0007 	bic.w	r0, r0, #7
 800864c:	1ac2      	subs	r2, r0, r3
 800864e:	bf1c      	itt	ne
 8008650:	1a1b      	subne	r3, r3, r0
 8008652:	50a3      	strne	r3, [r4, r2]
 8008654:	e7af      	b.n	80085b6 <_malloc_r+0x22>
 8008656:	6862      	ldr	r2, [r4, #4]
 8008658:	42a3      	cmp	r3, r4
 800865a:	bf0c      	ite	eq
 800865c:	f8c8 2000 	streq.w	r2, [r8]
 8008660:	605a      	strne	r2, [r3, #4]
 8008662:	e7eb      	b.n	800863c <_malloc_r+0xa8>
 8008664:	4623      	mov	r3, r4
 8008666:	6864      	ldr	r4, [r4, #4]
 8008668:	e7ae      	b.n	80085c8 <_malloc_r+0x34>
 800866a:	463c      	mov	r4, r7
 800866c:	687f      	ldr	r7, [r7, #4]
 800866e:	e7b6      	b.n	80085de <_malloc_r+0x4a>
 8008670:	461a      	mov	r2, r3
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	42a3      	cmp	r3, r4
 8008676:	d1fb      	bne.n	8008670 <_malloc_r+0xdc>
 8008678:	2300      	movs	r3, #0
 800867a:	6053      	str	r3, [r2, #4]
 800867c:	e7de      	b.n	800863c <_malloc_r+0xa8>
 800867e:	230c      	movs	r3, #12
 8008680:	6033      	str	r3, [r6, #0]
 8008682:	4630      	mov	r0, r6
 8008684:	f000 f80c 	bl	80086a0 <__malloc_unlock>
 8008688:	e794      	b.n	80085b4 <_malloc_r+0x20>
 800868a:	6005      	str	r5, [r0, #0]
 800868c:	e7d6      	b.n	800863c <_malloc_r+0xa8>
 800868e:	bf00      	nop
 8008690:	200007ec 	.word	0x200007ec

08008694 <__malloc_lock>:
 8008694:	4801      	ldr	r0, [pc, #4]	@ (800869c <__malloc_lock+0x8>)
 8008696:	f7ff bee8 	b.w	800846a <__retarget_lock_acquire_recursive>
 800869a:	bf00      	nop
 800869c:	200007e4 	.word	0x200007e4

080086a0 <__malloc_unlock>:
 80086a0:	4801      	ldr	r0, [pc, #4]	@ (80086a8 <__malloc_unlock+0x8>)
 80086a2:	f7ff bee3 	b.w	800846c <__retarget_lock_release_recursive>
 80086a6:	bf00      	nop
 80086a8:	200007e4 	.word	0x200007e4

080086ac <__sflush_r>:
 80086ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b4:	0716      	lsls	r6, r2, #28
 80086b6:	4605      	mov	r5, r0
 80086b8:	460c      	mov	r4, r1
 80086ba:	d454      	bmi.n	8008766 <__sflush_r+0xba>
 80086bc:	684b      	ldr	r3, [r1, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	dc02      	bgt.n	80086c8 <__sflush_r+0x1c>
 80086c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	dd48      	ble.n	800875a <__sflush_r+0xae>
 80086c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086ca:	2e00      	cmp	r6, #0
 80086cc:	d045      	beq.n	800875a <__sflush_r+0xae>
 80086ce:	2300      	movs	r3, #0
 80086d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80086d4:	682f      	ldr	r7, [r5, #0]
 80086d6:	6a21      	ldr	r1, [r4, #32]
 80086d8:	602b      	str	r3, [r5, #0]
 80086da:	d030      	beq.n	800873e <__sflush_r+0x92>
 80086dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086de:	89a3      	ldrh	r3, [r4, #12]
 80086e0:	0759      	lsls	r1, r3, #29
 80086e2:	d505      	bpl.n	80086f0 <__sflush_r+0x44>
 80086e4:	6863      	ldr	r3, [r4, #4]
 80086e6:	1ad2      	subs	r2, r2, r3
 80086e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086ea:	b10b      	cbz	r3, 80086f0 <__sflush_r+0x44>
 80086ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086ee:	1ad2      	subs	r2, r2, r3
 80086f0:	2300      	movs	r3, #0
 80086f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086f4:	6a21      	ldr	r1, [r4, #32]
 80086f6:	4628      	mov	r0, r5
 80086f8:	47b0      	blx	r6
 80086fa:	1c43      	adds	r3, r0, #1
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	d106      	bne.n	800870e <__sflush_r+0x62>
 8008700:	6829      	ldr	r1, [r5, #0]
 8008702:	291d      	cmp	r1, #29
 8008704:	d82b      	bhi.n	800875e <__sflush_r+0xb2>
 8008706:	4a2a      	ldr	r2, [pc, #168]	@ (80087b0 <__sflush_r+0x104>)
 8008708:	410a      	asrs	r2, r1
 800870a:	07d6      	lsls	r6, r2, #31
 800870c:	d427      	bmi.n	800875e <__sflush_r+0xb2>
 800870e:	2200      	movs	r2, #0
 8008710:	6062      	str	r2, [r4, #4]
 8008712:	04d9      	lsls	r1, r3, #19
 8008714:	6922      	ldr	r2, [r4, #16]
 8008716:	6022      	str	r2, [r4, #0]
 8008718:	d504      	bpl.n	8008724 <__sflush_r+0x78>
 800871a:	1c42      	adds	r2, r0, #1
 800871c:	d101      	bne.n	8008722 <__sflush_r+0x76>
 800871e:	682b      	ldr	r3, [r5, #0]
 8008720:	b903      	cbnz	r3, 8008724 <__sflush_r+0x78>
 8008722:	6560      	str	r0, [r4, #84]	@ 0x54
 8008724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008726:	602f      	str	r7, [r5, #0]
 8008728:	b1b9      	cbz	r1, 800875a <__sflush_r+0xae>
 800872a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800872e:	4299      	cmp	r1, r3
 8008730:	d002      	beq.n	8008738 <__sflush_r+0x8c>
 8008732:	4628      	mov	r0, r5
 8008734:	f7ff feba 	bl	80084ac <_free_r>
 8008738:	2300      	movs	r3, #0
 800873a:	6363      	str	r3, [r4, #52]	@ 0x34
 800873c:	e00d      	b.n	800875a <__sflush_r+0xae>
 800873e:	2301      	movs	r3, #1
 8008740:	4628      	mov	r0, r5
 8008742:	47b0      	blx	r6
 8008744:	4602      	mov	r2, r0
 8008746:	1c50      	adds	r0, r2, #1
 8008748:	d1c9      	bne.n	80086de <__sflush_r+0x32>
 800874a:	682b      	ldr	r3, [r5, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0c6      	beq.n	80086de <__sflush_r+0x32>
 8008750:	2b1d      	cmp	r3, #29
 8008752:	d001      	beq.n	8008758 <__sflush_r+0xac>
 8008754:	2b16      	cmp	r3, #22
 8008756:	d11e      	bne.n	8008796 <__sflush_r+0xea>
 8008758:	602f      	str	r7, [r5, #0]
 800875a:	2000      	movs	r0, #0
 800875c:	e022      	b.n	80087a4 <__sflush_r+0xf8>
 800875e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008762:	b21b      	sxth	r3, r3
 8008764:	e01b      	b.n	800879e <__sflush_r+0xf2>
 8008766:	690f      	ldr	r7, [r1, #16]
 8008768:	2f00      	cmp	r7, #0
 800876a:	d0f6      	beq.n	800875a <__sflush_r+0xae>
 800876c:	0793      	lsls	r3, r2, #30
 800876e:	680e      	ldr	r6, [r1, #0]
 8008770:	bf08      	it	eq
 8008772:	694b      	ldreq	r3, [r1, #20]
 8008774:	600f      	str	r7, [r1, #0]
 8008776:	bf18      	it	ne
 8008778:	2300      	movne	r3, #0
 800877a:	eba6 0807 	sub.w	r8, r6, r7
 800877e:	608b      	str	r3, [r1, #8]
 8008780:	f1b8 0f00 	cmp.w	r8, #0
 8008784:	dde9      	ble.n	800875a <__sflush_r+0xae>
 8008786:	6a21      	ldr	r1, [r4, #32]
 8008788:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800878a:	4643      	mov	r3, r8
 800878c:	463a      	mov	r2, r7
 800878e:	4628      	mov	r0, r5
 8008790:	47b0      	blx	r6
 8008792:	2800      	cmp	r0, #0
 8008794:	dc08      	bgt.n	80087a8 <__sflush_r+0xfc>
 8008796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800879a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800879e:	81a3      	strh	r3, [r4, #12]
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295
 80087a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a8:	4407      	add	r7, r0
 80087aa:	eba8 0800 	sub.w	r8, r8, r0
 80087ae:	e7e7      	b.n	8008780 <__sflush_r+0xd4>
 80087b0:	dfbffffe 	.word	0xdfbffffe

080087b4 <_fflush_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	690b      	ldr	r3, [r1, #16]
 80087b8:	4605      	mov	r5, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	b913      	cbnz	r3, 80087c4 <_fflush_r+0x10>
 80087be:	2500      	movs	r5, #0
 80087c0:	4628      	mov	r0, r5
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	b118      	cbz	r0, 80087ce <_fflush_r+0x1a>
 80087c6:	6a03      	ldr	r3, [r0, #32]
 80087c8:	b90b      	cbnz	r3, 80087ce <_fflush_r+0x1a>
 80087ca:	f7ff fd5b 	bl	8008284 <__sinit>
 80087ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d0f3      	beq.n	80087be <_fflush_r+0xa>
 80087d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80087d8:	07d0      	lsls	r0, r2, #31
 80087da:	d404      	bmi.n	80087e6 <_fflush_r+0x32>
 80087dc:	0599      	lsls	r1, r3, #22
 80087de:	d402      	bmi.n	80087e6 <_fflush_r+0x32>
 80087e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087e2:	f7ff fe42 	bl	800846a <__retarget_lock_acquire_recursive>
 80087e6:	4628      	mov	r0, r5
 80087e8:	4621      	mov	r1, r4
 80087ea:	f7ff ff5f 	bl	80086ac <__sflush_r>
 80087ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087f0:	07da      	lsls	r2, r3, #31
 80087f2:	4605      	mov	r5, r0
 80087f4:	d4e4      	bmi.n	80087c0 <_fflush_r+0xc>
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	059b      	lsls	r3, r3, #22
 80087fa:	d4e1      	bmi.n	80087c0 <_fflush_r+0xc>
 80087fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087fe:	f7ff fe35 	bl	800846c <__retarget_lock_release_recursive>
 8008802:	e7dd      	b.n	80087c0 <_fflush_r+0xc>

08008804 <fiprintf>:
 8008804:	b40e      	push	{r1, r2, r3}
 8008806:	b503      	push	{r0, r1, lr}
 8008808:	4601      	mov	r1, r0
 800880a:	ab03      	add	r3, sp, #12
 800880c:	4805      	ldr	r0, [pc, #20]	@ (8008824 <fiprintf+0x20>)
 800880e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008812:	6800      	ldr	r0, [r0, #0]
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	f000 f847 	bl	80088a8 <_vfiprintf_r>
 800881a:	b002      	add	sp, #8
 800881c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008820:	b003      	add	sp, #12
 8008822:	4770      	bx	lr
 8008824:	2000005c 	.word	0x2000005c

08008828 <_sbrk_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4d06      	ldr	r5, [pc, #24]	@ (8008844 <_sbrk_r+0x1c>)
 800882c:	2300      	movs	r3, #0
 800882e:	4604      	mov	r4, r0
 8008830:	4608      	mov	r0, r1
 8008832:	602b      	str	r3, [r5, #0]
 8008834:	f7fa fb38 	bl	8002ea8 <_sbrk>
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	d102      	bne.n	8008842 <_sbrk_r+0x1a>
 800883c:	682b      	ldr	r3, [r5, #0]
 800883e:	b103      	cbz	r3, 8008842 <_sbrk_r+0x1a>
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	bd38      	pop	{r3, r4, r5, pc}
 8008844:	200007e0 	.word	0x200007e0

08008848 <abort>:
 8008848:	b508      	push	{r3, lr}
 800884a:	2006      	movs	r0, #6
 800884c:	f000 fb8e 	bl	8008f6c <raise>
 8008850:	2001      	movs	r0, #1
 8008852:	f7fa fab1 	bl	8002db8 <_exit>

08008856 <__sfputc_r>:
 8008856:	6893      	ldr	r3, [r2, #8]
 8008858:	3b01      	subs	r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	b410      	push	{r4}
 800885e:	6093      	str	r3, [r2, #8]
 8008860:	da08      	bge.n	8008874 <__sfputc_r+0x1e>
 8008862:	6994      	ldr	r4, [r2, #24]
 8008864:	42a3      	cmp	r3, r4
 8008866:	db01      	blt.n	800886c <__sfputc_r+0x16>
 8008868:	290a      	cmp	r1, #10
 800886a:	d103      	bne.n	8008874 <__sfputc_r+0x1e>
 800886c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008870:	f000 bac0 	b.w	8008df4 <__swbuf_r>
 8008874:	6813      	ldr	r3, [r2, #0]
 8008876:	1c58      	adds	r0, r3, #1
 8008878:	6010      	str	r0, [r2, #0]
 800887a:	7019      	strb	r1, [r3, #0]
 800887c:	4608      	mov	r0, r1
 800887e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008882:	4770      	bx	lr

08008884 <__sfputs_r>:
 8008884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008886:	4606      	mov	r6, r0
 8008888:	460f      	mov	r7, r1
 800888a:	4614      	mov	r4, r2
 800888c:	18d5      	adds	r5, r2, r3
 800888e:	42ac      	cmp	r4, r5
 8008890:	d101      	bne.n	8008896 <__sfputs_r+0x12>
 8008892:	2000      	movs	r0, #0
 8008894:	e007      	b.n	80088a6 <__sfputs_r+0x22>
 8008896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889a:	463a      	mov	r2, r7
 800889c:	4630      	mov	r0, r6
 800889e:	f7ff ffda 	bl	8008856 <__sfputc_r>
 80088a2:	1c43      	adds	r3, r0, #1
 80088a4:	d1f3      	bne.n	800888e <__sfputs_r+0xa>
 80088a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088a8 <_vfiprintf_r>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	460d      	mov	r5, r1
 80088ae:	b09d      	sub	sp, #116	@ 0x74
 80088b0:	4614      	mov	r4, r2
 80088b2:	4698      	mov	r8, r3
 80088b4:	4606      	mov	r6, r0
 80088b6:	b118      	cbz	r0, 80088c0 <_vfiprintf_r+0x18>
 80088b8:	6a03      	ldr	r3, [r0, #32]
 80088ba:	b90b      	cbnz	r3, 80088c0 <_vfiprintf_r+0x18>
 80088bc:	f7ff fce2 	bl	8008284 <__sinit>
 80088c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088c2:	07d9      	lsls	r1, r3, #31
 80088c4:	d405      	bmi.n	80088d2 <_vfiprintf_r+0x2a>
 80088c6:	89ab      	ldrh	r3, [r5, #12]
 80088c8:	059a      	lsls	r2, r3, #22
 80088ca:	d402      	bmi.n	80088d2 <_vfiprintf_r+0x2a>
 80088cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ce:	f7ff fdcc 	bl	800846a <__retarget_lock_acquire_recursive>
 80088d2:	89ab      	ldrh	r3, [r5, #12]
 80088d4:	071b      	lsls	r3, r3, #28
 80088d6:	d501      	bpl.n	80088dc <_vfiprintf_r+0x34>
 80088d8:	692b      	ldr	r3, [r5, #16]
 80088da:	b99b      	cbnz	r3, 8008904 <_vfiprintf_r+0x5c>
 80088dc:	4629      	mov	r1, r5
 80088de:	4630      	mov	r0, r6
 80088e0:	f000 fac6 	bl	8008e70 <__swsetup_r>
 80088e4:	b170      	cbz	r0, 8008904 <_vfiprintf_r+0x5c>
 80088e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088e8:	07dc      	lsls	r4, r3, #31
 80088ea:	d504      	bpl.n	80088f6 <_vfiprintf_r+0x4e>
 80088ec:	f04f 30ff 	mov.w	r0, #4294967295
 80088f0:	b01d      	add	sp, #116	@ 0x74
 80088f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f6:	89ab      	ldrh	r3, [r5, #12]
 80088f8:	0598      	lsls	r0, r3, #22
 80088fa:	d4f7      	bmi.n	80088ec <_vfiprintf_r+0x44>
 80088fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088fe:	f7ff fdb5 	bl	800846c <__retarget_lock_release_recursive>
 8008902:	e7f3      	b.n	80088ec <_vfiprintf_r+0x44>
 8008904:	2300      	movs	r3, #0
 8008906:	9309      	str	r3, [sp, #36]	@ 0x24
 8008908:	2320      	movs	r3, #32
 800890a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800890e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008912:	2330      	movs	r3, #48	@ 0x30
 8008914:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ac4 <_vfiprintf_r+0x21c>
 8008918:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800891c:	f04f 0901 	mov.w	r9, #1
 8008920:	4623      	mov	r3, r4
 8008922:	469a      	mov	sl, r3
 8008924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008928:	b10a      	cbz	r2, 800892e <_vfiprintf_r+0x86>
 800892a:	2a25      	cmp	r2, #37	@ 0x25
 800892c:	d1f9      	bne.n	8008922 <_vfiprintf_r+0x7a>
 800892e:	ebba 0b04 	subs.w	fp, sl, r4
 8008932:	d00b      	beq.n	800894c <_vfiprintf_r+0xa4>
 8008934:	465b      	mov	r3, fp
 8008936:	4622      	mov	r2, r4
 8008938:	4629      	mov	r1, r5
 800893a:	4630      	mov	r0, r6
 800893c:	f7ff ffa2 	bl	8008884 <__sfputs_r>
 8008940:	3001      	adds	r0, #1
 8008942:	f000 80a7 	beq.w	8008a94 <_vfiprintf_r+0x1ec>
 8008946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008948:	445a      	add	r2, fp
 800894a:	9209      	str	r2, [sp, #36]	@ 0x24
 800894c:	f89a 3000 	ldrb.w	r3, [sl]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 809f 	beq.w	8008a94 <_vfiprintf_r+0x1ec>
 8008956:	2300      	movs	r3, #0
 8008958:	f04f 32ff 	mov.w	r2, #4294967295
 800895c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008960:	f10a 0a01 	add.w	sl, sl, #1
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	9307      	str	r3, [sp, #28]
 8008968:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800896c:	931a      	str	r3, [sp, #104]	@ 0x68
 800896e:	4654      	mov	r4, sl
 8008970:	2205      	movs	r2, #5
 8008972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008976:	4853      	ldr	r0, [pc, #332]	@ (8008ac4 <_vfiprintf_r+0x21c>)
 8008978:	f7f7 fc2a 	bl	80001d0 <memchr>
 800897c:	9a04      	ldr	r2, [sp, #16]
 800897e:	b9d8      	cbnz	r0, 80089b8 <_vfiprintf_r+0x110>
 8008980:	06d1      	lsls	r1, r2, #27
 8008982:	bf44      	itt	mi
 8008984:	2320      	movmi	r3, #32
 8008986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800898a:	0713      	lsls	r3, r2, #28
 800898c:	bf44      	itt	mi
 800898e:	232b      	movmi	r3, #43	@ 0x2b
 8008990:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008994:	f89a 3000 	ldrb.w	r3, [sl]
 8008998:	2b2a      	cmp	r3, #42	@ 0x2a
 800899a:	d015      	beq.n	80089c8 <_vfiprintf_r+0x120>
 800899c:	9a07      	ldr	r2, [sp, #28]
 800899e:	4654      	mov	r4, sl
 80089a0:	2000      	movs	r0, #0
 80089a2:	f04f 0c0a 	mov.w	ip, #10
 80089a6:	4621      	mov	r1, r4
 80089a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ac:	3b30      	subs	r3, #48	@ 0x30
 80089ae:	2b09      	cmp	r3, #9
 80089b0:	d94b      	bls.n	8008a4a <_vfiprintf_r+0x1a2>
 80089b2:	b1b0      	cbz	r0, 80089e2 <_vfiprintf_r+0x13a>
 80089b4:	9207      	str	r2, [sp, #28]
 80089b6:	e014      	b.n	80089e2 <_vfiprintf_r+0x13a>
 80089b8:	eba0 0308 	sub.w	r3, r0, r8
 80089bc:	fa09 f303 	lsl.w	r3, r9, r3
 80089c0:	4313      	orrs	r3, r2
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	46a2      	mov	sl, r4
 80089c6:	e7d2      	b.n	800896e <_vfiprintf_r+0xc6>
 80089c8:	9b03      	ldr	r3, [sp, #12]
 80089ca:	1d19      	adds	r1, r3, #4
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	9103      	str	r1, [sp, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfbb      	ittet	lt
 80089d4:	425b      	neglt	r3, r3
 80089d6:	f042 0202 	orrlt.w	r2, r2, #2
 80089da:	9307      	strge	r3, [sp, #28]
 80089dc:	9307      	strlt	r3, [sp, #28]
 80089de:	bfb8      	it	lt
 80089e0:	9204      	strlt	r2, [sp, #16]
 80089e2:	7823      	ldrb	r3, [r4, #0]
 80089e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80089e6:	d10a      	bne.n	80089fe <_vfiprintf_r+0x156>
 80089e8:	7863      	ldrb	r3, [r4, #1]
 80089ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80089ec:	d132      	bne.n	8008a54 <_vfiprintf_r+0x1ac>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	1d1a      	adds	r2, r3, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	9203      	str	r2, [sp, #12]
 80089f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089fa:	3402      	adds	r4, #2
 80089fc:	9305      	str	r3, [sp, #20]
 80089fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ad4 <_vfiprintf_r+0x22c>
 8008a02:	7821      	ldrb	r1, [r4, #0]
 8008a04:	2203      	movs	r2, #3
 8008a06:	4650      	mov	r0, sl
 8008a08:	f7f7 fbe2 	bl	80001d0 <memchr>
 8008a0c:	b138      	cbz	r0, 8008a1e <_vfiprintf_r+0x176>
 8008a0e:	9b04      	ldr	r3, [sp, #16]
 8008a10:	eba0 000a 	sub.w	r0, r0, sl
 8008a14:	2240      	movs	r2, #64	@ 0x40
 8008a16:	4082      	lsls	r2, r0
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	3401      	adds	r4, #1
 8008a1c:	9304      	str	r3, [sp, #16]
 8008a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a22:	4829      	ldr	r0, [pc, #164]	@ (8008ac8 <_vfiprintf_r+0x220>)
 8008a24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a28:	2206      	movs	r2, #6
 8008a2a:	f7f7 fbd1 	bl	80001d0 <memchr>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d03f      	beq.n	8008ab2 <_vfiprintf_r+0x20a>
 8008a32:	4b26      	ldr	r3, [pc, #152]	@ (8008acc <_vfiprintf_r+0x224>)
 8008a34:	bb1b      	cbnz	r3, 8008a7e <_vfiprintf_r+0x1d6>
 8008a36:	9b03      	ldr	r3, [sp, #12]
 8008a38:	3307      	adds	r3, #7
 8008a3a:	f023 0307 	bic.w	r3, r3, #7
 8008a3e:	3308      	adds	r3, #8
 8008a40:	9303      	str	r3, [sp, #12]
 8008a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a44:	443b      	add	r3, r7
 8008a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a48:	e76a      	b.n	8008920 <_vfiprintf_r+0x78>
 8008a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a4e:	460c      	mov	r4, r1
 8008a50:	2001      	movs	r0, #1
 8008a52:	e7a8      	b.n	80089a6 <_vfiprintf_r+0xfe>
 8008a54:	2300      	movs	r3, #0
 8008a56:	3401      	adds	r4, #1
 8008a58:	9305      	str	r3, [sp, #20]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	f04f 0c0a 	mov.w	ip, #10
 8008a60:	4620      	mov	r0, r4
 8008a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a66:	3a30      	subs	r2, #48	@ 0x30
 8008a68:	2a09      	cmp	r2, #9
 8008a6a:	d903      	bls.n	8008a74 <_vfiprintf_r+0x1cc>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0c6      	beq.n	80089fe <_vfiprintf_r+0x156>
 8008a70:	9105      	str	r1, [sp, #20]
 8008a72:	e7c4      	b.n	80089fe <_vfiprintf_r+0x156>
 8008a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a78:	4604      	mov	r4, r0
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e7f0      	b.n	8008a60 <_vfiprintf_r+0x1b8>
 8008a7e:	ab03      	add	r3, sp, #12
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	462a      	mov	r2, r5
 8008a84:	4b12      	ldr	r3, [pc, #72]	@ (8008ad0 <_vfiprintf_r+0x228>)
 8008a86:	a904      	add	r1, sp, #16
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f3af 8000 	nop.w
 8008a8e:	4607      	mov	r7, r0
 8008a90:	1c78      	adds	r0, r7, #1
 8008a92:	d1d6      	bne.n	8008a42 <_vfiprintf_r+0x19a>
 8008a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a96:	07d9      	lsls	r1, r3, #31
 8008a98:	d405      	bmi.n	8008aa6 <_vfiprintf_r+0x1fe>
 8008a9a:	89ab      	ldrh	r3, [r5, #12]
 8008a9c:	059a      	lsls	r2, r3, #22
 8008a9e:	d402      	bmi.n	8008aa6 <_vfiprintf_r+0x1fe>
 8008aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aa2:	f7ff fce3 	bl	800846c <__retarget_lock_release_recursive>
 8008aa6:	89ab      	ldrh	r3, [r5, #12]
 8008aa8:	065b      	lsls	r3, r3, #25
 8008aaa:	f53f af1f 	bmi.w	80088ec <_vfiprintf_r+0x44>
 8008aae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ab0:	e71e      	b.n	80088f0 <_vfiprintf_r+0x48>
 8008ab2:	ab03      	add	r3, sp, #12
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	462a      	mov	r2, r5
 8008ab8:	4b05      	ldr	r3, [pc, #20]	@ (8008ad0 <_vfiprintf_r+0x228>)
 8008aba:	a904      	add	r1, sp, #16
 8008abc:	4630      	mov	r0, r6
 8008abe:	f000 f879 	bl	8008bb4 <_printf_i>
 8008ac2:	e7e4      	b.n	8008a8e <_vfiprintf_r+0x1e6>
 8008ac4:	0800c44b 	.word	0x0800c44b
 8008ac8:	0800c455 	.word	0x0800c455
 8008acc:	00000000 	.word	0x00000000
 8008ad0:	08008885 	.word	0x08008885
 8008ad4:	0800c451 	.word	0x0800c451

08008ad8 <_printf_common>:
 8008ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008adc:	4616      	mov	r6, r2
 8008ade:	4698      	mov	r8, r3
 8008ae0:	688a      	ldr	r2, [r1, #8]
 8008ae2:	690b      	ldr	r3, [r1, #16]
 8008ae4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	bfb8      	it	lt
 8008aec:	4613      	movlt	r3, r2
 8008aee:	6033      	str	r3, [r6, #0]
 8008af0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008af4:	4607      	mov	r7, r0
 8008af6:	460c      	mov	r4, r1
 8008af8:	b10a      	cbz	r2, 8008afe <_printf_common+0x26>
 8008afa:	3301      	adds	r3, #1
 8008afc:	6033      	str	r3, [r6, #0]
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	0699      	lsls	r1, r3, #26
 8008b02:	bf42      	ittt	mi
 8008b04:	6833      	ldrmi	r3, [r6, #0]
 8008b06:	3302      	addmi	r3, #2
 8008b08:	6033      	strmi	r3, [r6, #0]
 8008b0a:	6825      	ldr	r5, [r4, #0]
 8008b0c:	f015 0506 	ands.w	r5, r5, #6
 8008b10:	d106      	bne.n	8008b20 <_printf_common+0x48>
 8008b12:	f104 0a19 	add.w	sl, r4, #25
 8008b16:	68e3      	ldr	r3, [r4, #12]
 8008b18:	6832      	ldr	r2, [r6, #0]
 8008b1a:	1a9b      	subs	r3, r3, r2
 8008b1c:	42ab      	cmp	r3, r5
 8008b1e:	dc26      	bgt.n	8008b6e <_printf_common+0x96>
 8008b20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b24:	6822      	ldr	r2, [r4, #0]
 8008b26:	3b00      	subs	r3, #0
 8008b28:	bf18      	it	ne
 8008b2a:	2301      	movne	r3, #1
 8008b2c:	0692      	lsls	r2, r2, #26
 8008b2e:	d42b      	bmi.n	8008b88 <_printf_common+0xb0>
 8008b30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b34:	4641      	mov	r1, r8
 8008b36:	4638      	mov	r0, r7
 8008b38:	47c8      	blx	r9
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	d01e      	beq.n	8008b7c <_printf_common+0xa4>
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	6922      	ldr	r2, [r4, #16]
 8008b42:	f003 0306 	and.w	r3, r3, #6
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	bf02      	ittt	eq
 8008b4a:	68e5      	ldreq	r5, [r4, #12]
 8008b4c:	6833      	ldreq	r3, [r6, #0]
 8008b4e:	1aed      	subeq	r5, r5, r3
 8008b50:	68a3      	ldr	r3, [r4, #8]
 8008b52:	bf0c      	ite	eq
 8008b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b58:	2500      	movne	r5, #0
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	bfc4      	itt	gt
 8008b5e:	1a9b      	subgt	r3, r3, r2
 8008b60:	18ed      	addgt	r5, r5, r3
 8008b62:	2600      	movs	r6, #0
 8008b64:	341a      	adds	r4, #26
 8008b66:	42b5      	cmp	r5, r6
 8008b68:	d11a      	bne.n	8008ba0 <_printf_common+0xc8>
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	e008      	b.n	8008b80 <_printf_common+0xa8>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	4652      	mov	r2, sl
 8008b72:	4641      	mov	r1, r8
 8008b74:	4638      	mov	r0, r7
 8008b76:	47c8      	blx	r9
 8008b78:	3001      	adds	r0, #1
 8008b7a:	d103      	bne.n	8008b84 <_printf_common+0xac>
 8008b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b84:	3501      	adds	r5, #1
 8008b86:	e7c6      	b.n	8008b16 <_printf_common+0x3e>
 8008b88:	18e1      	adds	r1, r4, r3
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	2030      	movs	r0, #48	@ 0x30
 8008b8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b92:	4422      	add	r2, r4
 8008b94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b9c:	3302      	adds	r3, #2
 8008b9e:	e7c7      	b.n	8008b30 <_printf_common+0x58>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	4641      	mov	r1, r8
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	47c8      	blx	r9
 8008baa:	3001      	adds	r0, #1
 8008bac:	d0e6      	beq.n	8008b7c <_printf_common+0xa4>
 8008bae:	3601      	adds	r6, #1
 8008bb0:	e7d9      	b.n	8008b66 <_printf_common+0x8e>
	...

08008bb4 <_printf_i>:
 8008bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb8:	7e0f      	ldrb	r7, [r1, #24]
 8008bba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008bbc:	2f78      	cmp	r7, #120	@ 0x78
 8008bbe:	4691      	mov	r9, r2
 8008bc0:	4680      	mov	r8, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	469a      	mov	sl, r3
 8008bc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008bca:	d807      	bhi.n	8008bdc <_printf_i+0x28>
 8008bcc:	2f62      	cmp	r7, #98	@ 0x62
 8008bce:	d80a      	bhi.n	8008be6 <_printf_i+0x32>
 8008bd0:	2f00      	cmp	r7, #0
 8008bd2:	f000 80d2 	beq.w	8008d7a <_printf_i+0x1c6>
 8008bd6:	2f58      	cmp	r7, #88	@ 0x58
 8008bd8:	f000 80b9 	beq.w	8008d4e <_printf_i+0x19a>
 8008bdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008be0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008be4:	e03a      	b.n	8008c5c <_printf_i+0xa8>
 8008be6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008bea:	2b15      	cmp	r3, #21
 8008bec:	d8f6      	bhi.n	8008bdc <_printf_i+0x28>
 8008bee:	a101      	add	r1, pc, #4	@ (adr r1, 8008bf4 <_printf_i+0x40>)
 8008bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bf4:	08008c4d 	.word	0x08008c4d
 8008bf8:	08008c61 	.word	0x08008c61
 8008bfc:	08008bdd 	.word	0x08008bdd
 8008c00:	08008bdd 	.word	0x08008bdd
 8008c04:	08008bdd 	.word	0x08008bdd
 8008c08:	08008bdd 	.word	0x08008bdd
 8008c0c:	08008c61 	.word	0x08008c61
 8008c10:	08008bdd 	.word	0x08008bdd
 8008c14:	08008bdd 	.word	0x08008bdd
 8008c18:	08008bdd 	.word	0x08008bdd
 8008c1c:	08008bdd 	.word	0x08008bdd
 8008c20:	08008d61 	.word	0x08008d61
 8008c24:	08008c8b 	.word	0x08008c8b
 8008c28:	08008d1b 	.word	0x08008d1b
 8008c2c:	08008bdd 	.word	0x08008bdd
 8008c30:	08008bdd 	.word	0x08008bdd
 8008c34:	08008d83 	.word	0x08008d83
 8008c38:	08008bdd 	.word	0x08008bdd
 8008c3c:	08008c8b 	.word	0x08008c8b
 8008c40:	08008bdd 	.word	0x08008bdd
 8008c44:	08008bdd 	.word	0x08008bdd
 8008c48:	08008d23 	.word	0x08008d23
 8008c4c:	6833      	ldr	r3, [r6, #0]
 8008c4e:	1d1a      	adds	r2, r3, #4
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6032      	str	r2, [r6, #0]
 8008c54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e09d      	b.n	8008d9c <_printf_i+0x1e8>
 8008c60:	6833      	ldr	r3, [r6, #0]
 8008c62:	6820      	ldr	r0, [r4, #0]
 8008c64:	1d19      	adds	r1, r3, #4
 8008c66:	6031      	str	r1, [r6, #0]
 8008c68:	0606      	lsls	r6, r0, #24
 8008c6a:	d501      	bpl.n	8008c70 <_printf_i+0xbc>
 8008c6c:	681d      	ldr	r5, [r3, #0]
 8008c6e:	e003      	b.n	8008c78 <_printf_i+0xc4>
 8008c70:	0645      	lsls	r5, r0, #25
 8008c72:	d5fb      	bpl.n	8008c6c <_printf_i+0xb8>
 8008c74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c78:	2d00      	cmp	r5, #0
 8008c7a:	da03      	bge.n	8008c84 <_printf_i+0xd0>
 8008c7c:	232d      	movs	r3, #45	@ 0x2d
 8008c7e:	426d      	negs	r5, r5
 8008c80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c84:	4859      	ldr	r0, [pc, #356]	@ (8008dec <_printf_i+0x238>)
 8008c86:	230a      	movs	r3, #10
 8008c88:	e011      	b.n	8008cae <_printf_i+0xfa>
 8008c8a:	6821      	ldr	r1, [r4, #0]
 8008c8c:	6833      	ldr	r3, [r6, #0]
 8008c8e:	0608      	lsls	r0, r1, #24
 8008c90:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c94:	d402      	bmi.n	8008c9c <_printf_i+0xe8>
 8008c96:	0649      	lsls	r1, r1, #25
 8008c98:	bf48      	it	mi
 8008c9a:	b2ad      	uxthmi	r5, r5
 8008c9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c9e:	4853      	ldr	r0, [pc, #332]	@ (8008dec <_printf_i+0x238>)
 8008ca0:	6033      	str	r3, [r6, #0]
 8008ca2:	bf14      	ite	ne
 8008ca4:	230a      	movne	r3, #10
 8008ca6:	2308      	moveq	r3, #8
 8008ca8:	2100      	movs	r1, #0
 8008caa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cae:	6866      	ldr	r6, [r4, #4]
 8008cb0:	60a6      	str	r6, [r4, #8]
 8008cb2:	2e00      	cmp	r6, #0
 8008cb4:	bfa2      	ittt	ge
 8008cb6:	6821      	ldrge	r1, [r4, #0]
 8008cb8:	f021 0104 	bicge.w	r1, r1, #4
 8008cbc:	6021      	strge	r1, [r4, #0]
 8008cbe:	b90d      	cbnz	r5, 8008cc4 <_printf_i+0x110>
 8008cc0:	2e00      	cmp	r6, #0
 8008cc2:	d04b      	beq.n	8008d5c <_printf_i+0x1a8>
 8008cc4:	4616      	mov	r6, r2
 8008cc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cca:	fb03 5711 	mls	r7, r3, r1, r5
 8008cce:	5dc7      	ldrb	r7, [r0, r7]
 8008cd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cd4:	462f      	mov	r7, r5
 8008cd6:	42bb      	cmp	r3, r7
 8008cd8:	460d      	mov	r5, r1
 8008cda:	d9f4      	bls.n	8008cc6 <_printf_i+0x112>
 8008cdc:	2b08      	cmp	r3, #8
 8008cde:	d10b      	bne.n	8008cf8 <_printf_i+0x144>
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	07df      	lsls	r7, r3, #31
 8008ce4:	d508      	bpl.n	8008cf8 <_printf_i+0x144>
 8008ce6:	6923      	ldr	r3, [r4, #16]
 8008ce8:	6861      	ldr	r1, [r4, #4]
 8008cea:	4299      	cmp	r1, r3
 8008cec:	bfde      	ittt	le
 8008cee:	2330      	movle	r3, #48	@ 0x30
 8008cf0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008cf4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008cf8:	1b92      	subs	r2, r2, r6
 8008cfa:	6122      	str	r2, [r4, #16]
 8008cfc:	f8cd a000 	str.w	sl, [sp]
 8008d00:	464b      	mov	r3, r9
 8008d02:	aa03      	add	r2, sp, #12
 8008d04:	4621      	mov	r1, r4
 8008d06:	4640      	mov	r0, r8
 8008d08:	f7ff fee6 	bl	8008ad8 <_printf_common>
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d14a      	bne.n	8008da6 <_printf_i+0x1f2>
 8008d10:	f04f 30ff 	mov.w	r0, #4294967295
 8008d14:	b004      	add	sp, #16
 8008d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	f043 0320 	orr.w	r3, r3, #32
 8008d20:	6023      	str	r3, [r4, #0]
 8008d22:	4833      	ldr	r0, [pc, #204]	@ (8008df0 <_printf_i+0x23c>)
 8008d24:	2778      	movs	r7, #120	@ 0x78
 8008d26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	6831      	ldr	r1, [r6, #0]
 8008d2e:	061f      	lsls	r7, r3, #24
 8008d30:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d34:	d402      	bmi.n	8008d3c <_printf_i+0x188>
 8008d36:	065f      	lsls	r7, r3, #25
 8008d38:	bf48      	it	mi
 8008d3a:	b2ad      	uxthmi	r5, r5
 8008d3c:	6031      	str	r1, [r6, #0]
 8008d3e:	07d9      	lsls	r1, r3, #31
 8008d40:	bf44      	itt	mi
 8008d42:	f043 0320 	orrmi.w	r3, r3, #32
 8008d46:	6023      	strmi	r3, [r4, #0]
 8008d48:	b11d      	cbz	r5, 8008d52 <_printf_i+0x19e>
 8008d4a:	2310      	movs	r3, #16
 8008d4c:	e7ac      	b.n	8008ca8 <_printf_i+0xf4>
 8008d4e:	4827      	ldr	r0, [pc, #156]	@ (8008dec <_printf_i+0x238>)
 8008d50:	e7e9      	b.n	8008d26 <_printf_i+0x172>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	f023 0320 	bic.w	r3, r3, #32
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	e7f6      	b.n	8008d4a <_printf_i+0x196>
 8008d5c:	4616      	mov	r6, r2
 8008d5e:	e7bd      	b.n	8008cdc <_printf_i+0x128>
 8008d60:	6833      	ldr	r3, [r6, #0]
 8008d62:	6825      	ldr	r5, [r4, #0]
 8008d64:	6961      	ldr	r1, [r4, #20]
 8008d66:	1d18      	adds	r0, r3, #4
 8008d68:	6030      	str	r0, [r6, #0]
 8008d6a:	062e      	lsls	r6, r5, #24
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	d501      	bpl.n	8008d74 <_printf_i+0x1c0>
 8008d70:	6019      	str	r1, [r3, #0]
 8008d72:	e002      	b.n	8008d7a <_printf_i+0x1c6>
 8008d74:	0668      	lsls	r0, r5, #25
 8008d76:	d5fb      	bpl.n	8008d70 <_printf_i+0x1bc>
 8008d78:	8019      	strh	r1, [r3, #0]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	6123      	str	r3, [r4, #16]
 8008d7e:	4616      	mov	r6, r2
 8008d80:	e7bc      	b.n	8008cfc <_printf_i+0x148>
 8008d82:	6833      	ldr	r3, [r6, #0]
 8008d84:	1d1a      	adds	r2, r3, #4
 8008d86:	6032      	str	r2, [r6, #0]
 8008d88:	681e      	ldr	r6, [r3, #0]
 8008d8a:	6862      	ldr	r2, [r4, #4]
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f7f7 fa1e 	bl	80001d0 <memchr>
 8008d94:	b108      	cbz	r0, 8008d9a <_printf_i+0x1e6>
 8008d96:	1b80      	subs	r0, r0, r6
 8008d98:	6060      	str	r0, [r4, #4]
 8008d9a:	6863      	ldr	r3, [r4, #4]
 8008d9c:	6123      	str	r3, [r4, #16]
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008da4:	e7aa      	b.n	8008cfc <_printf_i+0x148>
 8008da6:	6923      	ldr	r3, [r4, #16]
 8008da8:	4632      	mov	r2, r6
 8008daa:	4649      	mov	r1, r9
 8008dac:	4640      	mov	r0, r8
 8008dae:	47d0      	blx	sl
 8008db0:	3001      	adds	r0, #1
 8008db2:	d0ad      	beq.n	8008d10 <_printf_i+0x15c>
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	079b      	lsls	r3, r3, #30
 8008db8:	d413      	bmi.n	8008de2 <_printf_i+0x22e>
 8008dba:	68e0      	ldr	r0, [r4, #12]
 8008dbc:	9b03      	ldr	r3, [sp, #12]
 8008dbe:	4298      	cmp	r0, r3
 8008dc0:	bfb8      	it	lt
 8008dc2:	4618      	movlt	r0, r3
 8008dc4:	e7a6      	b.n	8008d14 <_printf_i+0x160>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	4632      	mov	r2, r6
 8008dca:	4649      	mov	r1, r9
 8008dcc:	4640      	mov	r0, r8
 8008dce:	47d0      	blx	sl
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d09d      	beq.n	8008d10 <_printf_i+0x15c>
 8008dd4:	3501      	adds	r5, #1
 8008dd6:	68e3      	ldr	r3, [r4, #12]
 8008dd8:	9903      	ldr	r1, [sp, #12]
 8008dda:	1a5b      	subs	r3, r3, r1
 8008ddc:	42ab      	cmp	r3, r5
 8008dde:	dcf2      	bgt.n	8008dc6 <_printf_i+0x212>
 8008de0:	e7eb      	b.n	8008dba <_printf_i+0x206>
 8008de2:	2500      	movs	r5, #0
 8008de4:	f104 0619 	add.w	r6, r4, #25
 8008de8:	e7f5      	b.n	8008dd6 <_printf_i+0x222>
 8008dea:	bf00      	nop
 8008dec:	0800c45c 	.word	0x0800c45c
 8008df0:	0800c46d 	.word	0x0800c46d

08008df4 <__swbuf_r>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	460e      	mov	r6, r1
 8008df8:	4614      	mov	r4, r2
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	b118      	cbz	r0, 8008e06 <__swbuf_r+0x12>
 8008dfe:	6a03      	ldr	r3, [r0, #32]
 8008e00:	b90b      	cbnz	r3, 8008e06 <__swbuf_r+0x12>
 8008e02:	f7ff fa3f 	bl	8008284 <__sinit>
 8008e06:	69a3      	ldr	r3, [r4, #24]
 8008e08:	60a3      	str	r3, [r4, #8]
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	071a      	lsls	r2, r3, #28
 8008e0e:	d501      	bpl.n	8008e14 <__swbuf_r+0x20>
 8008e10:	6923      	ldr	r3, [r4, #16]
 8008e12:	b943      	cbnz	r3, 8008e26 <__swbuf_r+0x32>
 8008e14:	4621      	mov	r1, r4
 8008e16:	4628      	mov	r0, r5
 8008e18:	f000 f82a 	bl	8008e70 <__swsetup_r>
 8008e1c:	b118      	cbz	r0, 8008e26 <__swbuf_r+0x32>
 8008e1e:	f04f 37ff 	mov.w	r7, #4294967295
 8008e22:	4638      	mov	r0, r7
 8008e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	6922      	ldr	r2, [r4, #16]
 8008e2a:	1a98      	subs	r0, r3, r2
 8008e2c:	6963      	ldr	r3, [r4, #20]
 8008e2e:	b2f6      	uxtb	r6, r6
 8008e30:	4283      	cmp	r3, r0
 8008e32:	4637      	mov	r7, r6
 8008e34:	dc05      	bgt.n	8008e42 <__swbuf_r+0x4e>
 8008e36:	4621      	mov	r1, r4
 8008e38:	4628      	mov	r0, r5
 8008e3a:	f7ff fcbb 	bl	80087b4 <_fflush_r>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d1ed      	bne.n	8008e1e <__swbuf_r+0x2a>
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	3b01      	subs	r3, #1
 8008e46:	60a3      	str	r3, [r4, #8]
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	1c5a      	adds	r2, r3, #1
 8008e4c:	6022      	str	r2, [r4, #0]
 8008e4e:	701e      	strb	r6, [r3, #0]
 8008e50:	6962      	ldr	r2, [r4, #20]
 8008e52:	1c43      	adds	r3, r0, #1
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d004      	beq.n	8008e62 <__swbuf_r+0x6e>
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	07db      	lsls	r3, r3, #31
 8008e5c:	d5e1      	bpl.n	8008e22 <__swbuf_r+0x2e>
 8008e5e:	2e0a      	cmp	r6, #10
 8008e60:	d1df      	bne.n	8008e22 <__swbuf_r+0x2e>
 8008e62:	4621      	mov	r1, r4
 8008e64:	4628      	mov	r0, r5
 8008e66:	f7ff fca5 	bl	80087b4 <_fflush_r>
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	d0d9      	beq.n	8008e22 <__swbuf_r+0x2e>
 8008e6e:	e7d6      	b.n	8008e1e <__swbuf_r+0x2a>

08008e70 <__swsetup_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4b29      	ldr	r3, [pc, #164]	@ (8008f18 <__swsetup_r+0xa8>)
 8008e74:	4605      	mov	r5, r0
 8008e76:	6818      	ldr	r0, [r3, #0]
 8008e78:	460c      	mov	r4, r1
 8008e7a:	b118      	cbz	r0, 8008e84 <__swsetup_r+0x14>
 8008e7c:	6a03      	ldr	r3, [r0, #32]
 8008e7e:	b90b      	cbnz	r3, 8008e84 <__swsetup_r+0x14>
 8008e80:	f7ff fa00 	bl	8008284 <__sinit>
 8008e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e88:	0719      	lsls	r1, r3, #28
 8008e8a:	d422      	bmi.n	8008ed2 <__swsetup_r+0x62>
 8008e8c:	06da      	lsls	r2, r3, #27
 8008e8e:	d407      	bmi.n	8008ea0 <__swsetup_r+0x30>
 8008e90:	2209      	movs	r2, #9
 8008e92:	602a      	str	r2, [r5, #0]
 8008e94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e98:	81a3      	strh	r3, [r4, #12]
 8008e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9e:	e033      	b.n	8008f08 <__swsetup_r+0x98>
 8008ea0:	0758      	lsls	r0, r3, #29
 8008ea2:	d512      	bpl.n	8008eca <__swsetup_r+0x5a>
 8008ea4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ea6:	b141      	cbz	r1, 8008eba <__swsetup_r+0x4a>
 8008ea8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008eac:	4299      	cmp	r1, r3
 8008eae:	d002      	beq.n	8008eb6 <__swsetup_r+0x46>
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f7ff fafb 	bl	80084ac <_free_r>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ec0:	81a3      	strh	r3, [r4, #12]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	6063      	str	r3, [r4, #4]
 8008ec6:	6923      	ldr	r3, [r4, #16]
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	f043 0308 	orr.w	r3, r3, #8
 8008ed0:	81a3      	strh	r3, [r4, #12]
 8008ed2:	6923      	ldr	r3, [r4, #16]
 8008ed4:	b94b      	cbnz	r3, 8008eea <__swsetup_r+0x7a>
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ee0:	d003      	beq.n	8008eea <__swsetup_r+0x7a>
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f000 f883 	bl	8008ff0 <__smakebuf_r>
 8008eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eee:	f013 0201 	ands.w	r2, r3, #1
 8008ef2:	d00a      	beq.n	8008f0a <__swsetup_r+0x9a>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	60a2      	str	r2, [r4, #8]
 8008ef8:	6962      	ldr	r2, [r4, #20]
 8008efa:	4252      	negs	r2, r2
 8008efc:	61a2      	str	r2, [r4, #24]
 8008efe:	6922      	ldr	r2, [r4, #16]
 8008f00:	b942      	cbnz	r2, 8008f14 <__swsetup_r+0xa4>
 8008f02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f06:	d1c5      	bne.n	8008e94 <__swsetup_r+0x24>
 8008f08:	bd38      	pop	{r3, r4, r5, pc}
 8008f0a:	0799      	lsls	r1, r3, #30
 8008f0c:	bf58      	it	pl
 8008f0e:	6962      	ldrpl	r2, [r4, #20]
 8008f10:	60a2      	str	r2, [r4, #8]
 8008f12:	e7f4      	b.n	8008efe <__swsetup_r+0x8e>
 8008f14:	2000      	movs	r0, #0
 8008f16:	e7f7      	b.n	8008f08 <__swsetup_r+0x98>
 8008f18:	2000005c 	.word	0x2000005c

08008f1c <_raise_r>:
 8008f1c:	291f      	cmp	r1, #31
 8008f1e:	b538      	push	{r3, r4, r5, lr}
 8008f20:	4605      	mov	r5, r0
 8008f22:	460c      	mov	r4, r1
 8008f24:	d904      	bls.n	8008f30 <_raise_r+0x14>
 8008f26:	2316      	movs	r3, #22
 8008f28:	6003      	str	r3, [r0, #0]
 8008f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2e:	bd38      	pop	{r3, r4, r5, pc}
 8008f30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008f32:	b112      	cbz	r2, 8008f3a <_raise_r+0x1e>
 8008f34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f38:	b94b      	cbnz	r3, 8008f4e <_raise_r+0x32>
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	f000 f830 	bl	8008fa0 <_getpid_r>
 8008f40:	4622      	mov	r2, r4
 8008f42:	4601      	mov	r1, r0
 8008f44:	4628      	mov	r0, r5
 8008f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f4a:	f000 b817 	b.w	8008f7c <_kill_r>
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d00a      	beq.n	8008f68 <_raise_r+0x4c>
 8008f52:	1c59      	adds	r1, r3, #1
 8008f54:	d103      	bne.n	8008f5e <_raise_r+0x42>
 8008f56:	2316      	movs	r3, #22
 8008f58:	6003      	str	r3, [r0, #0]
 8008f5a:	2001      	movs	r0, #1
 8008f5c:	e7e7      	b.n	8008f2e <_raise_r+0x12>
 8008f5e:	2100      	movs	r1, #0
 8008f60:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008f64:	4620      	mov	r0, r4
 8008f66:	4798      	blx	r3
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e7e0      	b.n	8008f2e <_raise_r+0x12>

08008f6c <raise>:
 8008f6c:	4b02      	ldr	r3, [pc, #8]	@ (8008f78 <raise+0xc>)
 8008f6e:	4601      	mov	r1, r0
 8008f70:	6818      	ldr	r0, [r3, #0]
 8008f72:	f7ff bfd3 	b.w	8008f1c <_raise_r>
 8008f76:	bf00      	nop
 8008f78:	2000005c 	.word	0x2000005c

08008f7c <_kill_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4d07      	ldr	r5, [pc, #28]	@ (8008f9c <_kill_r+0x20>)
 8008f80:	2300      	movs	r3, #0
 8008f82:	4604      	mov	r4, r0
 8008f84:	4608      	mov	r0, r1
 8008f86:	4611      	mov	r1, r2
 8008f88:	602b      	str	r3, [r5, #0]
 8008f8a:	f7f9 ff05 	bl	8002d98 <_kill>
 8008f8e:	1c43      	adds	r3, r0, #1
 8008f90:	d102      	bne.n	8008f98 <_kill_r+0x1c>
 8008f92:	682b      	ldr	r3, [r5, #0]
 8008f94:	b103      	cbz	r3, 8008f98 <_kill_r+0x1c>
 8008f96:	6023      	str	r3, [r4, #0]
 8008f98:	bd38      	pop	{r3, r4, r5, pc}
 8008f9a:	bf00      	nop
 8008f9c:	200007e0 	.word	0x200007e0

08008fa0 <_getpid_r>:
 8008fa0:	f7f9 bef2 	b.w	8002d88 <_getpid>

08008fa4 <__swhatbuf_r>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fac:	2900      	cmp	r1, #0
 8008fae:	b096      	sub	sp, #88	@ 0x58
 8008fb0:	4615      	mov	r5, r2
 8008fb2:	461e      	mov	r6, r3
 8008fb4:	da0d      	bge.n	8008fd2 <__swhatbuf_r+0x2e>
 8008fb6:	89a3      	ldrh	r3, [r4, #12]
 8008fb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fbc:	f04f 0100 	mov.w	r1, #0
 8008fc0:	bf14      	ite	ne
 8008fc2:	2340      	movne	r3, #64	@ 0x40
 8008fc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fc8:	2000      	movs	r0, #0
 8008fca:	6031      	str	r1, [r6, #0]
 8008fcc:	602b      	str	r3, [r5, #0]
 8008fce:	b016      	add	sp, #88	@ 0x58
 8008fd0:	bd70      	pop	{r4, r5, r6, pc}
 8008fd2:	466a      	mov	r2, sp
 8008fd4:	f000 f848 	bl	8009068 <_fstat_r>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	dbec      	blt.n	8008fb6 <__swhatbuf_r+0x12>
 8008fdc:	9901      	ldr	r1, [sp, #4]
 8008fde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008fe2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008fe6:	4259      	negs	r1, r3
 8008fe8:	4159      	adcs	r1, r3
 8008fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fee:	e7eb      	b.n	8008fc8 <__swhatbuf_r+0x24>

08008ff0 <__smakebuf_r>:
 8008ff0:	898b      	ldrh	r3, [r1, #12]
 8008ff2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ff4:	079d      	lsls	r5, r3, #30
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	d507      	bpl.n	800900c <__smakebuf_r+0x1c>
 8008ffc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	6123      	str	r3, [r4, #16]
 8009004:	2301      	movs	r3, #1
 8009006:	6163      	str	r3, [r4, #20]
 8009008:	b003      	add	sp, #12
 800900a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800900c:	ab01      	add	r3, sp, #4
 800900e:	466a      	mov	r2, sp
 8009010:	f7ff ffc8 	bl	8008fa4 <__swhatbuf_r>
 8009014:	9f00      	ldr	r7, [sp, #0]
 8009016:	4605      	mov	r5, r0
 8009018:	4639      	mov	r1, r7
 800901a:	4630      	mov	r0, r6
 800901c:	f7ff faba 	bl	8008594 <_malloc_r>
 8009020:	b948      	cbnz	r0, 8009036 <__smakebuf_r+0x46>
 8009022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009026:	059a      	lsls	r2, r3, #22
 8009028:	d4ee      	bmi.n	8009008 <__smakebuf_r+0x18>
 800902a:	f023 0303 	bic.w	r3, r3, #3
 800902e:	f043 0302 	orr.w	r3, r3, #2
 8009032:	81a3      	strh	r3, [r4, #12]
 8009034:	e7e2      	b.n	8008ffc <__smakebuf_r+0xc>
 8009036:	89a3      	ldrh	r3, [r4, #12]
 8009038:	6020      	str	r0, [r4, #0]
 800903a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800903e:	81a3      	strh	r3, [r4, #12]
 8009040:	9b01      	ldr	r3, [sp, #4]
 8009042:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009046:	b15b      	cbz	r3, 8009060 <__smakebuf_r+0x70>
 8009048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800904c:	4630      	mov	r0, r6
 800904e:	f000 f81d 	bl	800908c <_isatty_r>
 8009052:	b128      	cbz	r0, 8009060 <__smakebuf_r+0x70>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	f023 0303 	bic.w	r3, r3, #3
 800905a:	f043 0301 	orr.w	r3, r3, #1
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	89a3      	ldrh	r3, [r4, #12]
 8009062:	431d      	orrs	r5, r3
 8009064:	81a5      	strh	r5, [r4, #12]
 8009066:	e7cf      	b.n	8009008 <__smakebuf_r+0x18>

08009068 <_fstat_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4d07      	ldr	r5, [pc, #28]	@ (8009088 <_fstat_r+0x20>)
 800906c:	2300      	movs	r3, #0
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	4611      	mov	r1, r2
 8009074:	602b      	str	r3, [r5, #0]
 8009076:	f7f9 feef 	bl	8002e58 <_fstat>
 800907a:	1c43      	adds	r3, r0, #1
 800907c:	d102      	bne.n	8009084 <_fstat_r+0x1c>
 800907e:	682b      	ldr	r3, [r5, #0]
 8009080:	b103      	cbz	r3, 8009084 <_fstat_r+0x1c>
 8009082:	6023      	str	r3, [r4, #0]
 8009084:	bd38      	pop	{r3, r4, r5, pc}
 8009086:	bf00      	nop
 8009088:	200007e0 	.word	0x200007e0

0800908c <_isatty_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d06      	ldr	r5, [pc, #24]	@ (80090a8 <_isatty_r+0x1c>)
 8009090:	2300      	movs	r3, #0
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	602b      	str	r3, [r5, #0]
 8009098:	f7f9 feee 	bl	8002e78 <_isatty>
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	d102      	bne.n	80090a6 <_isatty_r+0x1a>
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	b103      	cbz	r3, 80090a6 <_isatty_r+0x1a>
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	bd38      	pop	{r3, r4, r5, pc}
 80090a8:	200007e0 	.word	0x200007e0

080090ac <sqrt>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	ed2d 8b02 	vpush	{d8}
 80090b2:	ec55 4b10 	vmov	r4, r5, d0
 80090b6:	f000 f825 	bl	8009104 <__ieee754_sqrt>
 80090ba:	4622      	mov	r2, r4
 80090bc:	462b      	mov	r3, r5
 80090be:	4620      	mov	r0, r4
 80090c0:	4629      	mov	r1, r5
 80090c2:	eeb0 8a40 	vmov.f32	s16, s0
 80090c6:	eef0 8a60 	vmov.f32	s17, s1
 80090ca:	f7f7 fd27 	bl	8000b1c <__aeabi_dcmpun>
 80090ce:	b990      	cbnz	r0, 80090f6 <sqrt+0x4a>
 80090d0:	2200      	movs	r2, #0
 80090d2:	2300      	movs	r3, #0
 80090d4:	4620      	mov	r0, r4
 80090d6:	4629      	mov	r1, r5
 80090d8:	f7f7 fcf8 	bl	8000acc <__aeabi_dcmplt>
 80090dc:	b158      	cbz	r0, 80090f6 <sqrt+0x4a>
 80090de:	f7ff f999 	bl	8008414 <__errno>
 80090e2:	2321      	movs	r3, #33	@ 0x21
 80090e4:	6003      	str	r3, [r0, #0]
 80090e6:	2200      	movs	r2, #0
 80090e8:	2300      	movs	r3, #0
 80090ea:	4610      	mov	r0, r2
 80090ec:	4619      	mov	r1, r3
 80090ee:	f7f7 fba5 	bl	800083c <__aeabi_ddiv>
 80090f2:	ec41 0b18 	vmov	d8, r0, r1
 80090f6:	eeb0 0a48 	vmov.f32	s0, s16
 80090fa:	eef0 0a68 	vmov.f32	s1, s17
 80090fe:	ecbd 8b02 	vpop	{d8}
 8009102:	bd38      	pop	{r3, r4, r5, pc}

08009104 <__ieee754_sqrt>:
 8009104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009108:	4a68      	ldr	r2, [pc, #416]	@ (80092ac <__ieee754_sqrt+0x1a8>)
 800910a:	ec55 4b10 	vmov	r4, r5, d0
 800910e:	43aa      	bics	r2, r5
 8009110:	462b      	mov	r3, r5
 8009112:	4621      	mov	r1, r4
 8009114:	d110      	bne.n	8009138 <__ieee754_sqrt+0x34>
 8009116:	4622      	mov	r2, r4
 8009118:	4620      	mov	r0, r4
 800911a:	4629      	mov	r1, r5
 800911c:	f7f7 fa64 	bl	80005e8 <__aeabi_dmul>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4620      	mov	r0, r4
 8009126:	4629      	mov	r1, r5
 8009128:	f7f7 f8a8 	bl	800027c <__adddf3>
 800912c:	4604      	mov	r4, r0
 800912e:	460d      	mov	r5, r1
 8009130:	ec45 4b10 	vmov	d0, r4, r5
 8009134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009138:	2d00      	cmp	r5, #0
 800913a:	dc0e      	bgt.n	800915a <__ieee754_sqrt+0x56>
 800913c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009140:	4322      	orrs	r2, r4
 8009142:	d0f5      	beq.n	8009130 <__ieee754_sqrt+0x2c>
 8009144:	b19d      	cbz	r5, 800916e <__ieee754_sqrt+0x6a>
 8009146:	4622      	mov	r2, r4
 8009148:	4620      	mov	r0, r4
 800914a:	4629      	mov	r1, r5
 800914c:	f7f7 f894 	bl	8000278 <__aeabi_dsub>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	f7f7 fb72 	bl	800083c <__aeabi_ddiv>
 8009158:	e7e8      	b.n	800912c <__ieee754_sqrt+0x28>
 800915a:	152a      	asrs	r2, r5, #20
 800915c:	d115      	bne.n	800918a <__ieee754_sqrt+0x86>
 800915e:	2000      	movs	r0, #0
 8009160:	e009      	b.n	8009176 <__ieee754_sqrt+0x72>
 8009162:	0acb      	lsrs	r3, r1, #11
 8009164:	3a15      	subs	r2, #21
 8009166:	0549      	lsls	r1, r1, #21
 8009168:	2b00      	cmp	r3, #0
 800916a:	d0fa      	beq.n	8009162 <__ieee754_sqrt+0x5e>
 800916c:	e7f7      	b.n	800915e <__ieee754_sqrt+0x5a>
 800916e:	462a      	mov	r2, r5
 8009170:	e7fa      	b.n	8009168 <__ieee754_sqrt+0x64>
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	3001      	adds	r0, #1
 8009176:	02dc      	lsls	r4, r3, #11
 8009178:	d5fb      	bpl.n	8009172 <__ieee754_sqrt+0x6e>
 800917a:	1e44      	subs	r4, r0, #1
 800917c:	1b12      	subs	r2, r2, r4
 800917e:	f1c0 0420 	rsb	r4, r0, #32
 8009182:	fa21 f404 	lsr.w	r4, r1, r4
 8009186:	4323      	orrs	r3, r4
 8009188:	4081      	lsls	r1, r0
 800918a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800918e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009196:	07d2      	lsls	r2, r2, #31
 8009198:	bf5c      	itt	pl
 800919a:	005b      	lslpl	r3, r3, #1
 800919c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80091a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80091a4:	bf58      	it	pl
 80091a6:	0049      	lslpl	r1, r1, #1
 80091a8:	2600      	movs	r6, #0
 80091aa:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80091ae:	106d      	asrs	r5, r5, #1
 80091b0:	0049      	lsls	r1, r1, #1
 80091b2:	2016      	movs	r0, #22
 80091b4:	4632      	mov	r2, r6
 80091b6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80091ba:	1917      	adds	r7, r2, r4
 80091bc:	429f      	cmp	r7, r3
 80091be:	bfde      	ittt	le
 80091c0:	193a      	addle	r2, r7, r4
 80091c2:	1bdb      	suble	r3, r3, r7
 80091c4:	1936      	addle	r6, r6, r4
 80091c6:	0fcf      	lsrs	r7, r1, #31
 80091c8:	3801      	subs	r0, #1
 80091ca:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80091ce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80091d2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80091d6:	d1f0      	bne.n	80091ba <__ieee754_sqrt+0xb6>
 80091d8:	4604      	mov	r4, r0
 80091da:	2720      	movs	r7, #32
 80091dc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80091e0:	429a      	cmp	r2, r3
 80091e2:	eb00 0e0c 	add.w	lr, r0, ip
 80091e6:	db02      	blt.n	80091ee <__ieee754_sqrt+0xea>
 80091e8:	d113      	bne.n	8009212 <__ieee754_sqrt+0x10e>
 80091ea:	458e      	cmp	lr, r1
 80091ec:	d811      	bhi.n	8009212 <__ieee754_sqrt+0x10e>
 80091ee:	f1be 0f00 	cmp.w	lr, #0
 80091f2:	eb0e 000c 	add.w	r0, lr, ip
 80091f6:	da42      	bge.n	800927e <__ieee754_sqrt+0x17a>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	db40      	blt.n	800927e <__ieee754_sqrt+0x17a>
 80091fc:	f102 0801 	add.w	r8, r2, #1
 8009200:	1a9b      	subs	r3, r3, r2
 8009202:	458e      	cmp	lr, r1
 8009204:	bf88      	it	hi
 8009206:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800920a:	eba1 010e 	sub.w	r1, r1, lr
 800920e:	4464      	add	r4, ip
 8009210:	4642      	mov	r2, r8
 8009212:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009216:	3f01      	subs	r7, #1
 8009218:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800921c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009220:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009224:	d1dc      	bne.n	80091e0 <__ieee754_sqrt+0xdc>
 8009226:	4319      	orrs	r1, r3
 8009228:	d01b      	beq.n	8009262 <__ieee754_sqrt+0x15e>
 800922a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80092b0 <__ieee754_sqrt+0x1ac>
 800922e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80092b4 <__ieee754_sqrt+0x1b0>
 8009232:	e9da 0100 	ldrd	r0, r1, [sl]
 8009236:	e9db 2300 	ldrd	r2, r3, [fp]
 800923a:	f7f7 f81d 	bl	8000278 <__aeabi_dsub>
 800923e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009242:	4602      	mov	r2, r0
 8009244:	460b      	mov	r3, r1
 8009246:	4640      	mov	r0, r8
 8009248:	4649      	mov	r1, r9
 800924a:	f7f7 fc49 	bl	8000ae0 <__aeabi_dcmple>
 800924e:	b140      	cbz	r0, 8009262 <__ieee754_sqrt+0x15e>
 8009250:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009254:	e9da 0100 	ldrd	r0, r1, [sl]
 8009258:	e9db 2300 	ldrd	r2, r3, [fp]
 800925c:	d111      	bne.n	8009282 <__ieee754_sqrt+0x17e>
 800925e:	3601      	adds	r6, #1
 8009260:	463c      	mov	r4, r7
 8009262:	1072      	asrs	r2, r6, #1
 8009264:	0863      	lsrs	r3, r4, #1
 8009266:	07f1      	lsls	r1, r6, #31
 8009268:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800926c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009270:	bf48      	it	mi
 8009272:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009276:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800927a:	4618      	mov	r0, r3
 800927c:	e756      	b.n	800912c <__ieee754_sqrt+0x28>
 800927e:	4690      	mov	r8, r2
 8009280:	e7be      	b.n	8009200 <__ieee754_sqrt+0xfc>
 8009282:	f7f6 fffb 	bl	800027c <__adddf3>
 8009286:	e9da 8900 	ldrd	r8, r9, [sl]
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	4640      	mov	r0, r8
 8009290:	4649      	mov	r1, r9
 8009292:	f7f7 fc1b 	bl	8000acc <__aeabi_dcmplt>
 8009296:	b120      	cbz	r0, 80092a2 <__ieee754_sqrt+0x19e>
 8009298:	1ca0      	adds	r0, r4, #2
 800929a:	bf08      	it	eq
 800929c:	3601      	addeq	r6, #1
 800929e:	3402      	adds	r4, #2
 80092a0:	e7df      	b.n	8009262 <__ieee754_sqrt+0x15e>
 80092a2:	1c63      	adds	r3, r4, #1
 80092a4:	f023 0401 	bic.w	r4, r3, #1
 80092a8:	e7db      	b.n	8009262 <__ieee754_sqrt+0x15e>
 80092aa:	bf00      	nop
 80092ac:	7ff00000 	.word	0x7ff00000
 80092b0:	200000b8 	.word	0x200000b8
 80092b4:	200000b0 	.word	0x200000b0

080092b8 <_init>:
 80092b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ba:	bf00      	nop
 80092bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092be:	bc08      	pop	{r3}
 80092c0:	469e      	mov	lr, r3
 80092c2:	4770      	bx	lr

080092c4 <_fini>:
 80092c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c6:	bf00      	nop
 80092c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ca:	bc08      	pop	{r3}
 80092cc:	469e      	mov	lr, r3
 80092ce:	4770      	bx	lr
