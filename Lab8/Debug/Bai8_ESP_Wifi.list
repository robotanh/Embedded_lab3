
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000309c  08008b48  08008b48  00009b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbe4  0800bbe4  0000d064  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbe4  0800bbe4  0000cbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbec  0800bbec  0000d064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbec  0800bbec  0000cbec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbf0  0800bbf0  0000cbf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800bbf4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d064  2**0
                  CONTENTS
 10 .bss          000004c0  20000064  20000064  0000d064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000524  20000524  0000d064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019453  00000000  00000000  0000d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000440b  00000000  00000000  000264e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0002a8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a3  00000000  00000000  0002bfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026945  00000000  00000000  0002d14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020c7e  00000000  00000000  00053a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df8a1  00000000  00000000  0007470e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00153faf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062e0  00000000  00000000  00153ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  0015a2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b30 	.word	0x08008b30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08008b30 	.word	0x08008b30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <test_Adc>:
#include "ada_update.h"

uint8_t count_adc = 0;

void test_Adc() {
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b0b3      	sub	sp, #204	@ 0xcc
 8000db0:	af04      	add	r7, sp, #16
    count_adc = (count_adc + 1) % 200;
 8000db2:	4bc4      	ldr	r3, [pc, #784]	@ (80010c4 <test_Adc+0x318>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	4ac3      	ldr	r2, [pc, #780]	@ (80010c8 <test_Adc+0x31c>)
 8000dba:	fb82 1203 	smull	r1, r2, r2, r3
 8000dbe:	1191      	asrs	r1, r2, #6
 8000dc0:	17da      	asrs	r2, r3, #31
 8000dc2:	1a8a      	subs	r2, r1, r2
 8000dc4:	21c8      	movs	r1, #200	@ 0xc8
 8000dc6:	fb01 f202 	mul.w	r2, r1, r2
 8000dca:	1a9a      	subs	r2, r3, r2
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	4bbd      	ldr	r3, [pc, #756]	@ (80010c4 <test_Adc+0x318>)
 8000dd0:	701a      	strb	r2, [r3, #0]
	test_Esp();
 8000dd2:	f001 fb2b 	bl	800242c <test_Esp>
	lightProcess();
 8000dd6:	f001 faf3 	bl	80023c0 <lightProcess>

    if (count_adc == 0) {
 8000dda:	4bba      	ldr	r3, [pc, #744]	@ (80010c4 <test_Adc+0x318>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 816c 	bne.w	80010bc <test_Adc+0x310>
        // Read sensor values

        sensor_Read();
 8000de4:	f001 fc28 	bl	8002638 <sensor_Read>

        // Voltage
        lcd_ShowStr(10, 100, "Voltage:", RED, BLACK, 16, 0);
 8000de8:	2300      	movs	r3, #0
 8000dea:	9302      	str	r3, [sp, #8]
 8000dec:	2310      	movs	r3, #16
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	2300      	movs	r3, #0
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000df8:	4ab4      	ldr	r2, [pc, #720]	@ (80010cc <test_Adc+0x320>)
 8000dfa:	2164      	movs	r1, #100	@ 0x64
 8000dfc:	200a      	movs	r0, #10
 8000dfe:	f001 f9ef 	bl	80021e0 <lcd_ShowStr>
        lcd_ShowFloatNum(130, 100, sensor_GetVoltage(), 4, RED, BLACK, 16);
 8000e02:	f001 fc41 	bl	8002688 <sensor_GetVoltage>
 8000e06:	eef0 7a40 	vmov.f32	s15, s0
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000e16:	2204      	movs	r2, #4
 8000e18:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1c:	2164      	movs	r1, #100	@ 0x64
 8000e1e:	2082      	movs	r0, #130	@ 0x82
 8000e20:	f000 ffd2 	bl	8001dc8 <lcd_ShowFloatNum>
        int voltageInt = (int)(sensor_GetVoltage() * 100); // Scale float to int (2 decimal places)
 8000e24:	f001 fc30 	bl	8002688 <sensor_GetVoltage>
 8000e28:	eef0 7a40 	vmov.f32	s15, s0
 8000e2c:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 80010d0 <test_Adc+0x324>
 8000e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e38:	ee17 3a90 	vmov	r3, s15
 8000e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        char voltageStr[30];
        snprintf(voltageStr, sizeof(voltageStr), "!VOLTAGE:%d.%02d#\n", voltageInt / 100, voltageInt % 100);
 8000e40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e44:	4aa0      	ldr	r2, [pc, #640]	@ (80010c8 <test_Adc+0x31c>)
 8000e46:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4a:	1152      	asrs	r2, r2, #5
 8000e4c:	17db      	asrs	r3, r3, #31
 8000e4e:	1ad4      	subs	r4, r2, r3
 8000e50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8000e54:	4b9c      	ldr	r3, [pc, #624]	@ (80010c8 <test_Adc+0x31c>)
 8000e56:	fb83 1302 	smull	r1, r3, r3, r2
 8000e5a:	1159      	asrs	r1, r3, #5
 8000e5c:	17d3      	asrs	r3, r2, #31
 8000e5e:	1acb      	subs	r3, r1, r3
 8000e60:	2164      	movs	r1, #100	@ 0x64
 8000e62:	fb01 f303 	mul.w	r3, r1, r3
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	4623      	mov	r3, r4
 8000e70:	4a98      	ldr	r2, [pc, #608]	@ (80010d4 <test_Adc+0x328>)
 8000e72:	211e      	movs	r1, #30
 8000e74:	f007 f9a8 	bl	80081c8 <sniprintf>
        uart_EspSendBytes(voltageStr, strlen(voltageStr));
 8000e78:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff f9a7 	bl	80001d0 <strlen>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 ffd7 	bl	8002e40 <uart_EspSendBytes>

        // Current
        lcd_ShowStr(10, 120, "Current:", RED, BLACK, 16, 0);
 8000e92:	2300      	movs	r3, #0
 8000e94:	9302      	str	r3, [sp, #8]
 8000e96:	2310      	movs	r3, #16
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ea2:	4a8d      	ldr	r2, [pc, #564]	@ (80010d8 <test_Adc+0x32c>)
 8000ea4:	2178      	movs	r1, #120	@ 0x78
 8000ea6:	200a      	movs	r0, #10
 8000ea8:	f001 f99a 	bl	80021e0 <lcd_ShowStr>
        lcd_ShowFloatNum(130, 120, sensor_GetCurrent(), 4, RED, BLACK, 16);
 8000eac:	f001 fc28 	bl	8002700 <sensor_GetCurrent>
 8000eb0:	eef0 7a40 	vmov.f32	s15, s0
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec6:	2178      	movs	r1, #120	@ 0x78
 8000ec8:	2082      	movs	r0, #130	@ 0x82
 8000eca:	f000 ff7d 	bl	8001dc8 <lcd_ShowFloatNum>
        int currentInt = (int)(sensor_GetCurrent() * 100); // Scale float to int (2 decimal places)
 8000ece:	f001 fc17 	bl	8002700 <sensor_GetCurrent>
 8000ed2:	eef0 7a40 	vmov.f32	s15, s0
 8000ed6:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 80010d0 <test_Adc+0x324>
 8000eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee2:	ee17 3a90 	vmov	r3, s15
 8000ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        char currentStr[30];
        snprintf(currentStr, sizeof(currentStr), "!CURRENT:%d.%02d#\n", currentInt / 100, currentInt % 100);
 8000eea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000eee:	4a76      	ldr	r2, [pc, #472]	@ (80010c8 <test_Adc+0x31c>)
 8000ef0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef4:	1152      	asrs	r2, r2, #5
 8000ef6:	17db      	asrs	r3, r3, #31
 8000ef8:	1ad4      	subs	r4, r2, r3
 8000efa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8000efe:	4b72      	ldr	r3, [pc, #456]	@ (80010c8 <test_Adc+0x31c>)
 8000f00:	fb83 1302 	smull	r1, r3, r3, r2
 8000f04:	1159      	asrs	r1, r3, #5
 8000f06:	17d3      	asrs	r3, r2, #31
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	2164      	movs	r1, #100	@ 0x64
 8000f0c:	fb01 f303 	mul.w	r3, r1, r3
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	4623      	mov	r3, r4
 8000f1a:	4a70      	ldr	r2, [pc, #448]	@ (80010dc <test_Adc+0x330>)
 8000f1c:	211e      	movs	r1, #30
 8000f1e:	f007 f953 	bl	80081c8 <sniprintf>
        uart_EspSendBytes(currentStr, strlen(currentStr));
 8000f22:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff f952 	bl	80001d0 <strlen>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 ff82 	bl	8002e40 <uart_EspSendBytes>

        // Light
        lcd_ShowStr(10, 140, "Light:", RED, BLACK, 16, 0);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	2310      	movs	r3, #16
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	2300      	movs	r3, #0
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f4c:	4a64      	ldr	r2, [pc, #400]	@ (80010e0 <test_Adc+0x334>)
 8000f4e:	218c      	movs	r1, #140	@ 0x8c
 8000f50:	200a      	movs	r0, #10
 8000f52:	f001 f945 	bl	80021e0 <lcd_ShowStr>
        lcd_ShowIntNum(130, 140, sensor_GetLight(), 4, RED, BLACK, 16);
 8000f56:	f001 fb7d 	bl	8002654 <sensor_GetLight>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	2310      	movs	r3, #16
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	2300      	movs	r3, #0
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	218c      	movs	r1, #140	@ 0x8c
 8000f70:	2082      	movs	r0, #130	@ 0x82
 8000f72:	f000 feab 	bl	8001ccc <lcd_ShowIntNum>
        int lightVal = sensor_GetLight(); // No scaling needed
 8000f76:	f001 fb6d 	bl	8002654 <sensor_GetLight>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        char lightStr[30];
        snprintf(lightStr, sizeof(lightStr), "!LIGHT:%d#\n", lightVal);
 8000f80:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8000f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f88:	4a56      	ldr	r2, [pc, #344]	@ (80010e4 <test_Adc+0x338>)
 8000f8a:	211e      	movs	r1, #30
 8000f8c:	f007 f91c 	bl	80081c8 <sniprintf>
        uart_EspSendBytes(lightStr, strlen(lightStr));
 8000f90:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff f91b 	bl	80001d0 <strlen>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 ff4b 	bl	8002e40 <uart_EspSendBytes>

        // Potentiometer
        lcd_ShowStr(10, 160, "Potentiometer:", RED, BLACK, 16, 0);
 8000faa:	2300      	movs	r3, #0
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2310      	movs	r3, #16
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000fba:	4a4b      	ldr	r2, [pc, #300]	@ (80010e8 <test_Adc+0x33c>)
 8000fbc:	21a0      	movs	r1, #160	@ 0xa0
 8000fbe:	200a      	movs	r0, #10
 8000fc0:	f001 f90e 	bl	80021e0 <lcd_ShowStr>
        lcd_ShowIntNum(130, 160, sensor_GetPotentiometer(), 4, RED, BLACK, 16);
 8000fc4:	f001 fb52 	bl	800266c <sensor_GetPotentiometer>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	2310      	movs	r3, #16
 8000fce:	9302      	str	r3, [sp, #8]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2304      	movs	r3, #4
 8000fdc:	21a0      	movs	r1, #160	@ 0xa0
 8000fde:	2082      	movs	r0, #130	@ 0x82
 8000fe0:	f000 fe74 	bl	8001ccc <lcd_ShowIntNum>
        int potValue = sensor_GetPotentiometer(); // No scaling needed
 8000fe4:	f001 fb42 	bl	800266c <sensor_GetPotentiometer>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        char potStr[30];
        snprintf(potStr, sizeof(potStr), "!POTENTIOMETER:%d#\n", potValue);
 8000fee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000ff2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000ff6:	4a3d      	ldr	r2, [pc, #244]	@ (80010ec <test_Adc+0x340>)
 8000ff8:	211e      	movs	r1, #30
 8000ffa:	f007 f8e5 	bl	80081c8 <sniprintf>
        uart_EspSendBytes(potStr, strlen(potStr));
 8000ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff f8e4 	bl	80001d0 <strlen>
 8001008:	4603      	mov	r3, r0
 800100a:	b29a      	uxth	r2, r3
 800100c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f001 ff14 	bl	8002e40 <uart_EspSendBytes>

        // Temperature
        lcd_ShowStr(10, 180, "Temperature:", RED, BLACK, 16, 0);
 8001018:	2300      	movs	r3, #0
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	2310      	movs	r3, #16
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	2300      	movs	r3, #0
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001028:	4a31      	ldr	r2, [pc, #196]	@ (80010f0 <test_Adc+0x344>)
 800102a:	21b4      	movs	r1, #180	@ 0xb4
 800102c:	200a      	movs	r0, #10
 800102e:	f001 f8d7 	bl	80021e0 <lcd_ShowStr>
        lcd_ShowFloatNum(130, 180, sensor_GetTemperature(), 4, RED, BLACK, 16);
 8001032:	f001 fbc1 	bl	80027b8 <sensor_GetTemperature>
 8001036:	eef0 7a40 	vmov.f32	s15, s0
 800103a:	2310      	movs	r3, #16
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	2300      	movs	r3, #0
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001046:	2204      	movs	r2, #4
 8001048:	eeb0 0a67 	vmov.f32	s0, s15
 800104c:	21b4      	movs	r1, #180	@ 0xb4
 800104e:	2082      	movs	r0, #130	@ 0x82
 8001050:	f000 feba 	bl	8001dc8 <lcd_ShowFloatNum>
        int tempInt = (int)(sensor_GetTemperature() * 100); // Scale float to int (2 decimal places)
 8001054:	f001 fbb0 	bl	80027b8 <sensor_GetTemperature>
 8001058:	eef0 7a40 	vmov.f32	s15, s0
 800105c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80010d0 <test_Adc+0x324>
 8001060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001068:	ee17 3a90 	vmov	r3, s15
 800106c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        char tempStr[30];
        snprintf(tempStr, sizeof(tempStr), "!TEMPERATURE:%d.%02d#\n", tempInt / 100, tempInt % 100);
 8001070:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001074:	4a14      	ldr	r2, [pc, #80]	@ (80010c8 <test_Adc+0x31c>)
 8001076:	fb82 1203 	smull	r1, r2, r2, r3
 800107a:	1152      	asrs	r2, r2, #5
 800107c:	17db      	asrs	r3, r3, #31
 800107e:	1ad4      	subs	r4, r2, r3
 8001080:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001084:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <test_Adc+0x31c>)
 8001086:	fb83 1302 	smull	r1, r3, r3, r2
 800108a:	1159      	asrs	r1, r3, #5
 800108c:	17d3      	asrs	r3, r2, #31
 800108e:	1acb      	subs	r3, r1, r3
 8001090:	2164      	movs	r1, #100	@ 0x64
 8001092:	fb01 f303 	mul.w	r3, r1, r3
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	1d38      	adds	r0, r7, #4
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	4623      	mov	r3, r4
 800109e:	4a15      	ldr	r2, [pc, #84]	@ (80010f4 <test_Adc+0x348>)
 80010a0:	211e      	movs	r1, #30
 80010a2:	f007 f891 	bl	80081c8 <sniprintf>
        uart_EspSendBytes(tempStr, strlen(tempStr));
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f891 	bl	80001d0 <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fec2 	bl	8002e40 <uart_EspSendBytes>
    }
}
 80010bc:	bf00      	nop
 80010be:	37bc      	adds	r7, #188	@ 0xbc
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd90      	pop	{r4, r7, pc}
 80010c4:	20000080 	.word	0x20000080
 80010c8:	51eb851f 	.word	0x51eb851f
 80010cc:	08008b48 	.word	0x08008b48
 80010d0:	42c80000 	.word	0x42c80000
 80010d4:	08008b54 	.word	0x08008b54
 80010d8:	08008b68 	.word	0x08008b68
 80010dc:	08008b74 	.word	0x08008b74
 80010e0:	08008b88 	.word	0x08008b88
 80010e4:	08008b90 	.word	0x08008b90
 80010e8:	08008b9c 	.word	0x08008b9c
 80010ec:	08008bac 	.word	0x08008bac
 80010f0:	08008bc0 	.word	0x08008bc0
 80010f4:	08008bd0 	.word	0x08008bd0

080010f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800110a:	4b3d      	ldr	r3, [pc, #244]	@ (8001200 <MX_ADC1_Init+0x108>)
 800110c:	4a3d      	ldr	r2, [pc, #244]	@ (8001204 <MX_ADC1_Init+0x10c>)
 800110e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001110:	4b3b      	ldr	r3, [pc, #236]	@ (8001200 <MX_ADC1_Init+0x108>)
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001116:	4b3a      	ldr	r3, [pc, #232]	@ (8001200 <MX_ADC1_Init+0x108>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800111c:	4b38      	ldr	r3, [pc, #224]	@ (8001200 <MX_ADC1_Init+0x108>)
 800111e:	2201      	movs	r2, #1
 8001120:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001122:	4b37      	ldr	r3, [pc, #220]	@ (8001200 <MX_ADC1_Init+0x108>)
 8001124:	2200      	movs	r2, #0
 8001126:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001128:	4b35      	ldr	r3, [pc, #212]	@ (8001200 <MX_ADC1_Init+0x108>)
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001130:	4b33      	ldr	r3, [pc, #204]	@ (8001200 <MX_ADC1_Init+0x108>)
 8001132:	2200      	movs	r2, #0
 8001134:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001136:	4b32      	ldr	r3, [pc, #200]	@ (8001200 <MX_ADC1_Init+0x108>)
 8001138:	4a33      	ldr	r2, [pc, #204]	@ (8001208 <MX_ADC1_Init+0x110>)
 800113a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113c:	4b30      	ldr	r3, [pc, #192]	@ (8001200 <MX_ADC1_Init+0x108>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001142:	4b2f      	ldr	r3, [pc, #188]	@ (8001200 <MX_ADC1_Init+0x108>)
 8001144:	2205      	movs	r2, #5
 8001146:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001148:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <MX_ADC1_Init+0x108>)
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001150:	4b2b      	ldr	r3, [pc, #172]	@ (8001200 <MX_ADC1_Init+0x108>)
 8001152:	2201      	movs	r2, #1
 8001154:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001156:	482a      	ldr	r0, [pc, #168]	@ (8001200 <MX_ADC1_Init+0x108>)
 8001158:	f002 f87e 	bl	8003258 <HAL_ADC_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001162:	f001 fa63 	bl	800262c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001166:	2308      	movs	r3, #8
 8001168:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800116a:	2301      	movs	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	4822      	ldr	r0, [pc, #136]	@ (8001200 <MX_ADC1_Init+0x108>)
 8001178:	f002 f9e0 	bl	800353c <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001182:	f001 fa53 	bl	800262c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001186:	2309      	movs	r3, #9
 8001188:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800118a:	2302      	movs	r3, #2
 800118c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	4619      	mov	r1, r3
 8001192:	481b      	ldr	r0, [pc, #108]	@ (8001200 <MX_ADC1_Init+0x108>)
 8001194:	f002 f9d2 	bl	800353c <HAL_ADC_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800119e:	f001 fa45 	bl	800262c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011a2:	230a      	movs	r3, #10
 80011a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80011a6:	2303      	movs	r3, #3
 80011a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4814      	ldr	r0, [pc, #80]	@ (8001200 <MX_ADC1_Init+0x108>)
 80011b0:	f002 f9c4 	bl	800353c <HAL_ADC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80011ba:	f001 fa37 	bl	800262c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011be:	230b      	movs	r3, #11
 80011c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80011c2:	2304      	movs	r3, #4
 80011c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	4619      	mov	r1, r3
 80011ca:	480d      	ldr	r0, [pc, #52]	@ (8001200 <MX_ADC1_Init+0x108>)
 80011cc:	f002 f9b6 	bl	800353c <HAL_ADC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80011d6:	f001 fa29 	bl	800262c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011da:	230c      	movs	r3, #12
 80011dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80011de:	2305      	movs	r3, #5
 80011e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e2:	463b      	mov	r3, r7
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	@ (8001200 <MX_ADC1_Init+0x108>)
 80011e8:	f002 f9a8 	bl	800353c <HAL_ADC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80011f2:	f001 fa1b 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000084 	.word	0x20000084
 8001204:	40012000 	.word	0x40012000
 8001208:	0f000001 	.word	0x0f000001

0800120c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a3c      	ldr	r2, [pc, #240]	@ (800131c <HAL_ADC_MspInit+0x110>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d171      	bne.n	8001312 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b3b      	ldr	r3, [pc, #236]	@ (8001320 <HAL_ADC_MspInit+0x114>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	4a3a      	ldr	r2, [pc, #232]	@ (8001320 <HAL_ADC_MspInit+0x114>)
 8001238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800123c:	6453      	str	r3, [r2, #68]	@ 0x44
 800123e:	4b38      	ldr	r3, [pc, #224]	@ (8001320 <HAL_ADC_MspInit+0x114>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b34      	ldr	r3, [pc, #208]	@ (8001320 <HAL_ADC_MspInit+0x114>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a33      	ldr	r2, [pc, #204]	@ (8001320 <HAL_ADC_MspInit+0x114>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b31      	ldr	r3, [pc, #196]	@ (8001320 <HAL_ADC_MspInit+0x114>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <HAL_ADC_MspInit+0x114>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a2c      	ldr	r2, [pc, #176]	@ (8001320 <HAL_ADC_MspInit+0x114>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <HAL_ADC_MspInit+0x114>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001282:	2307      	movs	r3, #7
 8001284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001286:	2303      	movs	r3, #3
 8001288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4823      	ldr	r0, [pc, #140]	@ (8001324 <HAL_ADC_MspInit+0x118>)
 8001296:	f003 f905 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800129a:	2303      	movs	r3, #3
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129e:	2303      	movs	r3, #3
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	481e      	ldr	r0, [pc, #120]	@ (8001328 <HAL_ADC_MspInit+0x11c>)
 80012ae:	f003 f8f9 	bl	80044a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012b2:	4b1e      	ldr	r3, [pc, #120]	@ (800132c <HAL_ADC_MspInit+0x120>)
 80012b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001330 <HAL_ADC_MspInit+0x124>)
 80012b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <HAL_ADC_MspInit+0x120>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012be:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <HAL_ADC_MspInit+0x120>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c4:	4b19      	ldr	r3, [pc, #100]	@ (800132c <HAL_ADC_MspInit+0x120>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ca:	4b18      	ldr	r3, [pc, #96]	@ (800132c <HAL_ADC_MspInit+0x120>)
 80012cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012d2:	4b16      	ldr	r3, [pc, #88]	@ (800132c <HAL_ADC_MspInit+0x120>)
 80012d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012da:	4b14      	ldr	r3, [pc, #80]	@ (800132c <HAL_ADC_MspInit+0x120>)
 80012dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012e2:	4b12      	ldr	r3, [pc, #72]	@ (800132c <HAL_ADC_MspInit+0x120>)
 80012e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <HAL_ADC_MspInit+0x120>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f0:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <HAL_ADC_MspInit+0x120>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012f6:	480d      	ldr	r0, [pc, #52]	@ (800132c <HAL_ADC_MspInit+0x120>)
 80012f8:	f002 fcd2 	bl	8003ca0 <HAL_DMA_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001302:	f001 f993 	bl	800262c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a08      	ldr	r2, [pc, #32]	@ (800132c <HAL_ADC_MspInit+0x120>)
 800130a:	639a      	str	r2, [r3, #56]	@ 0x38
 800130c:	4a07      	ldr	r2, [pc, #28]	@ (800132c <HAL_ADC_MspInit+0x120>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	@ 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40012000 	.word	0x40012000
 8001320:	40023800 	.word	0x40023800
 8001324:	40020800 	.word	0x40020800
 8001328:	40020400 	.word	0x40020400
 800132c:	200000cc 	.word	0x200000cc
 8001330:	40026410 	.word	0x40026410

08001334 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001338:	2201      	movs	r2, #1
 800133a:	2108      	movs	r1, #8
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <button_init+0x14>)
 800133e:	f003 fa4d 	bl	80047dc <HAL_GPIO_WritePin>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40020c00 	.word	0x40020c00

0800134c <button_Scan>:

void button_Scan(){
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2108      	movs	r1, #8
 8001356:	482f      	ldr	r0, [pc, #188]	@ (8001414 <button_Scan+0xc8>)
 8001358:	f003 fa40 	bl	80047dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800135c:	2201      	movs	r2, #1
 800135e:	2108      	movs	r1, #8
 8001360:	482c      	ldr	r0, [pc, #176]	@ (8001414 <button_Scan+0xc8>)
 8001362:	f003 fa3b 	bl	80047dc <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001366:	230a      	movs	r3, #10
 8001368:	2202      	movs	r2, #2
 800136a:	492b      	ldr	r1, [pc, #172]	@ (8001418 <button_Scan+0xcc>)
 800136c:	482b      	ldr	r0, [pc, #172]	@ (800141c <button_Scan+0xd0>)
 800136e:	f004 fa0a 	bl	8005786 <HAL_SPI_Receive>
	  int button_index = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8001376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800137a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	e03f      	b.n	8001402 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db06      	blt.n	8001396 <button_Scan+0x4a>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b03      	cmp	r3, #3
 800138c:	dc03      	bgt.n	8001396 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3304      	adds	r3, #4
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e018      	b.n	80013c8 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b03      	cmp	r3, #3
 800139a:	dd07      	ble.n	80013ac <button_Scan+0x60>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b07      	cmp	r3, #7
 80013a0:	dc04      	bgt.n	80013ac <button_Scan+0x60>
			  button_index = 7 - i;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f1c3 0307 	rsb	r3, r3, #7
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e00d      	b.n	80013c8 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b07      	cmp	r3, #7
 80013b0:	dd06      	ble.n	80013c0 <button_Scan+0x74>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b0b      	cmp	r3, #11
 80013b6:	dc03      	bgt.n	80013c0 <button_Scan+0x74>
			  button_index = i + 4;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3304      	adds	r3, #4
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	e003      	b.n	80013c8 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f1c3 0317 	rsb	r3, r3, #23
 80013c6:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80013c8:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <button_Scan+0xcc>)
 80013ca:	881a      	ldrh	r2, [r3, #0]
 80013cc:	897b      	ldrh	r3, [r7, #10]
 80013ce:	4013      	ands	r3, r2
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <button_Scan+0x96>
 80013d6:	4a12      	ldr	r2, [pc, #72]	@ (8001420 <button_Scan+0xd4>)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2100      	movs	r1, #0
 80013dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80013e0:	e009      	b.n	80013f6 <button_Scan+0xaa>
		  else button_count[button_index]++;
 80013e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001420 <button_Scan+0xd4>)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ea:	3301      	adds	r3, #1
 80013ec:	b299      	uxth	r1, r3
 80013ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001420 <button_Scan+0xd4>)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80013f6:	897b      	ldrh	r3, [r7, #10]
 80013f8:	085b      	lsrs	r3, r3, #1
 80013fa:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3301      	adds	r3, #1
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	ddbc      	ble.n	8001382 <button_Scan+0x36>
	  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40020c00 	.word	0x40020c00
 8001418:	2000014c 	.word	0x2000014c
 800141c:	20000218 	.word	0x20000218
 8001420:	2000012c 	.word	0x2000012c

08001424 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <MX_DMA_Init+0x3c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a0b      	ldr	r2, [pc, #44]	@ (8001460 <MX_DMA_Init+0x3c>)
 8001434:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <MX_DMA_Init+0x3c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2038      	movs	r0, #56	@ 0x38
 800144c:	f002 fbf1 	bl	8003c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001450:	2038      	movs	r0, #56	@ 0x38
 8001452:	f002 fc0a 	bl	8003c6a <HAL_NVIC_EnableIRQ>

}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800

08001464 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08e      	sub	sp, #56	@ 0x38
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800147e:	463b      	mov	r3, r7
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
 800148c:	615a      	str	r2, [r3, #20]
 800148e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001490:	4b2f      	ldr	r3, [pc, #188]	@ (8001550 <MX_FSMC_Init+0xec>)
 8001492:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001496:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001498:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <MX_FSMC_Init+0xec>)
 800149a:	4a2e      	ldr	r2, [pc, #184]	@ (8001554 <MX_FSMC_Init+0xf0>)
 800149c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800149e:	4b2c      	ldr	r3, [pc, #176]	@ (8001550 <MX_FSMC_Init+0xec>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80014a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001550 <MX_FSMC_Init+0xec>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80014aa:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <MX_FSMC_Init+0xec>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80014b0:	4b27      	ldr	r3, [pc, #156]	@ (8001550 <MX_FSMC_Init+0xec>)
 80014b2:	2210      	movs	r2, #16
 80014b4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80014b6:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <MX_FSMC_Init+0xec>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80014bc:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <MX_FSMC_Init+0xec>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80014c2:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <MX_FSMC_Init+0xec>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80014c8:	4b21      	ldr	r3, [pc, #132]	@ (8001550 <MX_FSMC_Init+0xec>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80014ce:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <MX_FSMC_Init+0xec>)
 80014d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <MX_FSMC_Init+0xec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001550 <MX_FSMC_Init+0xec>)
 80014de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <MX_FSMC_Init+0xec>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <MX_FSMC_Init+0xec>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80014f0:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <MX_FSMC_Init+0xec>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80014f6:	230f      	movs	r3, #15
 80014f8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80014fa:	230f      	movs	r3, #15
 80014fc:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80014fe:	233c      	movs	r3, #60	@ 0x3c
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8001506:	2310      	movs	r3, #16
 8001508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 800150a:	2311      	movs	r3, #17
 800150c:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800150e:	2300      	movs	r3, #0
 8001510:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001512:	2308      	movs	r3, #8
 8001514:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001516:	230f      	movs	r3, #15
 8001518:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800151a:	2309      	movs	r3, #9
 800151c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001522:	2310      	movs	r3, #16
 8001524:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001526:	2311      	movs	r3, #17
 8001528:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800152e:	463a      	mov	r2, r7
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	@ (8001550 <MX_FSMC_Init+0xec>)
 8001538:	f004 fd08 	bl	8005f4c <HAL_SRAM_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001542:	f001 f873 	bl	800262c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001546:	bf00      	nop
 8001548:	3738      	adds	r7, #56	@ 0x38
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000150 	.word	0x20000150
 8001554:	a0000104 	.word	0xa0000104

08001558 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800156c:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <HAL_FSMC_MspInit+0x88>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d131      	bne.n	80015d8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <HAL_FSMC_MspInit+0x88>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <HAL_FSMC_MspInit+0x8c>)
 8001580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001582:	4a18      	ldr	r2, [pc, #96]	@ (80015e4 <HAL_FSMC_MspInit+0x8c>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6393      	str	r3, [r2, #56]	@ 0x38
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <HAL_FSMC_MspInit+0x8c>)
 800158c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001596:	f64f 7388 	movw	r3, #65416	@ 0xff88
 800159a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015a8:	230c      	movs	r3, #12
 80015aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	480d      	ldr	r0, [pc, #52]	@ (80015e8 <HAL_FSMC_MspInit+0x90>)
 80015b2:	f002 ff77 	bl	80044a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80015b6:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80015ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015c8:	230c      	movs	r3, #12
 80015ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4619      	mov	r1, r3
 80015d0:	4806      	ldr	r0, [pc, #24]	@ (80015ec <HAL_FSMC_MspInit+0x94>)
 80015d2:	f002 ff67 	bl	80044a4 <HAL_GPIO_Init>
 80015d6:	e000      	b.n	80015da <HAL_FSMC_MspInit+0x82>
    return;
 80015d8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200001a0 	.word	0x200001a0
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40020c00 	.word	0x40020c00

080015f0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80015f8:	f7ff ffae 	bl	8001558 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08e      	sub	sp, #56	@ 0x38
 8001608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
 800161e:	4b8f      	ldr	r3, [pc, #572]	@ (800185c <MX_GPIO_Init+0x258>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a8e      	ldr	r2, [pc, #568]	@ (800185c <MX_GPIO_Init+0x258>)
 8001624:	f043 0310 	orr.w	r3, r3, #16
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b8c      	ldr	r3, [pc, #560]	@ (800185c <MX_GPIO_Init+0x258>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	623b      	str	r3, [r7, #32]
 8001634:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	4b88      	ldr	r3, [pc, #544]	@ (800185c <MX_GPIO_Init+0x258>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a87      	ldr	r2, [pc, #540]	@ (800185c <MX_GPIO_Init+0x258>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b85      	ldr	r3, [pc, #532]	@ (800185c <MX_GPIO_Init+0x258>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	61fb      	str	r3, [r7, #28]
 8001650:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	4b81      	ldr	r3, [pc, #516]	@ (800185c <MX_GPIO_Init+0x258>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a80      	ldr	r2, [pc, #512]	@ (800185c <MX_GPIO_Init+0x258>)
 800165c:	f043 0320 	orr.w	r3, r3, #32
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b7e      	ldr	r3, [pc, #504]	@ (800185c <MX_GPIO_Init+0x258>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	61bb      	str	r3, [r7, #24]
 800166c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	4b7a      	ldr	r3, [pc, #488]	@ (800185c <MX_GPIO_Init+0x258>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a79      	ldr	r2, [pc, #484]	@ (800185c <MX_GPIO_Init+0x258>)
 8001678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b77      	ldr	r3, [pc, #476]	@ (800185c <MX_GPIO_Init+0x258>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b73      	ldr	r3, [pc, #460]	@ (800185c <MX_GPIO_Init+0x258>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a72      	ldr	r2, [pc, #456]	@ (800185c <MX_GPIO_Init+0x258>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b70      	ldr	r3, [pc, #448]	@ (800185c <MX_GPIO_Init+0x258>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b6c      	ldr	r3, [pc, #432]	@ (800185c <MX_GPIO_Init+0x258>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a6b      	ldr	r2, [pc, #428]	@ (800185c <MX_GPIO_Init+0x258>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b69      	ldr	r3, [pc, #420]	@ (800185c <MX_GPIO_Init+0x258>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b65      	ldr	r3, [pc, #404]	@ (800185c <MX_GPIO_Init+0x258>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a64      	ldr	r2, [pc, #400]	@ (800185c <MX_GPIO_Init+0x258>)
 80016cc:	f043 0308 	orr.w	r3, r3, #8
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b62      	ldr	r3, [pc, #392]	@ (800185c <MX_GPIO_Init+0x258>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	4b5e      	ldr	r3, [pc, #376]	@ (800185c <MX_GPIO_Init+0x258>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a5d      	ldr	r2, [pc, #372]	@ (800185c <MX_GPIO_Init+0x258>)
 80016e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b5b      	ldr	r3, [pc, #364]	@ (800185c <MX_GPIO_Init+0x258>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2170      	movs	r1, #112	@ 0x70
 80016fe:	4858      	ldr	r0, [pc, #352]	@ (8001860 <MX_GPIO_Init+0x25c>)
 8001700:	f003 f86c 	bl	80047dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 800170a:	4856      	ldr	r0, [pc, #344]	@ (8001864 <MX_GPIO_Init+0x260>)
 800170c:	f003 f866 	bl	80047dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001716:	4854      	ldr	r0, [pc, #336]	@ (8001868 <MX_GPIO_Init+0x264>)
 8001718:	f003 f860 	bl	80047dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001722:	4852      	ldr	r0, [pc, #328]	@ (800186c <MX_GPIO_Init+0x268>)
 8001724:	f003 f85a 	bl	80047dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800172e:	4850      	ldr	r0, [pc, #320]	@ (8001870 <MX_GPIO_Init+0x26c>)
 8001730:	f003 f854 	bl	80047dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2108      	movs	r1, #8
 8001738:	484e      	ldr	r0, [pc, #312]	@ (8001874 <MX_GPIO_Init+0x270>)
 800173a:	f003 f84f 	bl	80047dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800173e:	2370      	movs	r3, #112	@ 0x70
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800174e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001752:	4619      	mov	r1, r3
 8001754:	4842      	ldr	r0, [pc, #264]	@ (8001860 <MX_GPIO_Init+0x25c>)
 8001756:	f002 fea5 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 800175a:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001770:	4619      	mov	r1, r3
 8001772:	483c      	ldr	r0, [pc, #240]	@ (8001864 <MX_GPIO_Init+0x260>)
 8001774:	f002 fe96 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8001778:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177e:	2300      	movs	r3, #0
 8001780:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800178a:	4619      	mov	r1, r3
 800178c:	4836      	ldr	r0, [pc, #216]	@ (8001868 <MX_GPIO_Init+0x264>)
 800178e:	f002 fe89 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8001792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	482f      	ldr	r0, [pc, #188]	@ (8001868 <MX_GPIO_Init+0x264>)
 80017ac:	f002 fe7a 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80017b0:	23c0      	movs	r3, #192	@ 0xc0
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	482b      	ldr	r0, [pc, #172]	@ (8001870 <MX_GPIO_Init+0x26c>)
 80017c4:	f002 fe6e 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80017c8:	2330      	movs	r3, #48	@ 0x30
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d8:	4619      	mov	r1, r3
 80017da:	4822      	ldr	r0, [pc, #136]	@ (8001864 <MX_GPIO_Init+0x260>)
 80017dc:	f002 fe62 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 80017e0:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e6:	2301      	movs	r3, #1
 80017e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	481c      	ldr	r0, [pc, #112]	@ (800186c <MX_GPIO_Init+0x268>)
 80017fa:	f002 fe53 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 80017fe:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001808:	2301      	movs	r3, #1
 800180a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	4814      	ldr	r0, [pc, #80]	@ (8001864 <MX_GPIO_Init+0x260>)
 8001814:	f002 fe46 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001818:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	2301      	movs	r3, #1
 8001820:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800182e:	4619      	mov	r1, r3
 8001830:	480f      	ldr	r0, [pc, #60]	@ (8001870 <MX_GPIO_Init+0x26c>)
 8001832:	f002 fe37 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001836:	2308      	movs	r3, #8
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184a:	4619      	mov	r1, r3
 800184c:	4809      	ldr	r0, [pc, #36]	@ (8001874 <MX_GPIO_Init+0x270>)
 800184e:	f002 fe29 	bl	80044a4 <HAL_GPIO_Init>

}
 8001852:	bf00      	nop
 8001854:	3738      	adds	r7, #56	@ 0x38
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40021000 	.word	0x40021000
 8001864:	40020800 	.word	0x40020800
 8001868:	40021400 	.word	0x40021400
 800186c:	40021800 	.word	0x40021800
 8001870:	40020000 	.word	0x40020000
 8001874:	40020c00 	.word	0x40020c00

08001878 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <MX_I2C1_Init+0x50>)
 800187e:	4a13      	ldr	r2, [pc, #76]	@ (80018cc <MX_I2C1_Init+0x54>)
 8001880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <MX_I2C1_Init+0x50>)
 8001884:	4a12      	ldr	r2, [pc, #72]	@ (80018d0 <MX_I2C1_Init+0x58>)
 8001886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001888:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <MX_I2C1_Init+0x50>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <MX_I2C1_Init+0x50>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <MX_I2C1_Init+0x50>)
 8001896:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800189a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800189c:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <MX_I2C1_Init+0x50>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018a2:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <MX_I2C1_Init+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a8:	4b07      	ldr	r3, [pc, #28]	@ (80018c8 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018b4:	4804      	ldr	r0, [pc, #16]	@ (80018c8 <MX_I2C1_Init+0x50>)
 80018b6:	f002 ffc5 	bl	8004844 <HAL_I2C_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018c0:	f000 feb4 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200001a4 	.word	0x200001a4
 80018cc:	40005400 	.word	0x40005400
 80018d0:	000186a0 	.word	0x000186a0

080018d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	@ 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a19      	ldr	r2, [pc, #100]	@ (8001958 <HAL_I2C_MspInit+0x84>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12b      	bne.n	800194e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <HAL_I2C_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a17      	ldr	r2, [pc, #92]	@ (800195c <HAL_I2C_MspInit+0x88>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <HAL_I2C_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001912:	23c0      	movs	r3, #192	@ 0xc0
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001916:	2312      	movs	r3, #18
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001922:	2304      	movs	r3, #4
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	480c      	ldr	r0, [pc, #48]	@ (8001960 <HAL_I2C_MspInit+0x8c>)
 800192e:	f002 fdb9 	bl	80044a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <HAL_I2C_MspInit+0x88>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	4a08      	ldr	r2, [pc, #32]	@ (800195c <HAL_I2C_MspInit+0x88>)
 800193c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001940:	6413      	str	r3, [r2, #64]	@ 0x40
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_I2C_MspInit+0x88>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	@ 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40005400 	.word	0x40005400
 800195c:	40023800 	.word	0x40023800
 8001960:	40020400 	.word	0x40020400

08001964 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800196e:	4a04      	ldr	r2, [pc, #16]	@ (8001980 <LCD_WR_REG+0x1c>)
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	8013      	strh	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	600ffffe 	.word	0x600ffffe

08001984 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800198e:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <LCD_WR_DATA+0x1c>)
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	8053      	strh	r3, [r2, #2]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	600ffffe 	.word	0x600ffffe

080019a4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <LCD_RD_DATA+0x20>)
 80019ac:	885b      	ldrh	r3, [r3, #2]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	b29b      	uxth	r3, r3
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	600ffffe 	.word	0x600ffffe

080019c8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4604      	mov	r4, r0
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4623      	mov	r3, r4
 80019d8:	80fb      	strh	r3, [r7, #6]
 80019da:	4603      	mov	r3, r0
 80019dc:	80bb      	strh	r3, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	807b      	strh	r3, [r7, #2]
 80019e2:	4613      	mov	r3, r2
 80019e4:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80019e6:	202a      	movs	r0, #42	@ 0x2a
 80019e8:	f7ff ffbc 	bl	8001964 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ffc6 	bl	8001984 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ffc0 	bl	8001984 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001a04:	887b      	ldrh	r3, [r7, #2]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ffba 	bl	8001984 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001a10:	887b      	ldrh	r3, [r7, #2]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ffb4 	bl	8001984 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001a1c:	202b      	movs	r0, #43	@ 0x2b
 8001a1e:	f7ff ffa1 	bl	8001964 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001a22:	88bb      	ldrh	r3, [r7, #4]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ffab 	bl	8001984 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001a2e:	88bb      	ldrh	r3, [r7, #4]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ffa5 	bl	8001984 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001a3a:	883b      	ldrh	r3, [r7, #0]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff9f 	bl	8001984 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff99 	bl	8001984 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001a52:	202c      	movs	r0, #44	@ 0x2c
 8001a54:	f7ff ff86 	bl	8001964 <LCD_WR_REG>
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd90      	pop	{r4, r7, pc}

08001a60 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <lcd_Clear+0x60>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <lcd_Clear+0x60>)
 8001a74:	885b      	ldrh	r3, [r3, #2]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff ffa3 	bl	80019c8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	81fb      	strh	r3, [r7, #14]
 8001a86:	e011      	b.n	8001aac <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	81bb      	strh	r3, [r7, #12]
 8001a8c:	e006      	b.n	8001a9c <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff77 	bl	8001984 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001a96:	89bb      	ldrh	r3, [r7, #12]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	81bb      	strh	r3, [r7, #12]
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <lcd_Clear+0x60>)
 8001a9e:	885b      	ldrh	r3, [r3, #2]
 8001aa0:	89ba      	ldrh	r2, [r7, #12]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d3f3      	bcc.n	8001a8e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001aa6:	89fb      	ldrh	r3, [r7, #14]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	81fb      	strh	r3, [r7, #14]
 8001aac:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <lcd_Clear+0x60>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	89fa      	ldrh	r2, [r7, #14]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d3e8      	bcc.n	8001a88 <lcd_Clear+0x28>
		}
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200001f8 	.word	0x200001f8

08001ac4 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	80fb      	strh	r3, [r7, #6]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	80bb      	strh	r3, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001ad6:	88bb      	ldrh	r3, [r7, #4]
 8001ad8:	88fa      	ldrh	r2, [r7, #6]
 8001ada:	88b9      	ldrh	r1, [r7, #4]
 8001adc:	88f8      	ldrh	r0, [r7, #6]
 8001ade:	f7ff ff73 	bl	80019c8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001ae2:	887b      	ldrh	r3, [r7, #2]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff4d 	bl	8001984 <LCD_WR_DATA>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4604      	mov	r4, r0
 8001afc:	4608      	mov	r0, r1
 8001afe:	4611      	mov	r1, r2
 8001b00:	461a      	mov	r2, r3
 8001b02:	4623      	mov	r3, r4
 8001b04:	80fb      	strh	r3, [r7, #6]
 8001b06:	4603      	mov	r3, r0
 8001b08:	80bb      	strh	r3, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	70fb      	strb	r3, [r7, #3]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001b1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b1e:	085b      	lsrs	r3, r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	08db      	lsrs	r3, r3, #3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf14      	ite	ne
 8001b36:	2301      	movne	r3, #1
 8001b38:	2300      	moveq	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	fb12 f303 	smulbb	r3, r2, r3
 8001b4a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	3b20      	subs	r3, #32
 8001b50:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	4413      	add	r3, r2
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29c      	uxth	r4, r3
 8001b60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	88bb      	ldrh	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	88b9      	ldrh	r1, [r7, #4]
 8001b72:	88f8      	ldrh	r0, [r7, #6]
 8001b74:	4622      	mov	r2, r4
 8001b76:	f7ff ff27 	bl	80019c8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	827b      	strh	r3, [r7, #18]
 8001b7e:	e07a      	b.n	8001c76 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001b80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	d028      	beq.n	8001bda <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001b88:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	d108      	bne.n	8001ba2 <lcd_ShowChar+0xae>
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	8a7b      	ldrh	r3, [r7, #18]
 8001b94:	493c      	ldr	r1, [pc, #240]	@ (8001c88 <lcd_ShowChar+0x194>)
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	440a      	add	r2, r1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	75fb      	strb	r3, [r7, #23]
 8001ba0:	e01b      	b.n	8001bda <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001ba2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ba6:	2b18      	cmp	r3, #24
 8001ba8:	d10b      	bne.n	8001bc2 <lcd_ShowChar+0xce>
 8001baa:	78fa      	ldrb	r2, [r7, #3]
 8001bac:	8a79      	ldrh	r1, [r7, #18]
 8001bae:	4837      	ldr	r0, [pc, #220]	@ (8001c8c <lcd_ShowChar+0x198>)
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	4403      	add	r3, r0
 8001bba:	440b      	add	r3, r1
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	75fb      	strb	r3, [r7, #23]
 8001bc0:	e00b      	b.n	8001bda <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001bc2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001bc6:	2b20      	cmp	r3, #32
 8001bc8:	d15a      	bne.n	8001c80 <lcd_ShowChar+0x18c>
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	8a7b      	ldrh	r3, [r7, #18]
 8001bce:	4930      	ldr	r1, [pc, #192]	@ (8001c90 <lcd_ShowChar+0x19c>)
 8001bd0:	0192      	lsls	r2, r2, #6
 8001bd2:	440a      	add	r2, r1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	75bb      	strb	r3, [r7, #22]
 8001bde:	e044      	b.n	8001c6a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001be0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d120      	bne.n	8001c2a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001be8:	7dfa      	ldrb	r2, [r7, #23]
 8001bea:	7dbb      	ldrb	r3, [r7, #22]
 8001bec:	fa42 f303 	asr.w	r3, r2, r3
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <lcd_ShowChar+0x10e>
 8001bf8:	883b      	ldrh	r3, [r7, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fec2 	bl	8001984 <LCD_WR_DATA>
 8001c00:	e003      	b.n	8001c0a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001c02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff febd 	bl	8001984 <LCD_WR_DATA>
				m++;
 8001c0a:	7d7b      	ldrb	r3, [r7, #21]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001c10:	7d7b      	ldrb	r3, [r7, #21]
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c18:	fb01 f202 	mul.w	r2, r1, r2
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d11f      	bne.n	8001c64 <lcd_ShowChar+0x170>
				{
					m=0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	757b      	strb	r3, [r7, #21]
					break;
 8001c28:	e022      	b.n	8001c70 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001c2a:	7dfa      	ldrb	r2, [r7, #23]
 8001c2c:	7dbb      	ldrb	r3, [r7, #22]
 8001c2e:	fa42 f303 	asr.w	r3, r2, r3
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <lcd_ShowChar+0x152>
 8001c3a:	883a      	ldrh	r2, [r7, #0]
 8001c3c:	88b9      	ldrh	r1, [r7, #4]
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff3f 	bl	8001ac4 <lcd_DrawPoint>
				x++;
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001c4c:	88fa      	ldrh	r2, [r7, #6]
 8001c4e:	8a3b      	ldrh	r3, [r7, #16]
 8001c50:	1ad2      	subs	r2, r2, r3
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d105      	bne.n	8001c64 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001c58:	8a3b      	ldrh	r3, [r7, #16]
 8001c5a:	80fb      	strh	r3, [r7, #6]
					y++;
 8001c5c:	88bb      	ldrh	r3, [r7, #4]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	80bb      	strh	r3, [r7, #4]
					break;
 8001c62:	e005      	b.n	8001c70 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001c64:	7dbb      	ldrb	r3, [r7, #22]
 8001c66:	3301      	adds	r3, #1
 8001c68:	75bb      	strb	r3, [r7, #22]
 8001c6a:	7dbb      	ldrb	r3, [r7, #22]
 8001c6c:	2b07      	cmp	r3, #7
 8001c6e:	d9b7      	bls.n	8001be0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001c70:	8a7b      	ldrh	r3, [r7, #18]
 8001c72:	3301      	adds	r3, #1
 8001c74:	827b      	strh	r3, [r7, #18]
 8001c76:	8a7a      	ldrh	r2, [r7, #18]
 8001c78:	89bb      	ldrh	r3, [r7, #12]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d380      	bcc.n	8001b80 <lcd_ShowChar+0x8c>
 8001c7e:	e000      	b.n	8001c82 <lcd_ShowChar+0x18e>
		else return;
 8001c80:	bf00      	nop
				}
			}
		}
	}
}
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd90      	pop	{r4, r7, pc}
 8001c88:	08008c10 	.word	0x08008c10
 8001c8c:	08009200 	.word	0x08009200
 8001c90:	0800a3d0 	.word	0x0800a3d0

08001c94 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	460a      	mov	r2, r1
 8001c9e:	71fb      	strb	r3, [r7, #7]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001ca8:	e004      	b.n	8001cb4 <mypow+0x20>
 8001caa:	79fa      	ldrb	r2, [r7, #7]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	79bb      	ldrb	r3, [r7, #6]
 8001cb6:	1e5a      	subs	r2, r3, #1
 8001cb8:	71ba      	strb	r2, [r7, #6]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f5      	bne.n	8001caa <mypow+0x16>
	return result;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b089      	sub	sp, #36	@ 0x24
 8001cd0:	af04      	add	r7, sp, #16
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	4608      	mov	r0, r1
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4623      	mov	r3, r4
 8001cdc:	80fb      	strh	r3, [r7, #6]
 8001cde:	4603      	mov	r3, r0
 8001ce0:	80bb      	strh	r3, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	807b      	strh	r3, [r7, #2]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001cee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001cf2:	085b      	lsrs	r3, r3, #1
 8001cf4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	e059      	b.n	8001db0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001cfc:	887c      	ldrh	r4, [r7, #2]
 8001cfe:	787a      	ldrb	r2, [r7, #1]
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f7ff ffc1 	bl	8001c94 <mypow>
 8001d12:	4603      	mov	r3, r0
 8001d14:	fbb4 f1f3 	udiv	r1, r4, r3
 8001d18:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc4 <lcd_ShowIntNum+0xf8>)
 8001d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d1e:	08da      	lsrs	r2, r3, #3
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	1aca      	subs	r2, r1, r3
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001d2e:	7bbb      	ldrb	r3, [r7, #14]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d121      	bne.n	8001d78 <lcd_ShowIntNum+0xac>
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	787b      	ldrb	r3, [r7, #1]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	da1c      	bge.n	8001d78 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001d3e:	7b3b      	ldrb	r3, [r7, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d117      	bne.n	8001d74 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	7b7b      	ldrb	r3, [r7, #13]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	fb12 f303 	smulbb	r3, r2, r3
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	4413      	add	r3, r2
 8001d56:	b298      	uxth	r0, r3
 8001d58:	8c3a      	ldrh	r2, [r7, #32]
 8001d5a:	88b9      	ldrh	r1, [r7, #4]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9302      	str	r3, [sp, #8]
 8001d60:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	f7ff fec1 	bl	8001af4 <lcd_ShowChar>
				continue;
 8001d72:	e01a      	b.n	8001daa <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001d74:	2301      	movs	r3, #1
 8001d76:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	7b7b      	ldrb	r3, [r7, #13]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	fb12 f303 	smulbb	r3, r2, r3
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	4413      	add	r3, r2
 8001d8a:	b298      	uxth	r0, r3
 8001d8c:	7b3b      	ldrb	r3, [r7, #12]
 8001d8e:	3330      	adds	r3, #48	@ 0x30
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	8c3c      	ldrh	r4, [r7, #32]
 8001d94:	88b9      	ldrh	r1, [r7, #4]
 8001d96:	2300      	movs	r3, #0
 8001d98:	9302      	str	r3, [sp, #8]
 8001d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	4623      	mov	r3, r4
 8001da6:	f7ff fea5 	bl	8001af4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	3301      	adds	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	787b      	ldrb	r3, [r7, #1]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d3a1      	bcc.n	8001cfc <lcd_ShowIntNum+0x30>
	}
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	cccccccd 	.word	0xcccccccd

08001dc8 <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b08b      	sub	sp, #44	@ 0x2c
 8001dcc:	af04      	add	r7, sp, #16
 8001dce:	4604      	mov	r4, r0
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4623      	mov	r3, r4
 8001ddc:	81fb      	strh	r3, [r7, #14]
 8001dde:	4603      	mov	r3, r0
 8001de0:	81bb      	strh	r3, [r7, #12]
 8001de2:	460b      	mov	r3, r1
 8001de4:	71fb      	strb	r3, [r7, #7]
 8001de6:	4613      	mov	r3, r2
 8001de8:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001dea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001dee:	085b      	lsrs	r3, r3, #1
 8001df0:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001df2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001df6:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001ed0 <lcd_ShowFloatNum+0x108>
 8001dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e02:	ee17 3a90 	vmov	r3, s15
 8001e06:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	75fb      	strb	r3, [r7, #23]
 8001e0c:	e057      	b.n	8001ebe <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001e0e:	8abc      	ldrh	r4, [r7, #20]
 8001e10:	79fa      	ldrb	r2, [r7, #7]
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	200a      	movs	r0, #10
 8001e20:	f7ff ff38 	bl	8001c94 <mypow>
 8001e24:	4603      	mov	r3, r0
 8001e26:	fbb4 f1f3 	udiv	r1, r4, r3
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed4 <lcd_ShowFloatNum+0x10c>)
 8001e2c:	fba3 2301 	umull	r2, r3, r3, r1
 8001e30:	08da      	lsrs	r2, r3, #3
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	1aca      	subs	r2, r1, r3
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001e40:	7dfa      	ldrb	r2, [r7, #23]
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	3b02      	subs	r3, #2
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d11d      	bne.n	8001e86 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	3b02      	subs	r3, #2
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	7dbb      	ldrb	r3, [r7, #22]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	fb12 f303 	smulbb	r3, r2, r3
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b298      	uxth	r0, r3
 8001e60:	88ba      	ldrh	r2, [r7, #4]
 8001e62:	89b9      	ldrh	r1, [r7, #12]
 8001e64:	2300      	movs	r3, #0
 8001e66:	9302      	str	r3, [sp, #8]
 8001e68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	4613      	mov	r3, r2
 8001e74:	222e      	movs	r2, #46	@ 0x2e
 8001e76:	f7ff fe3d 	bl	8001af4 <lcd_ShowChar>
			t++;
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	3301      	adds	r3, #1
 8001e84:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	7dbb      	ldrb	r3, [r7, #22]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	fb12 f303 	smulbb	r3, r2, r3
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	89fb      	ldrh	r3, [r7, #14]
 8001e96:	4413      	add	r3, r2
 8001e98:	b298      	uxth	r0, r3
 8001e9a:	7cfb      	ldrb	r3, [r7, #19]
 8001e9c:	3330      	adds	r3, #48	@ 0x30
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	88bc      	ldrh	r4, [r7, #4]
 8001ea2:	89b9      	ldrh	r1, [r7, #12]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9302      	str	r3, [sp, #8]
 8001ea8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	f7ff fe1e 	bl	8001af4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	75fb      	strb	r3, [r7, #23]
 8001ebe:	7dfa      	ldrb	r2, [r7, #23]
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d3a3      	bcc.n	8001e0e <lcd_ShowFloatNum+0x46>
	}
}
 8001ec6:	bf00      	nop
 8001ec8:	bf00      	nop
 8001eca:	371c      	adds	r7, #28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd90      	pop	{r4, r7, pc}
 8001ed0:	42c80000 	.word	0x42c80000
 8001ed4:	cccccccd 	.word	0xcccccccd

08001ed8 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d007      	beq.n	8001f02 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f1c <lcd_SetDir+0x44>)
 8001ef4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001ef8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001efa:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <lcd_SetDir+0x44>)
 8001efc:	22f0      	movs	r2, #240	@ 0xf0
 8001efe:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001f00:	e006      	b.n	8001f10 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001f02:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <lcd_SetDir+0x44>)
 8001f04:	22f0      	movs	r2, #240	@ 0xf0
 8001f06:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001f08:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <lcd_SetDir+0x44>)
 8001f0a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001f0e:	805a      	strh	r2, [r3, #2]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	200001f8 	.word	0x200001f8

08001f20 <lcd_init>:


void lcd_init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001f24:	2200      	movs	r2, #0
 8001f26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f2a:	48aa      	ldr	r0, [pc, #680]	@ (80021d4 <lcd_init+0x2b4>)
 8001f2c:	f002 fc56 	bl	80047dc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f34:	f001 f96c 	bl	8003210 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f3e:	48a5      	ldr	r0, [pc, #660]	@ (80021d4 <lcd_init+0x2b4>)
 8001f40:	f002 fc4c 	bl	80047dc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f44:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f48:	f001 f962 	bl	8003210 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff ffc3 	bl	8001ed8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001f52:	20d3      	movs	r0, #211	@ 0xd3
 8001f54:	f7ff fd06 	bl	8001964 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001f58:	f7ff fd24 	bl	80019a4 <LCD_RD_DATA>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b9d      	ldr	r3, [pc, #628]	@ (80021d8 <lcd_init+0x2b8>)
 8001f62:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001f64:	f7ff fd1e 	bl	80019a4 <LCD_RD_DATA>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b9a      	ldr	r3, [pc, #616]	@ (80021d8 <lcd_init+0x2b8>)
 8001f6e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001f70:	f7ff fd18 	bl	80019a4 <LCD_RD_DATA>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b97      	ldr	r3, [pc, #604]	@ (80021d8 <lcd_init+0x2b8>)
 8001f7a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001f7c:	4b96      	ldr	r3, [pc, #600]	@ (80021d8 <lcd_init+0x2b8>)
 8001f7e:	889b      	ldrh	r3, [r3, #4]
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	4b94      	ldr	r3, [pc, #592]	@ (80021d8 <lcd_init+0x2b8>)
 8001f86:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001f88:	f7ff fd0c 	bl	80019a4 <LCD_RD_DATA>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b91      	ldr	r3, [pc, #580]	@ (80021d8 <lcd_init+0x2b8>)
 8001f92:	889b      	ldrh	r3, [r3, #4]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	4b8f      	ldr	r3, [pc, #572]	@ (80021d8 <lcd_init+0x2b8>)
 8001f9a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001f9c:	20cf      	movs	r0, #207	@ 0xcf
 8001f9e:	f7ff fce1 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff fcee 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001fa8:	20c1      	movs	r0, #193	@ 0xc1
 8001faa:	f7ff fceb 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001fae:	2030      	movs	r0, #48	@ 0x30
 8001fb0:	f7ff fce8 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001fb4:	20ed      	movs	r0, #237	@ 0xed
 8001fb6:	f7ff fcd5 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001fba:	2064      	movs	r0, #100	@ 0x64
 8001fbc:	f7ff fce2 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	f7ff fcdf 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001fc6:	2012      	movs	r0, #18
 8001fc8:	f7ff fcdc 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001fcc:	2081      	movs	r0, #129	@ 0x81
 8001fce:	f7ff fcd9 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001fd2:	20e8      	movs	r0, #232	@ 0xe8
 8001fd4:	f7ff fcc6 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001fd8:	2085      	movs	r0, #133	@ 0x85
 8001fda:	f7ff fcd3 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001fde:	2010      	movs	r0, #16
 8001fe0:	f7ff fcd0 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001fe4:	207a      	movs	r0, #122	@ 0x7a
 8001fe6:	f7ff fccd 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001fea:	20cb      	movs	r0, #203	@ 0xcb
 8001fec:	f7ff fcba 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001ff0:	2039      	movs	r0, #57	@ 0x39
 8001ff2:	f7ff fcc7 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001ff6:	202c      	movs	r0, #44	@ 0x2c
 8001ff8:	f7ff fcc4 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f7ff fcc1 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002002:	2034      	movs	r0, #52	@ 0x34
 8002004:	f7ff fcbe 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002008:	2002      	movs	r0, #2
 800200a:	f7ff fcbb 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800200e:	20f7      	movs	r0, #247	@ 0xf7
 8002010:	f7ff fca8 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002014:	2020      	movs	r0, #32
 8002016:	f7ff fcb5 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800201a:	20ea      	movs	r0, #234	@ 0xea
 800201c:	f7ff fca2 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002020:	2000      	movs	r0, #0
 8002022:	f7ff fcaf 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002026:	2000      	movs	r0, #0
 8002028:	f7ff fcac 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800202c:	20c0      	movs	r0, #192	@ 0xc0
 800202e:	f7ff fc99 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002032:	201b      	movs	r0, #27
 8002034:	f7ff fca6 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002038:	20c1      	movs	r0, #193	@ 0xc1
 800203a:	f7ff fc93 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800203e:	2001      	movs	r0, #1
 8002040:	f7ff fca0 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002044:	20c5      	movs	r0, #197	@ 0xc5
 8002046:	f7ff fc8d 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800204a:	2030      	movs	r0, #48	@ 0x30
 800204c:	f7ff fc9a 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002050:	2030      	movs	r0, #48	@ 0x30
 8002052:	f7ff fc97 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002056:	20c7      	movs	r0, #199	@ 0xc7
 8002058:	f7ff fc84 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800205c:	20b7      	movs	r0, #183	@ 0xb7
 800205e:	f7ff fc91 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002062:	2036      	movs	r0, #54	@ 0x36
 8002064:	f7ff fc7e 	bl	8001964 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8002068:	2008      	movs	r0, #8
 800206a:	f7ff fc8b 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800206e:	203a      	movs	r0, #58	@ 0x3a
 8002070:	f7ff fc78 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002074:	2055      	movs	r0, #85	@ 0x55
 8002076:	f7ff fc85 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800207a:	20b1      	movs	r0, #177	@ 0xb1
 800207c:	f7ff fc72 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002080:	2000      	movs	r0, #0
 8002082:	f7ff fc7f 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002086:	201a      	movs	r0, #26
 8002088:	f7ff fc7c 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800208c:	20b6      	movs	r0, #182	@ 0xb6
 800208e:	f7ff fc69 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002092:	200a      	movs	r0, #10
 8002094:	f7ff fc76 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002098:	20a2      	movs	r0, #162	@ 0xa2
 800209a:	f7ff fc73 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800209e:	20f2      	movs	r0, #242	@ 0xf2
 80020a0:	f7ff fc60 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff fc6d 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80020aa:	2026      	movs	r0, #38	@ 0x26
 80020ac:	f7ff fc5a 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80020b0:	2001      	movs	r0, #1
 80020b2:	f7ff fc67 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80020b6:	20e0      	movs	r0, #224	@ 0xe0
 80020b8:	f7ff fc54 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80020bc:	200f      	movs	r0, #15
 80020be:	f7ff fc61 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80020c2:	202a      	movs	r0, #42	@ 0x2a
 80020c4:	f7ff fc5e 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80020c8:	2028      	movs	r0, #40	@ 0x28
 80020ca:	f7ff fc5b 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80020ce:	2008      	movs	r0, #8
 80020d0:	f7ff fc58 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80020d4:	200e      	movs	r0, #14
 80020d6:	f7ff fc55 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80020da:	2008      	movs	r0, #8
 80020dc:	f7ff fc52 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80020e0:	2054      	movs	r0, #84	@ 0x54
 80020e2:	f7ff fc4f 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80020e6:	20a9      	movs	r0, #169	@ 0xa9
 80020e8:	f7ff fc4c 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80020ec:	2043      	movs	r0, #67	@ 0x43
 80020ee:	f7ff fc49 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80020f2:	200a      	movs	r0, #10
 80020f4:	f7ff fc46 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020f8:	200f      	movs	r0, #15
 80020fa:	f7ff fc43 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020fe:	2000      	movs	r0, #0
 8002100:	f7ff fc40 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002104:	2000      	movs	r0, #0
 8002106:	f7ff fc3d 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800210a:	2000      	movs	r0, #0
 800210c:	f7ff fc3a 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff fc37 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002116:	20e1      	movs	r0, #225	@ 0xe1
 8002118:	f7ff fc24 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800211c:	2000      	movs	r0, #0
 800211e:	f7ff fc31 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002122:	2015      	movs	r0, #21
 8002124:	f7ff fc2e 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002128:	2017      	movs	r0, #23
 800212a:	f7ff fc2b 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800212e:	2007      	movs	r0, #7
 8002130:	f7ff fc28 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002134:	2011      	movs	r0, #17
 8002136:	f7ff fc25 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800213a:	2006      	movs	r0, #6
 800213c:	f7ff fc22 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002140:	202b      	movs	r0, #43	@ 0x2b
 8002142:	f7ff fc1f 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002146:	2056      	movs	r0, #86	@ 0x56
 8002148:	f7ff fc1c 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800214c:	203c      	movs	r0, #60	@ 0x3c
 800214e:	f7ff fc19 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002152:	2005      	movs	r0, #5
 8002154:	f7ff fc16 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002158:	2010      	movs	r0, #16
 800215a:	f7ff fc13 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800215e:	200f      	movs	r0, #15
 8002160:	f7ff fc10 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002164:	203f      	movs	r0, #63	@ 0x3f
 8002166:	f7ff fc0d 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800216a:	203f      	movs	r0, #63	@ 0x3f
 800216c:	f7ff fc0a 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002170:	200f      	movs	r0, #15
 8002172:	f7ff fc07 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002176:	202b      	movs	r0, #43	@ 0x2b
 8002178:	f7ff fbf4 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800217c:	2000      	movs	r0, #0
 800217e:	f7ff fc01 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002182:	2000      	movs	r0, #0
 8002184:	f7ff fbfe 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002188:	2001      	movs	r0, #1
 800218a:	f7ff fbfb 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800218e:	203f      	movs	r0, #63	@ 0x3f
 8002190:	f7ff fbf8 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002194:	202a      	movs	r0, #42	@ 0x2a
 8002196:	f7ff fbe5 	bl	8001964 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800219a:	2000      	movs	r0, #0
 800219c:	f7ff fbf2 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7ff fbef 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f7ff fbec 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80021ac:	20ef      	movs	r0, #239	@ 0xef
 80021ae:	f7ff fbe9 	bl	8001984 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80021b2:	2011      	movs	r0, #17
 80021b4:	f7ff fbd6 	bl	8001964 <LCD_WR_REG>
	HAL_Delay(120);
 80021b8:	2078      	movs	r0, #120	@ 0x78
 80021ba:	f001 f829 	bl	8003210 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80021be:	2029      	movs	r0, #41	@ 0x29
 80021c0:	f7ff fbd0 	bl	8001964 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80021c4:	2201      	movs	r2, #1
 80021c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021ca:	4804      	ldr	r0, [pc, #16]	@ (80021dc <lcd_init+0x2bc>)
 80021cc:	f002 fb06 	bl	80047dc <HAL_GPIO_WritePin>
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40020800 	.word	0x40020800
 80021d8:	200001f8 	.word	0x200001f8
 80021dc:	40020000 	.word	0x40020000

080021e0 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b08b      	sub	sp, #44	@ 0x2c
 80021e4:	af04      	add	r7, sp, #16
 80021e6:	60ba      	str	r2, [r7, #8]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4603      	mov	r3, r0
 80021ec:	81fb      	strh	r3, [r7, #14]
 80021ee:	460b      	mov	r3, r1
 80021f0:	81bb      	strh	r3, [r7, #12]
 80021f2:	4613      	mov	r3, r2
 80021f4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80021f6:	89fb      	ldrh	r3, [r7, #14]
 80021f8:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80021fe:	e048      	b.n	8002292 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d145      	bne.n	8002292 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002206:	89fa      	ldrh	r2, [r7, #14]
 8002208:	4b26      	ldr	r3, [pc, #152]	@ (80022a4 <lcd_ShowStr+0xc4>)
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002212:	085b      	lsrs	r3, r3, #1
 8002214:	b2db      	uxtb	r3, r3
 8002216:	1acb      	subs	r3, r1, r3
 8002218:	429a      	cmp	r2, r3
 800221a:	dc3f      	bgt.n	800229c <lcd_ShowStr+0xbc>
 800221c:	89ba      	ldrh	r2, [r7, #12]
 800221e:	4b21      	ldr	r3, [pc, #132]	@ (80022a4 <lcd_ShowStr+0xc4>)
 8002220:	885b      	ldrh	r3, [r3, #2]
 8002222:	4619      	mov	r1, r3
 8002224:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002228:	1acb      	subs	r3, r1, r3
 800222a:	429a      	cmp	r2, r3
 800222c:	dc36      	bgt.n	800229c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b80      	cmp	r3, #128	@ 0x80
 8002234:	d902      	bls.n	800223c <lcd_ShowStr+0x5c>
 8002236:	2301      	movs	r3, #1
 8002238:	75fb      	strb	r3, [r7, #23]
 800223a:	e02a      	b.n	8002292 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b0d      	cmp	r3, #13
 8002242:	d10b      	bne.n	800225c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002244:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002248:	b29a      	uxth	r2, r3
 800224a:	89bb      	ldrh	r3, [r7, #12]
 800224c:	4413      	add	r3, r2
 800224e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002250:	8abb      	ldrh	r3, [r7, #20]
 8002252:	81fb      	strh	r3, [r7, #14]
					str++;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	3301      	adds	r3, #1
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	e017      	b.n	800228c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	781a      	ldrb	r2, [r3, #0]
 8002260:	88fc      	ldrh	r4, [r7, #6]
 8002262:	89b9      	ldrh	r1, [r7, #12]
 8002264:	89f8      	ldrh	r0, [r7, #14]
 8002266:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800226a:	9302      	str	r3, [sp, #8]
 800226c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	4623      	mov	r3, r4
 8002278:	f7ff fc3c 	bl	8001af4 <lcd_ShowChar>
					x+=sizey/2;
 800227c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002280:	085b      	lsrs	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	89fb      	ldrh	r3, [r7, #14]
 8002288:	4413      	add	r3, r2
 800228a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	3301      	adds	r3, #1
 8002290:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1b2      	bne.n	8002200 <lcd_ShowStr+0x20>
 800229a:	e000      	b.n	800229e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800229c:	bf00      	nop
			}
		}
	}
}
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd90      	pop	{r4, r7, pc}
 80022a4:	200001f8 	.word	0x200001f8

080022a8 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80022ac:	4b3f      	ldr	r3, [pc, #252]	@ (80023ac <led7_Scan+0x104>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	4b3d      	ldr	r3, [pc, #244]	@ (80023ac <led7_Scan+0x104>)
 80022b6:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80022b8:	4b3d      	ldr	r3, [pc, #244]	@ (80023b0 <led7_Scan+0x108>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a3d      	ldr	r2, [pc, #244]	@ (80023b4 <led7_Scan+0x10c>)
 80022be:	5cd3      	ldrb	r3, [r2, r3]
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	b21a      	sxth	r2, r3
 80022c4:	4b39      	ldr	r3, [pc, #228]	@ (80023ac <led7_Scan+0x104>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	4313      	orrs	r3, r2
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	4b36      	ldr	r3, [pc, #216]	@ (80023ac <led7_Scan+0x104>)
 80022d2:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80022d4:	4b36      	ldr	r3, [pc, #216]	@ (80023b0 <led7_Scan+0x108>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d847      	bhi.n	800236c <led7_Scan+0xc4>
 80022dc:	a201      	add	r2, pc, #4	@ (adr r2, 80022e4 <led7_Scan+0x3c>)
 80022de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e2:	bf00      	nop
 80022e4:	080022f5 	.word	0x080022f5
 80022e8:	08002313 	.word	0x08002313
 80022ec:	08002331 	.word	0x08002331
 80022f0:	0800234f 	.word	0x0800234f
	case 0:
		spi_buffer |= 0x00b0;
 80022f4:	4b2d      	ldr	r3, [pc, #180]	@ (80023ac <led7_Scan+0x104>)
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	4b2b      	ldr	r3, [pc, #172]	@ (80023ac <led7_Scan+0x104>)
 8002300:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002302:	4b2a      	ldr	r3, [pc, #168]	@ (80023ac <led7_Scan+0x104>)
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800230a:	b29a      	uxth	r2, r3
 800230c:	4b27      	ldr	r3, [pc, #156]	@ (80023ac <led7_Scan+0x104>)
 800230e:	801a      	strh	r2, [r3, #0]
		break;
 8002310:	e02d      	b.n	800236e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002312:	4b26      	ldr	r3, [pc, #152]	@ (80023ac <led7_Scan+0x104>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 800231a:	b29a      	uxth	r2, r3
 800231c:	4b23      	ldr	r3, [pc, #140]	@ (80023ac <led7_Scan+0x104>)
 800231e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002320:	4b22      	ldr	r3, [pc, #136]	@ (80023ac <led7_Scan+0x104>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	f023 0320 	bic.w	r3, r3, #32
 8002328:	b29a      	uxth	r2, r3
 800232a:	4b20      	ldr	r3, [pc, #128]	@ (80023ac <led7_Scan+0x104>)
 800232c:	801a      	strh	r2, [r3, #0]
		break;
 800232e:	e01e      	b.n	800236e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002330:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <led7_Scan+0x104>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8002338:	b29a      	uxth	r2, r3
 800233a:	4b1c      	ldr	r3, [pc, #112]	@ (80023ac <led7_Scan+0x104>)
 800233c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800233e:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <led7_Scan+0x104>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	f023 0310 	bic.w	r3, r3, #16
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <led7_Scan+0x104>)
 800234a:	801a      	strh	r2, [r3, #0]
		break;
 800234c:	e00f      	b.n	800236e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800234e:	4b17      	ldr	r3, [pc, #92]	@ (80023ac <led7_Scan+0x104>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002356:	b29a      	uxth	r2, r3
 8002358:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <led7_Scan+0x104>)
 800235a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 800235c:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <led7_Scan+0x104>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002364:	b29a      	uxth	r2, r3
 8002366:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <led7_Scan+0x104>)
 8002368:	801a      	strh	r2, [r3, #0]
		break;
 800236a:	e000      	b.n	800236e <led7_Scan+0xc6>
	default:
		break;
 800236c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800236e:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <led7_Scan+0x108>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	3301      	adds	r3, #1
 8002374:	425a      	negs	r2, r3
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	f002 0203 	and.w	r2, r2, #3
 800237e:	bf58      	it	pl
 8002380:	4253      	negpl	r3, r2
 8002382:	4a0b      	ldr	r2, [pc, #44]	@ (80023b0 <led7_Scan+0x108>)
 8002384:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2140      	movs	r1, #64	@ 0x40
 800238a:	480b      	ldr	r0, [pc, #44]	@ (80023b8 <led7_Scan+0x110>)
 800238c:	f002 fa26 	bl	80047dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002390:	2301      	movs	r3, #1
 8002392:	2202      	movs	r2, #2
 8002394:	4905      	ldr	r1, [pc, #20]	@ (80023ac <led7_Scan+0x104>)
 8002396:	4809      	ldr	r0, [pc, #36]	@ (80023bc <led7_Scan+0x114>)
 8002398:	f003 f8b9 	bl	800550e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800239c:	2201      	movs	r2, #1
 800239e:	2140      	movs	r1, #64	@ 0x40
 80023a0:	4805      	ldr	r0, [pc, #20]	@ (80023b8 <led7_Scan+0x110>)
 80023a2:	f002 fa1b 	bl	80047dc <HAL_GPIO_WritePin>
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000004 	.word	0x20000004
 80023b0:	20000200 	.word	0x20000200
 80023b4:	20000000 	.word	0x20000000
 80023b8:	40021800 	.word	0x40021800
 80023bc:	20000218 	.word	0x20000218

080023c0 <lightProcess>:
 */
#include "light_control.h"

uint8_t light_status = 0;

void lightProcess(){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 80023c4:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <lightProcess+0x58>)
 80023c6:	8b5b      	ldrh	r3, [r3, #26]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d113      	bne.n	80023f4 <lightProcess+0x34>
		light_status = 1 - light_status;
 80023cc:	4b13      	ldr	r3, [pc, #76]	@ (800241c <lightProcess+0x5c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	f1c3 0301 	rsb	r3, r3, #1
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b11      	ldr	r3, [pc, #68]	@ (800241c <lightProcess+0x5c>)
 80023d8:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 80023da:	4b10      	ldr	r3, [pc, #64]	@ (800241c <lightProcess+0x5c>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d104      	bne.n	80023ec <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 80023e2:	2101      	movs	r1, #1
 80023e4:	480e      	ldr	r0, [pc, #56]	@ (8002420 <lightProcess+0x60>)
 80023e6:	f000 fd2b 	bl	8002e40 <uart_EspSendBytes>
 80023ea:	e003      	b.n	80023f4 <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 80023ec:	2101      	movs	r1, #1
 80023ee:	480d      	ldr	r0, [pc, #52]	@ (8002424 <lightProcess+0x64>)
 80023f0:	f000 fd26 	bl	8002e40 <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 80023f4:	4b09      	ldr	r3, [pc, #36]	@ (800241c <lightProcess+0x5c>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d105      	bne.n	8002408 <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 80023fc:	2201      	movs	r2, #1
 80023fe:	2120      	movs	r1, #32
 8002400:	4809      	ldr	r0, [pc, #36]	@ (8002428 <lightProcess+0x68>)
 8002402:	f002 f9eb 	bl	80047dc <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 8002406:	e004      	b.n	8002412 <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	2120      	movs	r1, #32
 800240c:	4806      	ldr	r0, [pc, #24]	@ (8002428 <lightProcess+0x68>)
 800240e:	f002 f9e5 	bl	80047dc <HAL_GPIO_WritePin>
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000012c 	.word	0x2000012c
 800241c:	20000204 	.word	0x20000204
 8002420:	08008be8 	.word	0x08008be8
 8002424:	08008bec 	.word	0x08008bec
 8002428:	40021000 	.word	0x40021000

0800242c <test_Esp>:

void test_Esp(){
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af04      	add	r7, sp, #16
	if(uart_EspCheck() == 0){
 8002432:	f000 fd61 	bl	8002ef8 <uart_EspCheck>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d111      	bne.n	8002460 <test_Esp+0x34>
		lcd_ShowStr(10, 50, "ESP Unconnected", GREEN, BLACK, 24, 0);
 800243c:	2300      	movs	r3, #0
 800243e:	9302      	str	r3, [sp, #8]
 8002440:	2318      	movs	r3, #24
 8002442:	9301      	str	r3, [sp, #4]
 8002444:	2300      	movs	r3, #0
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800244c:	4a0c      	ldr	r2, [pc, #48]	@ (8002480 <test_Esp+0x54>)
 800244e:	2132      	movs	r1, #50	@ 0x32
 8002450:	200a      	movs	r0, #10
 8002452:	f7ff fec5 	bl	80021e0 <lcd_ShowStr>
		uart_EspSendBytes("o", 1);
 8002456:	2101      	movs	r1, #1
 8002458:	480a      	ldr	r0, [pc, #40]	@ (8002484 <test_Esp+0x58>)
 800245a:	f000 fcf1 	bl	8002e40 <uart_EspSendBytes>
	}
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
}
 800245e:	e00c      	b.n	800247a <test_Esp+0x4e>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
 8002460:	2300      	movs	r3, #0
 8002462:	9302      	str	r3, [sp, #8]
 8002464:	2318      	movs	r3, #24
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	2300      	movs	r3, #0
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002470:	4a05      	ldr	r2, [pc, #20]	@ (8002488 <test_Esp+0x5c>)
 8002472:	2132      	movs	r1, #50	@ 0x32
 8002474:	200a      	movs	r0, #10
 8002476:	f7ff feb3 	bl	80021e0 <lcd_ShowStr>
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	08008bf0 	.word	0x08008bf0
 8002484:	08008c00 	.word	0x08008c00
 8002488:	08008c04 	.word	0x08008c04

0800248c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002490:	f000 fe4c 	bl	800312c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002494:	f000 f82c 	bl	80024f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002498:	f7ff f8b4 	bl	8001604 <MX_GPIO_Init>
  MX_TIM2_Init();
 800249c:	f000 fb94 	bl	8002bc8 <MX_TIM2_Init>
  MX_SPI1_Init();
 80024a0:	f000 f9fc 	bl	800289c <MX_SPI1_Init>
  MX_FSMC_Init();
 80024a4:	f7fe ffde 	bl	8001464 <MX_FSMC_Init>
  MX_I2C1_Init();
 80024a8:	f7ff f9e6 	bl	8001878 <MX_I2C1_Init>
  MX_TIM13_Init();
 80024ac:	f000 fbd8 	bl	8002c60 <MX_TIM13_Init>
  MX_DMA_Init();
 80024b0:	f7fe ffb8 	bl	8001424 <MX_DMA_Init>
  MX_ADC1_Init();
 80024b4:	f7fe fe20 	bl	80010f8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80024b8:	f000 fb36 	bl	8002b28 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80024bc:	f000 fd56 	bl	8002f6c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80024c0:	f000 fd2a 	bl	8002f18 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80024c4:	f000 f87e 	bl	80025c4 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7ff fac9 	bl	8001a60 <lcd_Clear>
 while (1)
  {
	  // 50ms task
	  if(flag_timer2 == 1){
 80024ce:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <main+0x60>)
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d1fb      	bne.n	80024ce <main+0x42>
		  flag_timer2 = 0;
 80024d6:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <main+0x60>)
 80024d8:	2200      	movs	r2, #0
 80024da:	801a      	strh	r2, [r3, #0]
		  button_Scan();
 80024dc:	f7fe ff36 	bl	800134c <button_Scan>
		  test_Adc();
 80024e0:	f7fe fc64 	bl	8000dac <test_Adc>
		  test_LedDebug();
 80024e4:	f000 f87e 	bl	80025e4 <test_LedDebug>
	  if(flag_timer2 == 1){
 80024e8:	e7f1      	b.n	80024ce <main+0x42>
 80024ea:	bf00      	nop
 80024ec:	20000212 	.word	0x20000212

080024f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b094      	sub	sp, #80	@ 0x50
 80024f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024f6:	f107 0320 	add.w	r3, r7, #32
 80024fa:	2230      	movs	r2, #48	@ 0x30
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f005 fe96 	bl	8008230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002504:	f107 030c 	add.w	r3, r7, #12
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002514:	2300      	movs	r3, #0
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	4b28      	ldr	r3, [pc, #160]	@ (80025bc <SystemClock_Config+0xcc>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	4a27      	ldr	r2, [pc, #156]	@ (80025bc <SystemClock_Config+0xcc>)
 800251e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002522:	6413      	str	r3, [r2, #64]	@ 0x40
 8002524:	4b25      	ldr	r3, [pc, #148]	@ (80025bc <SystemClock_Config+0xcc>)
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002530:	2300      	movs	r3, #0
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	4b22      	ldr	r3, [pc, #136]	@ (80025c0 <SystemClock_Config+0xd0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a21      	ldr	r2, [pc, #132]	@ (80025c0 <SystemClock_Config+0xd0>)
 800253a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b1f      	ldr	r3, [pc, #124]	@ (80025c0 <SystemClock_Config+0xd0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800254c:	2302      	movs	r3, #2
 800254e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002550:	2301      	movs	r3, #1
 8002552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002554:	2310      	movs	r3, #16
 8002556:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002558:	2302      	movs	r3, #2
 800255a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800255c:	2300      	movs	r3, #0
 800255e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002560:	2308      	movs	r3, #8
 8002562:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002564:	23a8      	movs	r3, #168	@ 0xa8
 8002566:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002568:	2302      	movs	r3, #2
 800256a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800256c:	2304      	movs	r3, #4
 800256e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002570:	f107 0320 	add.w	r3, r7, #32
 8002574:	4618      	mov	r0, r3
 8002576:	f002 faa9 	bl	8004acc <HAL_RCC_OscConfig>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002580:	f000 f854 	bl	800262c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002584:	230f      	movs	r3, #15
 8002586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002588:	2302      	movs	r3, #2
 800258a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002590:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002594:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002596:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800259a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	2105      	movs	r1, #5
 80025a2:	4618      	mov	r0, r3
 80025a4:	f002 fd0a 	bl	8004fbc <HAL_RCC_ClockConfig>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80025ae:	f000 f83d 	bl	800262c <Error_Handler>
  }
}
 80025b2:	bf00      	nop
 80025b4:	3750      	adds	r7, #80	@ 0x50
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40007000 	.word	0x40007000

080025c4 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
	  timer_init();
 80025c8:	f000 f914 	bl	80027f4 <timer_init>
	  button_init();
 80025cc:	f7fe feb2 	bl	8001334 <button_init>
	  lcd_init();
 80025d0:	f7ff fca6 	bl	8001f20 <lcd_init>
	  uart_init_esp();
 80025d4:	f000 fc1e 	bl	8002e14 <uart_init_esp>
	  setTimer2(50);
 80025d8:	2032      	movs	r0, #50	@ 0x32
 80025da:	f000 f919 	bl	8002810 <setTimer2>
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80025e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002620 <test_LedDebug+0x3c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <test_LedDebug+0x40>)
 80025f0:	fb83 1302 	smull	r1, r3, r3, r2
 80025f4:	10d9      	asrs	r1, r3, #3
 80025f6:	17d3      	asrs	r3, r2, #31
 80025f8:	1ac9      	subs	r1, r1, r3
 80025fa:	460b      	mov	r3, r1
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	1ad1      	subs	r1, r2, r3
 8002604:	b2ca      	uxtb	r2, r1
 8002606:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <test_LedDebug+0x3c>)
 8002608:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 800260a:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <test_LedDebug+0x3c>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002612:	2110      	movs	r1, #16
 8002614:	4804      	ldr	r0, [pc, #16]	@ (8002628 <test_LedDebug+0x44>)
 8002616:	f002 f8fa 	bl	800480e <HAL_GPIO_TogglePin>
	}
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000205 	.word	0x20000205
 8002624:	66666667 	.word	0x66666667
 8002628:	40021000 	.word	0x40021000

0800262c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002630:	b672      	cpsid	i
}
 8002632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <Error_Handler+0x8>

08002638 <sensor_Read>:

void sensor_init(){
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
}

void sensor_Read(){
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 800263c:	2205      	movs	r2, #5
 800263e:	4903      	ldr	r1, [pc, #12]	@ (800264c <sensor_Read+0x14>)
 8002640:	4803      	ldr	r0, [pc, #12]	@ (8002650 <sensor_Read+0x18>)
 8002642:	f000 fe4d 	bl	80032e0 <HAL_ADC_Start_DMA>
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000208 	.word	0x20000208
 8002650:	20000084 	.word	0x20000084

08002654 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002658:	4b03      	ldr	r3, [pc, #12]	@ (8002668 <sensor_GetLight+0x14>)
 800265a:	889b      	ldrh	r3, [r3, #4]
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000208 	.word	0x20000208

0800266c <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002670:	4b03      	ldr	r3, [pc, #12]	@ (8002680 <sensor_GetPotentiometer+0x14>)
 8002672:	88db      	ldrh	r3, [r3, #6]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000208 	.word	0x20000208
 8002684:	00000000 	.word	0x00000000

08002688 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 800268c:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <sensor_GetVoltage+0x70>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002698:	ee17 0a90 	vmov	r0, s15
 800269c:	f7fd ff54 	bl	8000548 <__aeabi_f2d>
 80026a0:	a311      	add	r3, pc, #68	@ (adr r3, 80026e8 <sensor_GetVoltage+0x60>)
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	f7fd ffa7 	bl	80005f8 <__aeabi_dmul>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <sensor_GetVoltage+0x74>)
 80026b8:	f7fd ff9e 	bl	80005f8 <__aeabi_dmul>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	a30a      	add	r3, pc, #40	@ (adr r3, 80026f0 <sensor_GetVoltage+0x68>)
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	f7fe f8bf 	bl	800084c <__aeabi_ddiv>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe f9a1 	bl	8000a1c <__aeabi_d2f>
 80026da:	4603      	mov	r3, r0
 80026dc:	ee07 3a90 	vmov	s15, r3
}
 80026e0:	eeb0 0a67 	vmov.f32	s0, s15
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	66666666 	.word	0x66666666
 80026ec:	400a6666 	.word	0x400a6666
 80026f0:	cccccccd 	.word	0xcccccccd
 80026f4:	40b908ac 	.word	0x40b908ac
 80026f8:	20000208 	.word	0x20000208
 80026fc:	40280000 	.word	0x40280000

08002700 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 8002704:	4b28      	ldr	r3, [pc, #160]	@ (80027a8 <sensor_GetCurrent+0xa8>)
 8002706:	885b      	ldrh	r3, [r3, #2]
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002710:	ee17 0a90 	vmov	r0, s15
 8002714:	f7fd ff18 	bl	8000548 <__aeabi_f2d>
 8002718:	a31f      	add	r3, pc, #124	@ (adr r3, 8002798 <sensor_GetCurrent+0x98>)
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	f7fd ff6b 	bl	80005f8 <__aeabi_dmul>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	4b1f      	ldr	r3, [pc, #124]	@ (80027ac <sensor_GetCurrent+0xac>)
 8002730:	f7fd ff62 	bl	80005f8 <__aeabi_dmul>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	a318      	add	r3, pc, #96	@ (adr r3, 80027a0 <sensor_GetCurrent+0xa0>)
 800273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002742:	f7fe f883 	bl	800084c <__aeabi_ddiv>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	4b17      	ldr	r3, [pc, #92]	@ (80027b0 <sensor_GetCurrent+0xb0>)
 8002754:	f7fd fd98 	bl	8000288 <__aeabi_dsub>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <sensor_GetCurrent+0xb4>)
 8002766:	f7fd ff47 	bl	80005f8 <__aeabi_dmul>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	4b0e      	ldr	r3, [pc, #56]	@ (80027b0 <sensor_GetCurrent+0xb0>)
 8002778:	f7fe f868 	bl	800084c <__aeabi_ddiv>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	f7fe f94a 	bl	8000a1c <__aeabi_d2f>
 8002788:	4603      	mov	r3, r0
 800278a:	ee07 3a90 	vmov	s15, r3
}
 800278e:	eeb0 0a67 	vmov.f32	s0, s15
 8002792:	bd80      	pop	{r7, pc}
 8002794:	f3af 8000 	nop.w
 8002798:	66666666 	.word	0x66666666
 800279c:	400a6666 	.word	0x400a6666
 80027a0:	147ae148 	.word	0x147ae148
 80027a4:	40a4b2ee 	.word	0x40a4b2ee
 80027a8:	20000208 	.word	0x20000208
 80027ac:	408f4000 	.word	0x408f4000
 80027b0:	40040000 	.word	0x40040000
 80027b4:	40140000 	.word	0x40140000

080027b8 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80027bc:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <sensor_GetTemperature+0x30>)
 80027be:	891b      	ldrh	r3, [r3, #8]
 80027c0:	ee07 3a90 	vmov	s15, r3
 80027c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80027ec <sensor_GetTemperature+0x34>
 80027cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027d0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80027f0 <sensor_GetTemperature+0x38>
 80027d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027d8:	eef0 7a66 	vmov.f32	s15, s13
}
 80027dc:	eeb0 0a67 	vmov.f32	s0, s15
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	20000208 	.word	0x20000208
 80027ec:	43a50000 	.word	0x43a50000
 80027f0:	457ff000 	.word	0x457ff000

080027f4 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80027f8:	4803      	ldr	r0, [pc, #12]	@ (8002808 <timer_init+0x14>)
 80027fa:	f003 fca3 	bl	8006144 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 80027fe:	4803      	ldr	r0, [pc, #12]	@ (800280c <timer_init+0x18>)
 8002800:	f003 fc38 	bl	8006074 <HAL_TIM_Base_Start>
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}
 8002808:	200002bc 	.word	0x200002bc
 800280c:	20000274 	.word	0x20000274

08002810 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800281a:	4a08      	ldr	r2, [pc, #32]	@ (800283c <setTimer2+0x2c>)
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002820:	4b06      	ldr	r3, [pc, #24]	@ (800283c <setTimer2+0x2c>)
 8002822:	881a      	ldrh	r2, [r3, #0]
 8002824:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <setTimer2+0x30>)
 8002826:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002828:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <setTimer2+0x34>)
 800282a:	2200      	movs	r2, #0
 800282c:	801a      	strh	r2, [r3, #0]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000216 	.word	0x20000216
 8002840:	20000214 	.word	0x20000214
 8002844:	20000212 	.word	0x20000212

08002848 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002858:	d116      	bne.n	8002888 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800285a:	4b0d      	ldr	r3, [pc, #52]	@ (8002890 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d010      	beq.n	8002884 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800286c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800286e:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002876:	4b07      	ldr	r3, [pc, #28]	@ (8002894 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002878:	2201      	movs	r2, #1
 800287a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800287e:	881a      	ldrh	r2, [r3, #0]
 8002880:	4b03      	ldr	r3, [pc, #12]	@ (8002890 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002882:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002884:	f7ff fd10 	bl	80022a8 <led7_Scan>
	}
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000214 	.word	0x20000214
 8002894:	20000212 	.word	0x20000212
 8002898:	20000216 	.word	0x20000216

0800289c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80028a0:	4b17      	ldr	r3, [pc, #92]	@ (8002900 <MX_SPI1_Init+0x64>)
 80028a2:	4a18      	ldr	r2, [pc, #96]	@ (8002904 <MX_SPI1_Init+0x68>)
 80028a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028a6:	4b16      	ldr	r3, [pc, #88]	@ (8002900 <MX_SPI1_Init+0x64>)
 80028a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028ae:	4b14      	ldr	r3, [pc, #80]	@ (8002900 <MX_SPI1_Init+0x64>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028b4:	4b12      	ldr	r3, [pc, #72]	@ (8002900 <MX_SPI1_Init+0x64>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ba:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <MX_SPI1_Init+0x64>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002900 <MX_SPI1_Init+0x64>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <MX_SPI1_Init+0x64>)
 80028c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <MX_SPI1_Init+0x64>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <MX_SPI1_Init+0x64>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028da:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <MX_SPI1_Init+0x64>)
 80028dc:	2200      	movs	r2, #0
 80028de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e0:	4b07      	ldr	r3, [pc, #28]	@ (8002900 <MX_SPI1_Init+0x64>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028e6:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <MX_SPI1_Init+0x64>)
 80028e8:	220a      	movs	r2, #10
 80028ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028ec:	4804      	ldr	r0, [pc, #16]	@ (8002900 <MX_SPI1_Init+0x64>)
 80028ee:	f002 fd85 	bl	80053fc <HAL_SPI_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028f8:	f7ff fe98 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000218 	.word	0x20000218
 8002904:	40013000 	.word	0x40013000

08002908 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	@ 0x28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a19      	ldr	r2, [pc, #100]	@ (800298c <HAL_SPI_MspInit+0x84>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d12b      	bne.n	8002982 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	4b18      	ldr	r3, [pc, #96]	@ (8002990 <HAL_SPI_MspInit+0x88>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	4a17      	ldr	r2, [pc, #92]	@ (8002990 <HAL_SPI_MspInit+0x88>)
 8002934:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002938:	6453      	str	r3, [r2, #68]	@ 0x44
 800293a:	4b15      	ldr	r3, [pc, #84]	@ (8002990 <HAL_SPI_MspInit+0x88>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <HAL_SPI_MspInit+0x88>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4a10      	ldr	r2, [pc, #64]	@ (8002990 <HAL_SPI_MspInit+0x88>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	6313      	str	r3, [r2, #48]	@ 0x30
 8002956:	4b0e      	ldr	r3, [pc, #56]	@ (8002990 <HAL_SPI_MspInit+0x88>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002962:	2338      	movs	r3, #56	@ 0x38
 8002964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296e:	2303      	movs	r3, #3
 8002970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002972:	2305      	movs	r3, #5
 8002974:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	4805      	ldr	r0, [pc, #20]	@ (8002994 <HAL_SPI_MspInit+0x8c>)
 800297e:	f001 fd91 	bl	80044a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002982:	bf00      	nop
 8002984:	3728      	adds	r7, #40	@ 0x28
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40013000 	.word	0x40013000
 8002990:	40023800 	.word	0x40023800
 8002994:	40020400 	.word	0x40020400

08002998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	4b10      	ldr	r3, [pc, #64]	@ (80029e4 <HAL_MspInit+0x4c>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	4a0f      	ldr	r2, [pc, #60]	@ (80029e4 <HAL_MspInit+0x4c>)
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ae:	4b0d      	ldr	r3, [pc, #52]	@ (80029e4 <HAL_MspInit+0x4c>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <HAL_MspInit+0x4c>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	4a08      	ldr	r2, [pc, #32]	@ (80029e4 <HAL_MspInit+0x4c>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ca:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <HAL_MspInit+0x4c>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800

080029e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <NMI_Handler+0x4>

080029f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029f4:	bf00      	nop
 80029f6:	e7fd      	b.n	80029f4 <HardFault_Handler+0x4>

080029f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029fc:	bf00      	nop
 80029fe:	e7fd      	b.n	80029fc <MemManage_Handler+0x4>

08002a00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a04:	bf00      	nop
 8002a06:	e7fd      	b.n	8002a04 <BusFault_Handler+0x4>

08002a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a0c:	bf00      	nop
 8002a0e:	e7fd      	b.n	8002a0c <UsageFault_Handler+0x4>

08002a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a3e:	f000 fbc7 	bl	80031d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a4c:	4802      	ldr	r0, [pc, #8]	@ (8002a58 <TIM2_IRQHandler+0x10>)
 8002a4e:	f003 fc42 	bl	80062d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200002bc 	.word	0x200002bc

08002a5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a60:	4802      	ldr	r0, [pc, #8]	@ (8002a6c <USART1_IRQHandler+0x10>)
 8002a62:	f004 fb7d 	bl	8007160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000350 	.word	0x20000350

08002a70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a74:	4802      	ldr	r0, [pc, #8]	@ (8002a80 <USART2_IRQHandler+0x10>)
 8002a76:	f004 fb73 	bl	8007160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000394 	.word	0x20000394

08002a84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a88:	4802      	ldr	r0, [pc, #8]	@ (8002a94 <DMA2_Stream0_IRQHandler+0x10>)
 8002a8a:	f001 faa1 	bl	8003fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200000cc 	.word	0x200000cc

08002a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa0:	4a14      	ldr	r2, [pc, #80]	@ (8002af4 <_sbrk+0x5c>)
 8002aa2:	4b15      	ldr	r3, [pc, #84]	@ (8002af8 <_sbrk+0x60>)
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aac:	4b13      	ldr	r3, [pc, #76]	@ (8002afc <_sbrk+0x64>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <_sbrk+0x64>)
 8002ab6:	4a12      	ldr	r2, [pc, #72]	@ (8002b00 <_sbrk+0x68>)
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aba:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <_sbrk+0x64>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d207      	bcs.n	8002ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ac8:	f005 fbba 	bl	8008240 <__errno>
 8002acc:	4603      	mov	r3, r0
 8002ace:	220c      	movs	r2, #12
 8002ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	e009      	b.n	8002aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ad8:	4b08      	ldr	r3, [pc, #32]	@ (8002afc <_sbrk+0x64>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ade:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <_sbrk+0x64>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4a05      	ldr	r2, [pc, #20]	@ (8002afc <_sbrk+0x64>)
 8002ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aea:	68fb      	ldr	r3, [r7, #12]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20020000 	.word	0x20020000
 8002af8:	00000400 	.word	0x00000400
 8002afc:	20000270 	.word	0x20000270
 8002b00:	20000528 	.word	0x20000528

08002b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b08:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <SystemInit+0x20>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0e:	4a05      	ldr	r2, [pc, #20]	@ (8002b24 <SystemInit+0x20>)
 8002b10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b2e:	f107 0308 	add.w	r3, r7, #8
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3c:	463b      	mov	r3, r7
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b44:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc0 <MX_TIM1_Init+0x98>)
 8002b46:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc4 <MX_TIM1_Init+0x9c>)
 8002b48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc0 <MX_TIM1_Init+0x98>)
 8002b4c:	2253      	movs	r2, #83	@ 0x53
 8002b4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b50:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <MX_TIM1_Init+0x98>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b56:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc0 <MX_TIM1_Init+0x98>)
 8002b58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5e:	4b18      	ldr	r3, [pc, #96]	@ (8002bc0 <MX_TIM1_Init+0x98>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b64:	4b16      	ldr	r3, [pc, #88]	@ (8002bc0 <MX_TIM1_Init+0x98>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b6a:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <MX_TIM1_Init+0x98>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b70:	4813      	ldr	r0, [pc, #76]	@ (8002bc0 <MX_TIM1_Init+0x98>)
 8002b72:	f003 fa2f 	bl	8005fd4 <HAL_TIM_Base_Init>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002b7c:	f7ff fd56 	bl	800262c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b86:	f107 0308 	add.w	r3, r7, #8
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	480c      	ldr	r0, [pc, #48]	@ (8002bc0 <MX_TIM1_Init+0x98>)
 8002b8e:	f003 fd6d 	bl	800666c <HAL_TIM_ConfigClockSource>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002b98:	f7ff fd48 	bl	800262c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ba4:	463b      	mov	r3, r7
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4805      	ldr	r0, [pc, #20]	@ (8002bc0 <MX_TIM1_Init+0x98>)
 8002baa:	f004 f939 	bl	8006e20 <HAL_TIMEx_MasterConfigSynchronization>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002bb4:	f7ff fd3a 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002bb8:	bf00      	nop
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20000274 	.word	0x20000274
 8002bc4:	40010000 	.word	0x40010000

08002bc8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bce:	f107 0308 	add.w	r3, r7, #8
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bdc:	463b      	mov	r3, r7
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002be4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c5c <MX_TIM2_Init+0x94>)
 8002be6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002bea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	@ (8002c5c <MX_TIM2_Init+0x94>)
 8002bee:	f240 3247 	movw	r2, #839	@ 0x347
 8002bf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf4:	4b19      	ldr	r3, [pc, #100]	@ (8002c5c <MX_TIM2_Init+0x94>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002bfa:	4b18      	ldr	r3, [pc, #96]	@ (8002c5c <MX_TIM2_Init+0x94>)
 8002bfc:	2263      	movs	r2, #99	@ 0x63
 8002bfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c00:	4b16      	ldr	r3, [pc, #88]	@ (8002c5c <MX_TIM2_Init+0x94>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c06:	4b15      	ldr	r3, [pc, #84]	@ (8002c5c <MX_TIM2_Init+0x94>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c0c:	4813      	ldr	r0, [pc, #76]	@ (8002c5c <MX_TIM2_Init+0x94>)
 8002c0e:	f003 f9e1 	bl	8005fd4 <HAL_TIM_Base_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002c18:	f7ff fd08 	bl	800262c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c22:	f107 0308 	add.w	r3, r7, #8
 8002c26:	4619      	mov	r1, r3
 8002c28:	480c      	ldr	r0, [pc, #48]	@ (8002c5c <MX_TIM2_Init+0x94>)
 8002c2a:	f003 fd1f 	bl	800666c <HAL_TIM_ConfigClockSource>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002c34:	f7ff fcfa 	bl	800262c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c40:	463b      	mov	r3, r7
 8002c42:	4619      	mov	r1, r3
 8002c44:	4805      	ldr	r0, [pc, #20]	@ (8002c5c <MX_TIM2_Init+0x94>)
 8002c46:	f004 f8eb 	bl	8006e20 <HAL_TIMEx_MasterConfigSynchronization>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c50:	f7ff fcec 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c54:	bf00      	nop
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	200002bc 	.word	0x200002bc

08002c60 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	611a      	str	r2, [r3, #16]
 8002c74:	615a      	str	r2, [r3, #20]
 8002c76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002c78:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf4 <MX_TIM13_Init+0x94>)
 8002c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf8 <MX_TIM13_Init+0x98>)
 8002c7c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf4 <MX_TIM13_Init+0x94>)
 8002c80:	f240 3247 	movw	r2, #839	@ 0x347
 8002c84:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c86:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <MX_TIM13_Init+0x94>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002c8c:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <MX_TIM13_Init+0x94>)
 8002c8e:	2263      	movs	r2, #99	@ 0x63
 8002c90:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c92:	4b18      	ldr	r3, [pc, #96]	@ (8002cf4 <MX_TIM13_Init+0x94>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c98:	4b16      	ldr	r3, [pc, #88]	@ (8002cf4 <MX_TIM13_Init+0x94>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002c9e:	4815      	ldr	r0, [pc, #84]	@ (8002cf4 <MX_TIM13_Init+0x94>)
 8002ca0:	f003 f998 	bl	8005fd4 <HAL_TIM_Base_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002caa:	f7ff fcbf 	bl	800262c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002cae:	4811      	ldr	r0, [pc, #68]	@ (8002cf4 <MX_TIM13_Init+0x94>)
 8002cb0:	f003 fab8 	bl	8006224 <HAL_TIM_PWM_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002cba:	f7ff fcb7 	bl	800262c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cbe:	2360      	movs	r3, #96	@ 0x60
 8002cc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4807      	ldr	r0, [pc, #28]	@ (8002cf4 <MX_TIM13_Init+0x94>)
 8002cd6:	f003 fc07 	bl	80064e8 <HAL_TIM_PWM_ConfigChannel>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002ce0:	f7ff fca4 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002ce4:	4803      	ldr	r0, [pc, #12]	@ (8002cf4 <MX_TIM13_Init+0x94>)
 8002ce6:	f000 f85b 	bl	8002da0 <HAL_TIM_MspPostInit>

}
 8002cea:	bf00      	nop
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000304 	.word	0x20000304
 8002cf8:	40001c00 	.word	0x40001c00

08002cfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a22      	ldr	r2, [pc, #136]	@ (8002d94 <HAL_TIM_Base_MspInit+0x98>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	4b21      	ldr	r3, [pc, #132]	@ (8002d98 <HAL_TIM_Base_MspInit+0x9c>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	4a20      	ldr	r2, [pc, #128]	@ (8002d98 <HAL_TIM_Base_MspInit+0x9c>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d98 <HAL_TIM_Base_MspInit+0x9c>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002d2a:	e02e      	b.n	8002d8a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d34:	d116      	bne.n	8002d64 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	4b17      	ldr	r3, [pc, #92]	@ (8002d98 <HAL_TIM_Base_MspInit+0x9c>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	4a16      	ldr	r2, [pc, #88]	@ (8002d98 <HAL_TIM_Base_MspInit+0x9c>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d46:	4b14      	ldr	r3, [pc, #80]	@ (8002d98 <HAL_TIM_Base_MspInit+0x9c>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	2100      	movs	r1, #0
 8002d56:	201c      	movs	r0, #28
 8002d58:	f000 ff6b 	bl	8003c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d5c:	201c      	movs	r0, #28
 8002d5e:	f000 ff84 	bl	8003c6a <HAL_NVIC_EnableIRQ>
}
 8002d62:	e012      	b.n	8002d8a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a0c      	ldr	r2, [pc, #48]	@ (8002d9c <HAL_TIM_Base_MspInit+0xa0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d10d      	bne.n	8002d8a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <HAL_TIM_Base_MspInit+0x9c>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	4a08      	ldr	r2, [pc, #32]	@ (8002d98 <HAL_TIM_Base_MspInit+0x9c>)
 8002d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d7e:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <HAL_TIM_Base_MspInit+0x9c>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
}
 8002d8a:	bf00      	nop
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40010000 	.word	0x40010000
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40001c00 	.word	0x40001c00

08002da0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da8:	f107 030c 	add.w	r3, r7, #12
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a12      	ldr	r2, [pc, #72]	@ (8002e08 <HAL_TIM_MspPostInit+0x68>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d11e      	bne.n	8002e00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	4b11      	ldr	r3, [pc, #68]	@ (8002e0c <HAL_TIM_MspPostInit+0x6c>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	4a10      	ldr	r2, [pc, #64]	@ (8002e0c <HAL_TIM_MspPostInit+0x6c>)
 8002dcc:	f043 0320 	orr.w	r3, r3, #32
 8002dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e0c <HAL_TIM_MspPostInit+0x6c>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002dde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002de2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002df0:	2309      	movs	r3, #9
 8002df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4805      	ldr	r0, [pc, #20]	@ (8002e10 <HAL_TIM_MspPostInit+0x70>)
 8002dfc:	f001 fb52 	bl	80044a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002e00:	bf00      	nop
 8002e02:	3720      	adds	r7, #32
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40001c00 	.word	0x40001c00
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40021400 	.word	0x40021400

08002e14 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002e18:	2201      	movs	r2, #1
 8002e1a:	4906      	ldr	r1, [pc, #24]	@ (8002e34 <uart_init_esp+0x20>)
 8002e1c:	4806      	ldr	r0, [pc, #24]	@ (8002e38 <uart_init_esp+0x24>)
 8002e1e:	f004 f96e 	bl	80070fe <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8002e22:	2201      	movs	r2, #1
 8002e24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e28:	4804      	ldr	r0, [pc, #16]	@ (8002e3c <uart_init_esp+0x28>)
 8002e2a:	f001 fcd7 	bl	80047dc <HAL_GPIO_WritePin>
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	2000034d 	.word	0x2000034d
 8002e38:	20000394 	.word	0x20000394
 8002e3c:	40021400 	.word	0x40021400

08002e40 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8002e4c:	887a      	ldrh	r2, [r7, #2]
 8002e4e:	230a      	movs	r3, #10
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4803      	ldr	r0, [pc, #12]	@ (8002e60 <uart_EspSendBytes+0x20>)
 8002e54:	f004 f8c1 	bl	8006fda <HAL_UART_Transmit>
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000394 	.word	0x20000394

08002e64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a19      	ldr	r2, [pc, #100]	@ (8002ed8 <HAL_UART_RxCpltCallback+0x74>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10a      	bne.n	8002e8c <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002e76:	230a      	movs	r3, #10
 8002e78:	2201      	movs	r2, #1
 8002e7a:	4918      	ldr	r1, [pc, #96]	@ (8002edc <HAL_UART_RxCpltCallback+0x78>)
 8002e7c:	4818      	ldr	r0, [pc, #96]	@ (8002ee0 <HAL_UART_RxCpltCallback+0x7c>)
 8002e7e:	f004 f8ac 	bl	8006fda <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002e82:	2201      	movs	r2, #1
 8002e84:	4915      	ldr	r1, [pc, #84]	@ (8002edc <HAL_UART_RxCpltCallback+0x78>)
 8002e86:	4816      	ldr	r0, [pc, #88]	@ (8002ee0 <HAL_UART_RxCpltCallback+0x7c>)
 8002e88:	f004 f939 	bl	80070fe <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a14      	ldr	r2, [pc, #80]	@ (8002ee4 <HAL_UART_RxCpltCallback+0x80>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d11b      	bne.n	8002ece <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2) check_esp = 1;
 8002e96:	4b14      	ldr	r3, [pc, #80]	@ (8002ee8 <HAL_UART_RxCpltCallback+0x84>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_UART_RxCpltCallback+0x42>
 8002e9e:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <HAL_UART_RxCpltCallback+0x88>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	e00e      	b.n	8002ec4 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8002ea6:	4b10      	ldr	r3, [pc, #64]	@ (8002ee8 <HAL_UART_RxCpltCallback+0x84>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b61      	cmp	r3, #97	@ 0x61
 8002eac:	d103      	bne.n	8002eb6 <HAL_UART_RxCpltCallback+0x52>
 8002eae:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <HAL_UART_RxCpltCallback+0x8c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	e006      	b.n	8002ec4 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <HAL_UART_RxCpltCallback+0x84>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b41      	cmp	r3, #65	@ 0x41
 8002ebc:	d102      	bne.n	8002ec4 <HAL_UART_RxCpltCallback+0x60>
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <HAL_UART_RxCpltCallback+0x8c>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	4908      	ldr	r1, [pc, #32]	@ (8002ee8 <HAL_UART_RxCpltCallback+0x84>)
 8002ec8:	480a      	ldr	r0, [pc, #40]	@ (8002ef4 <HAL_UART_RxCpltCallback+0x90>)
 8002eca:	f004 f918 	bl	80070fe <HAL_UART_Receive_IT>
	}
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40011000 	.word	0x40011000
 8002edc:	2000034c 	.word	0x2000034c
 8002ee0:	20000350 	.word	0x20000350
 8002ee4:	40004400 	.word	0x40004400
 8002ee8:	2000034d 	.word	0x2000034d
 8002eec:	2000034e 	.word	0x2000034e
 8002ef0:	20000204 	.word	0x20000204
 8002ef4:	20000394 	.word	0x20000394

08002ef8 <uart_EspCheck>:

uint8_t uart_EspCheck(){
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
	if(check_esp == 1) return 1;
 8002efc:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <uart_EspCheck+0x1c>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <uart_EspCheck+0x10>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <uart_EspCheck+0x12>
	return 0;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	2000034e 	.word	0x2000034e

08002f18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f1c:	4b11      	ldr	r3, [pc, #68]	@ (8002f64 <MX_USART1_UART_Init+0x4c>)
 8002f1e:	4a12      	ldr	r2, [pc, #72]	@ (8002f68 <MX_USART1_UART_Init+0x50>)
 8002f20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f22:	4b10      	ldr	r3, [pc, #64]	@ (8002f64 <MX_USART1_UART_Init+0x4c>)
 8002f24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f64 <MX_USART1_UART_Init+0x4c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <MX_USART1_UART_Init+0x4c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f36:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <MX_USART1_UART_Init+0x4c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f3c:	4b09      	ldr	r3, [pc, #36]	@ (8002f64 <MX_USART1_UART_Init+0x4c>)
 8002f3e:	220c      	movs	r2, #12
 8002f40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f42:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <MX_USART1_UART_Init+0x4c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f48:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <MX_USART1_UART_Init+0x4c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f4e:	4805      	ldr	r0, [pc, #20]	@ (8002f64 <MX_USART1_UART_Init+0x4c>)
 8002f50:	f003 fff6 	bl	8006f40 <HAL_UART_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f5a:	f7ff fb67 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000350 	.word	0x20000350
 8002f68:	40011000 	.word	0x40011000

08002f6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f70:	4b11      	ldr	r3, [pc, #68]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f72:	4a12      	ldr	r2, [pc, #72]	@ (8002fbc <MX_USART2_UART_Init+0x50>)
 8002f74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f76:	4b10      	ldr	r3, [pc, #64]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f84:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f90:	4b09      	ldr	r3, [pc, #36]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f92:	220c      	movs	r2, #12
 8002f94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f96:	4b08      	ldr	r3, [pc, #32]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fa2:	4805      	ldr	r0, [pc, #20]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002fa4:	f003 ffcc 	bl	8006f40 <HAL_UART_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fae:	f7ff fb3d 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000394 	.word	0x20000394
 8002fbc:	40004400 	.word	0x40004400

08002fc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08c      	sub	sp, #48	@ 0x30
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 031c 	add.w	r3, r7, #28
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a3a      	ldr	r2, [pc, #232]	@ (80030c8 <HAL_UART_MspInit+0x108>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d135      	bne.n	800304e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	4b39      	ldr	r3, [pc, #228]	@ (80030cc <HAL_UART_MspInit+0x10c>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fea:	4a38      	ldr	r2, [pc, #224]	@ (80030cc <HAL_UART_MspInit+0x10c>)
 8002fec:	f043 0310 	orr.w	r3, r3, #16
 8002ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ff2:	4b36      	ldr	r3, [pc, #216]	@ (80030cc <HAL_UART_MspInit+0x10c>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	4b32      	ldr	r3, [pc, #200]	@ (80030cc <HAL_UART_MspInit+0x10c>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	4a31      	ldr	r2, [pc, #196]	@ (80030cc <HAL_UART_MspInit+0x10c>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6313      	str	r3, [r2, #48]	@ 0x30
 800300e:	4b2f      	ldr	r3, [pc, #188]	@ (80030cc <HAL_UART_MspInit+0x10c>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800301a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800301e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003020:	2302      	movs	r3, #2
 8003022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003028:	2303      	movs	r3, #3
 800302a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800302c:	2307      	movs	r3, #7
 800302e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003030:	f107 031c 	add.w	r3, r7, #28
 8003034:	4619      	mov	r1, r3
 8003036:	4826      	ldr	r0, [pc, #152]	@ (80030d0 <HAL_UART_MspInit+0x110>)
 8003038:	f001 fa34 	bl	80044a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800303c:	2200      	movs	r2, #0
 800303e:	2100      	movs	r1, #0
 8003040:	2025      	movs	r0, #37	@ 0x25
 8003042:	f000 fdf6 	bl	8003c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003046:	2025      	movs	r0, #37	@ 0x25
 8003048:	f000 fe0f 	bl	8003c6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800304c:	e038      	b.n	80030c0 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a20      	ldr	r2, [pc, #128]	@ (80030d4 <HAL_UART_MspInit+0x114>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d133      	bne.n	80030c0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003058:	2300      	movs	r3, #0
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	4b1b      	ldr	r3, [pc, #108]	@ (80030cc <HAL_UART_MspInit+0x10c>)
 800305e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003060:	4a1a      	ldr	r2, [pc, #104]	@ (80030cc <HAL_UART_MspInit+0x10c>)
 8003062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003066:	6413      	str	r3, [r2, #64]	@ 0x40
 8003068:	4b18      	ldr	r3, [pc, #96]	@ (80030cc <HAL_UART_MspInit+0x10c>)
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	4b14      	ldr	r3, [pc, #80]	@ (80030cc <HAL_UART_MspInit+0x10c>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307c:	4a13      	ldr	r2, [pc, #76]	@ (80030cc <HAL_UART_MspInit+0x10c>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6313      	str	r3, [r2, #48]	@ 0x30
 8003084:	4b11      	ldr	r3, [pc, #68]	@ (80030cc <HAL_UART_MspInit+0x10c>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003090:	230c      	movs	r3, #12
 8003092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309c:	2303      	movs	r3, #3
 800309e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030a0:	2307      	movs	r3, #7
 80030a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a4:	f107 031c 	add.w	r3, r7, #28
 80030a8:	4619      	mov	r1, r3
 80030aa:	4809      	ldr	r0, [pc, #36]	@ (80030d0 <HAL_UART_MspInit+0x110>)
 80030ac:	f001 f9fa 	bl	80044a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030b0:	2200      	movs	r2, #0
 80030b2:	2100      	movs	r1, #0
 80030b4:	2026      	movs	r0, #38	@ 0x26
 80030b6:	f000 fdbc 	bl	8003c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030ba:	2026      	movs	r0, #38	@ 0x26
 80030bc:	f000 fdd5 	bl	8003c6a <HAL_NVIC_EnableIRQ>
}
 80030c0:	bf00      	nop
 80030c2:	3730      	adds	r7, #48	@ 0x30
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40011000 	.word	0x40011000
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40020000 	.word	0x40020000
 80030d4:	40004400 	.word	0x40004400

080030d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030dc:	480d      	ldr	r0, [pc, #52]	@ (8003114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030de:	490e      	ldr	r1, [pc, #56]	@ (8003118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030e0:	4a0e      	ldr	r2, [pc, #56]	@ (800311c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e4:	e002      	b.n	80030ec <LoopCopyDataInit>

080030e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ea:	3304      	adds	r3, #4

080030ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030f0:	d3f9      	bcc.n	80030e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030f2:	4a0b      	ldr	r2, [pc, #44]	@ (8003120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030f4:	4c0b      	ldr	r4, [pc, #44]	@ (8003124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f8:	e001      	b.n	80030fe <LoopFillZerobss>

080030fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030fc:	3204      	adds	r2, #4

080030fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003100:	d3fb      	bcc.n	80030fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003102:	f7ff fcff 	bl	8002b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003106:	f005 f8a1 	bl	800824c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800310a:	f7ff f9bf 	bl	800248c <main>
  bx  lr    
 800310e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003118:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800311c:	0800bbf4 	.word	0x0800bbf4
  ldr r2, =_sbss
 8003120:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8003124:	20000524 	.word	0x20000524

08003128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003128:	e7fe      	b.n	8003128 <ADC_IRQHandler>
	...

0800312c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003130:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <HAL_Init+0x40>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0d      	ldr	r2, [pc, #52]	@ (800316c <HAL_Init+0x40>)
 8003136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800313a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800313c:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <HAL_Init+0x40>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0a      	ldr	r2, [pc, #40]	@ (800316c <HAL_Init+0x40>)
 8003142:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003148:	4b08      	ldr	r3, [pc, #32]	@ (800316c <HAL_Init+0x40>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a07      	ldr	r2, [pc, #28]	@ (800316c <HAL_Init+0x40>)
 800314e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003154:	2003      	movs	r0, #3
 8003156:	f000 fd61 	bl	8003c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800315a:	200f      	movs	r0, #15
 800315c:	f000 f808 	bl	8003170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003160:	f7ff fc1a 	bl	8002998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023c00 	.word	0x40023c00

08003170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003178:	4b12      	ldr	r3, [pc, #72]	@ (80031c4 <HAL_InitTick+0x54>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4b12      	ldr	r3, [pc, #72]	@ (80031c8 <HAL_InitTick+0x58>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	4619      	mov	r1, r3
 8003182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003186:	fbb3 f3f1 	udiv	r3, r3, r1
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fd79 	bl	8003c86 <HAL_SYSTICK_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e00e      	b.n	80031bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	d80a      	bhi.n	80031ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031a4:	2200      	movs	r2, #0
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	f000 fd41 	bl	8003c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031b0:	4a06      	ldr	r2, [pc, #24]	@ (80031cc <HAL_InitTick+0x5c>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e000      	b.n	80031bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000008 	.word	0x20000008
 80031c8:	20000010 	.word	0x20000010
 80031cc:	2000000c 	.word	0x2000000c

080031d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <HAL_IncTick+0x20>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <HAL_IncTick+0x24>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	4a04      	ldr	r2, [pc, #16]	@ (80031f4 <HAL_IncTick+0x24>)
 80031e2:	6013      	str	r3, [r2, #0]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20000010 	.word	0x20000010
 80031f4:	200003d8 	.word	0x200003d8

080031f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return uwTick;
 80031fc:	4b03      	ldr	r3, [pc, #12]	@ (800320c <HAL_GetTick+0x14>)
 80031fe:	681b      	ldr	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	200003d8 	.word	0x200003d8

08003210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7ff ffee 	bl	80031f8 <HAL_GetTick>
 800321c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d005      	beq.n	8003236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800322a:	4b0a      	ldr	r3, [pc, #40]	@ (8003254 <HAL_Delay+0x44>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003236:	bf00      	nop
 8003238:	f7ff ffde 	bl	80031f8 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	429a      	cmp	r2, r3
 8003246:	d8f7      	bhi.n	8003238 <HAL_Delay+0x28>
  {
  }
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000010 	.word	0x20000010

08003258 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e033      	b.n	80032d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd ffc8 	bl	800120c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800329e:	f023 0302 	bic.w	r3, r3, #2
 80032a2:	f043 0202 	orr.w	r2, r3, #2
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fa68 	bl	8003780 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80032c6:	e001      	b.n	80032cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_ADC_Start_DMA+0x1e>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e0e9      	b.n	80034d2 <HAL_ADC_Start_DMA+0x1f2>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b01      	cmp	r3, #1
 8003312:	d018      	beq.n	8003346 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003324:	4b6d      	ldr	r3, [pc, #436]	@ (80034dc <HAL_ADC_Start_DMA+0x1fc>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a6d      	ldr	r2, [pc, #436]	@ (80034e0 <HAL_ADC_Start_DMA+0x200>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	0c9a      	lsrs	r2, r3, #18
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003338:	e002      	b.n	8003340 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	3b01      	subs	r3, #1
 800333e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f9      	bne.n	800333a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003354:	d107      	bne.n	8003366 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003364:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	f040 80a1 	bne.w	80034b8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033b4:	d106      	bne.n	80033c4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ba:	f023 0206 	bic.w	r2, r3, #6
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80033c2:	e002      	b.n	80033ca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033d2:	4b44      	ldr	r3, [pc, #272]	@ (80034e4 <HAL_ADC_Start_DMA+0x204>)
 80033d4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033da:	4a43      	ldr	r2, [pc, #268]	@ (80034e8 <HAL_ADC_Start_DMA+0x208>)
 80033dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e2:	4a42      	ldr	r2, [pc, #264]	@ (80034ec <HAL_ADC_Start_DMA+0x20c>)
 80033e4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ea:	4a41      	ldr	r2, [pc, #260]	@ (80034f0 <HAL_ADC_Start_DMA+0x210>)
 80033ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80033f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003406:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003416:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	334c      	adds	r3, #76	@ 0x4c
 8003422:	4619      	mov	r1, r3
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f000 fce8 	bl	8003dfc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	2b00      	cmp	r3, #0
 8003436:	d12a      	bne.n	800348e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a2d      	ldr	r2, [pc, #180]	@ (80034f4 <HAL_ADC_Start_DMA+0x214>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d015      	beq.n	800346e <HAL_ADC_Start_DMA+0x18e>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a2c      	ldr	r2, [pc, #176]	@ (80034f8 <HAL_ADC_Start_DMA+0x218>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d105      	bne.n	8003458 <HAL_ADC_Start_DMA+0x178>
 800344c:	4b25      	ldr	r3, [pc, #148]	@ (80034e4 <HAL_ADC_Start_DMA+0x204>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a27      	ldr	r2, [pc, #156]	@ (80034fc <HAL_ADC_Start_DMA+0x21c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d136      	bne.n	80034d0 <HAL_ADC_Start_DMA+0x1f0>
 8003462:	4b20      	ldr	r3, [pc, #128]	@ (80034e4 <HAL_ADC_Start_DMA+0x204>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d130      	bne.n	80034d0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d129      	bne.n	80034d0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	e020      	b.n	80034d0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a18      	ldr	r2, [pc, #96]	@ (80034f4 <HAL_ADC_Start_DMA+0x214>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d11b      	bne.n	80034d0 <HAL_ADC_Start_DMA+0x1f0>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d114      	bne.n	80034d0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80034b4:	609a      	str	r2, [r3, #8]
 80034b6:	e00b      	b.n	80034d0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	f043 0210 	orr.w	r2, r3, #16
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c8:	f043 0201 	orr.w	r2, r3, #1
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000008 	.word	0x20000008
 80034e0:	431bde83 	.word	0x431bde83
 80034e4:	40012300 	.word	0x40012300
 80034e8:	08003979 	.word	0x08003979
 80034ec:	08003a33 	.word	0x08003a33
 80034f0:	08003a4f 	.word	0x08003a4f
 80034f4:	40012000 	.word	0x40012000
 80034f8:	40012100 	.word	0x40012100
 80034fc:	40012200 	.word	0x40012200

08003500 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x1c>
 8003554:	2302      	movs	r3, #2
 8003556:	e105      	b.n	8003764 <HAL_ADC_ConfigChannel+0x228>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b09      	cmp	r3, #9
 8003566:	d925      	bls.n	80035b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68d9      	ldr	r1, [r3, #12]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	3b1e      	subs	r3, #30
 800357e:	2207      	movs	r2, #7
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43da      	mvns	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	400a      	ands	r2, r1
 800358c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68d9      	ldr	r1, [r3, #12]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	b29b      	uxth	r3, r3
 800359e:	4618      	mov	r0, r3
 80035a0:	4603      	mov	r3, r0
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4403      	add	r3, r0
 80035a6:	3b1e      	subs	r3, #30
 80035a8:	409a      	lsls	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e022      	b.n	80035fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6919      	ldr	r1, [r3, #16]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	4613      	mov	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4413      	add	r3, r2
 80035c8:	2207      	movs	r2, #7
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43da      	mvns	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	400a      	ands	r2, r1
 80035d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6919      	ldr	r1, [r3, #16]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	4618      	mov	r0, r3
 80035ea:	4603      	mov	r3, r0
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4403      	add	r3, r0
 80035f0:	409a      	lsls	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b06      	cmp	r3, #6
 8003600:	d824      	bhi.n	800364c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	3b05      	subs	r3, #5
 8003614:	221f      	movs	r2, #31
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43da      	mvns	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	400a      	ands	r2, r1
 8003622:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	4618      	mov	r0, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	3b05      	subs	r3, #5
 800363e:	fa00 f203 	lsl.w	r2, r0, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	635a      	str	r2, [r3, #52]	@ 0x34
 800364a:	e04c      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b0c      	cmp	r3, #12
 8003652:	d824      	bhi.n	800369e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	3b23      	subs	r3, #35	@ 0x23
 8003666:	221f      	movs	r2, #31
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43da      	mvns	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	400a      	ands	r2, r1
 8003674:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	4618      	mov	r0, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	3b23      	subs	r3, #35	@ 0x23
 8003690:	fa00 f203 	lsl.w	r2, r0, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30
 800369c:	e023      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	3b41      	subs	r3, #65	@ 0x41
 80036b0:	221f      	movs	r2, #31
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43da      	mvns	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	400a      	ands	r2, r1
 80036be:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	4618      	mov	r0, r3
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	3b41      	subs	r3, #65	@ 0x41
 80036da:	fa00 f203 	lsl.w	r2, r0, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036e6:	4b22      	ldr	r3, [pc, #136]	@ (8003770 <HAL_ADC_ConfigChannel+0x234>)
 80036e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a21      	ldr	r2, [pc, #132]	@ (8003774 <HAL_ADC_ConfigChannel+0x238>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d109      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x1cc>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b12      	cmp	r3, #18
 80036fa:	d105      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a19      	ldr	r2, [pc, #100]	@ (8003774 <HAL_ADC_ConfigChannel+0x238>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d123      	bne.n	800375a <HAL_ADC_ConfigChannel+0x21e>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b10      	cmp	r3, #16
 8003718:	d003      	beq.n	8003722 <HAL_ADC_ConfigChannel+0x1e6>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b11      	cmp	r3, #17
 8003720:	d11b      	bne.n	800375a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b10      	cmp	r3, #16
 8003734:	d111      	bne.n	800375a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003736:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <HAL_ADC_ConfigChannel+0x23c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a10      	ldr	r2, [pc, #64]	@ (800377c <HAL_ADC_ConfigChannel+0x240>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	0c9a      	lsrs	r2, r3, #18
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800374c:	e002      	b.n	8003754 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	3b01      	subs	r3, #1
 8003752:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f9      	bne.n	800374e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	40012300 	.word	0x40012300
 8003774:	40012000 	.word	0x40012000
 8003778:	20000008 	.word	0x20000008
 800377c:	431bde83 	.word	0x431bde83

08003780 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003788:	4b79      	ldr	r3, [pc, #484]	@ (8003970 <ADC_Init+0x1f0>)
 800378a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	021a      	lsls	r2, r3, #8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80037d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6899      	ldr	r1, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	4a58      	ldr	r2, [pc, #352]	@ (8003974 <ADC_Init+0x1f4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d022      	beq.n	800385e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003826:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6899      	ldr	r1, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003848:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6899      	ldr	r1, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	e00f      	b.n	800387e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800386c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800387c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0202 	bic.w	r2, r2, #2
 800388c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6899      	ldr	r1, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	7e1b      	ldrb	r3, [r3, #24]
 8003898:	005a      	lsls	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01b      	beq.n	80038e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80038ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6859      	ldr	r1, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	3b01      	subs	r3, #1
 80038d8:	035a      	lsls	r2, r3, #13
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	e007      	b.n	80038f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003902:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	3b01      	subs	r3, #1
 8003910:	051a      	lsls	r2, r3, #20
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003928:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6899      	ldr	r1, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003936:	025a      	lsls	r2, r3, #9
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800394e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6899      	ldr	r1, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	029a      	lsls	r2, r3, #10
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	609a      	str	r2, [r3, #8]
}
 8003964:	bf00      	nop
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	40012300 	.word	0x40012300
 8003974:	0f000001 	.word	0x0f000001

08003978 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003984:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800398e:	2b00      	cmp	r3, #0
 8003990:	d13c      	bne.n	8003a0c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d12b      	bne.n	8003a04 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d127      	bne.n	8003a04 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d006      	beq.n	80039d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d119      	bne.n	8003a04 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0220 	bic.w	r2, r2, #32
 80039de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d105      	bne.n	8003a04 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fc:	f043 0201 	orr.w	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f7ff fd7b 	bl	8003500 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a0a:	e00e      	b.n	8003a2a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f7ff fd85 	bl	8003528 <HAL_ADC_ErrorCallback>
}
 8003a1e:	e004      	b.n	8003a2a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	4798      	blx	r3
}
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f7ff fd67 	bl	8003514 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2240      	movs	r2, #64	@ 0x40
 8003a60:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	f043 0204 	orr.w	r2, r3, #4
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f7ff fd5a 	bl	8003528 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aae:	4a04      	ldr	r2, [pc, #16]	@ (8003ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	60d3      	str	r3, [r2, #12]
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ac8:	4b04      	ldr	r3, [pc, #16]	@ (8003adc <__NVIC_GetPriorityGrouping+0x18>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	f003 0307 	and.w	r3, r3, #7
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	e000ed00 	.word	0xe000ed00

08003ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	db0b      	blt.n	8003b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	f003 021f 	and.w	r2, r3, #31
 8003af8:	4907      	ldr	r1, [pc, #28]	@ (8003b18 <__NVIC_EnableIRQ+0x38>)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2001      	movs	r0, #1
 8003b02:	fa00 f202 	lsl.w	r2, r0, r2
 8003b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	e000e100 	.word	0xe000e100

08003b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	6039      	str	r1, [r7, #0]
 8003b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	db0a      	blt.n	8003b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	490c      	ldr	r1, [pc, #48]	@ (8003b68 <__NVIC_SetPriority+0x4c>)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	0112      	lsls	r2, r2, #4
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b44:	e00a      	b.n	8003b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	4908      	ldr	r1, [pc, #32]	@ (8003b6c <__NVIC_SetPriority+0x50>)
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	3b04      	subs	r3, #4
 8003b54:	0112      	lsls	r2, r2, #4
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	440b      	add	r3, r1
 8003b5a:	761a      	strb	r2, [r3, #24]
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000e100 	.word	0xe000e100
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b089      	sub	sp, #36	@ 0x24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f1c3 0307 	rsb	r3, r3, #7
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	bf28      	it	cs
 8003b8e:	2304      	movcs	r3, #4
 8003b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2b06      	cmp	r3, #6
 8003b98:	d902      	bls.n	8003ba0 <NVIC_EncodePriority+0x30>
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3b03      	subs	r3, #3
 8003b9e:	e000      	b.n	8003ba2 <NVIC_EncodePriority+0x32>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43da      	mvns	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	43d9      	mvns	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc8:	4313      	orrs	r3, r2
         );
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3724      	adds	r7, #36	@ 0x24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003be8:	d301      	bcc.n	8003bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bea:	2301      	movs	r3, #1
 8003bec:	e00f      	b.n	8003c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bee:	4a0a      	ldr	r2, [pc, #40]	@ (8003c18 <SysTick_Config+0x40>)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bf6:	210f      	movs	r1, #15
 8003bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfc:	f7ff ff8e 	bl	8003b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c00:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <SysTick_Config+0x40>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c06:	4b04      	ldr	r3, [pc, #16]	@ (8003c18 <SysTick_Config+0x40>)
 8003c08:	2207      	movs	r2, #7
 8003c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	e000e010 	.word	0xe000e010

08003c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff ff29 	bl	8003a7c <__NVIC_SetPriorityGrouping>
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b086      	sub	sp, #24
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	4603      	mov	r3, r0
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c44:	f7ff ff3e 	bl	8003ac4 <__NVIC_GetPriorityGrouping>
 8003c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	6978      	ldr	r0, [r7, #20]
 8003c50:	f7ff ff8e 	bl	8003b70 <NVIC_EncodePriority>
 8003c54:	4602      	mov	r2, r0
 8003c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ff5d 	bl	8003b1c <__NVIC_SetPriority>
}
 8003c62:	bf00      	nop
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	4603      	mov	r3, r0
 8003c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ff31 	bl	8003ae0 <__NVIC_EnableIRQ>
}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff ffa2 	bl	8003bd8 <SysTick_Config>
 8003c94:	4603      	mov	r3, r0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cac:	f7ff faa4 	bl	80031f8 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e099      	b.n	8003df0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cdc:	e00f      	b.n	8003cfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cde:	f7ff fa8b 	bl	80031f8 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b05      	cmp	r3, #5
 8003cea:	d908      	bls.n	8003cfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e078      	b.n	8003df0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e8      	bne.n	8003cde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	4b38      	ldr	r3, [pc, #224]	@ (8003df8 <HAL_DMA_Init+0x158>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d107      	bne.n	8003d68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d60:	4313      	orrs	r3, r2
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f023 0307 	bic.w	r3, r3, #7
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d117      	bne.n	8003dc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00e      	beq.n	8003dc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fb01 	bl	80043ac <DMA_CheckFifoParam>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2240      	movs	r2, #64	@ 0x40
 8003db4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e016      	b.n	8003df0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fab8 	bl	8004340 <DMA_CalcBaseAndBitshift>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd8:	223f      	movs	r2, #63	@ 0x3f
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	f010803f 	.word	0xf010803f

08003dfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_DMA_Start_IT+0x26>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e040      	b.n	8003ea4 <HAL_DMA_Start_IT+0xa8>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d12f      	bne.n	8003e96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fa4a 	bl	80042e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e54:	223f      	movs	r2, #63	@ 0x3f
 8003e56:	409a      	lsls	r2, r3
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0216 	orr.w	r2, r2, #22
 8003e6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d007      	beq.n	8003e84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0208 	orr.w	r2, r2, #8
 8003e82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e005      	b.n	8003ea2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003eba:	f7ff f99d 	bl	80031f8 <HAL_GetTick>
 8003ebe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d008      	beq.n	8003ede <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2280      	movs	r2, #128	@ 0x80
 8003ed0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e052      	b.n	8003f84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0216 	bic.w	r2, r2, #22
 8003eec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003efc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <HAL_DMA_Abort+0x62>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0208 	bic.w	r2, r2, #8
 8003f1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f2e:	e013      	b.n	8003f58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f30:	f7ff f962 	bl	80031f8 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b05      	cmp	r3, #5
 8003f3c:	d90c      	bls.n	8003f58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2203      	movs	r2, #3
 8003f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e015      	b.n	8003f84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e4      	bne.n	8003f30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6a:	223f      	movs	r2, #63	@ 0x3f
 8003f6c:	409a      	lsls	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d004      	beq.n	8003faa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2280      	movs	r2, #128	@ 0x80
 8003fa4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e00c      	b.n	8003fc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2205      	movs	r2, #5
 8003fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fdc:	4b8e      	ldr	r3, [pc, #568]	@ (8004218 <HAL_DMA_IRQHandler+0x248>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a8e      	ldr	r2, [pc, #568]	@ (800421c <HAL_DMA_IRQHandler+0x24c>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	0a9b      	lsrs	r3, r3, #10
 8003fe8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4013      	ands	r3, r2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d01a      	beq.n	800403c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d013      	beq.n	800403c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0204 	bic.w	r2, r2, #4
 8004022:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004028:	2208      	movs	r2, #8
 800402a:	409a      	lsls	r2, r3
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004034:	f043 0201 	orr.w	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004040:	2201      	movs	r2, #1
 8004042:	409a      	lsls	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d012      	beq.n	8004072 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00b      	beq.n	8004072 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405e:	2201      	movs	r2, #1
 8004060:	409a      	lsls	r2, r3
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406a:	f043 0202 	orr.w	r2, r3, #2
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004076:	2204      	movs	r2, #4
 8004078:	409a      	lsls	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4013      	ands	r3, r2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d012      	beq.n	80040a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00b      	beq.n	80040a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004094:	2204      	movs	r2, #4
 8004096:	409a      	lsls	r2, r3
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a0:	f043 0204 	orr.w	r2, r3, #4
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ac:	2210      	movs	r2, #16
 80040ae:	409a      	lsls	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d043      	beq.n	8004140 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d03c      	beq.n	8004140 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ca:	2210      	movs	r2, #16
 80040cc:	409a      	lsls	r2, r3
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d018      	beq.n	8004112 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d108      	bne.n	8004100 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d024      	beq.n	8004140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4798      	blx	r3
 80040fe:	e01f      	b.n	8004140 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01b      	beq.n	8004140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	4798      	blx	r3
 8004110:	e016      	b.n	8004140 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d107      	bne.n	8004130 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0208 	bic.w	r2, r2, #8
 800412e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004144:	2220      	movs	r2, #32
 8004146:	409a      	lsls	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4013      	ands	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 808f 	beq.w	8004270 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8087 	beq.w	8004270 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004166:	2220      	movs	r2, #32
 8004168:	409a      	lsls	r2, r3
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b05      	cmp	r3, #5
 8004178:	d136      	bne.n	80041e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0216 	bic.w	r2, r2, #22
 8004188:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004198:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d103      	bne.n	80041aa <HAL_DMA_IRQHandler+0x1da>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0208 	bic.w	r2, r2, #8
 80041b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041be:	223f      	movs	r2, #63	@ 0x3f
 80041c0:	409a      	lsls	r2, r3
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d07e      	beq.n	80042dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	4798      	blx	r3
        }
        return;
 80041e6:	e079      	b.n	80042dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01d      	beq.n	8004232 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10d      	bne.n	8004220 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004208:	2b00      	cmp	r3, #0
 800420a:	d031      	beq.n	8004270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	4798      	blx	r3
 8004214:	e02c      	b.n	8004270 <HAL_DMA_IRQHandler+0x2a0>
 8004216:	bf00      	nop
 8004218:	20000008 	.word	0x20000008
 800421c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d023      	beq.n	8004270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	4798      	blx	r3
 8004230:	e01e      	b.n	8004270 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10f      	bne.n	8004260 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0210 	bic.w	r2, r2, #16
 800424e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004274:	2b00      	cmp	r3, #0
 8004276:	d032      	beq.n	80042de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d022      	beq.n	80042ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2205      	movs	r2, #5
 8004288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	3301      	adds	r3, #1
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d307      	bcc.n	80042b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f2      	bne.n	800429c <HAL_DMA_IRQHandler+0x2cc>
 80042b6:	e000      	b.n	80042ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	4798      	blx	r3
 80042da:	e000      	b.n	80042de <HAL_DMA_IRQHandler+0x30e>
        return;
 80042dc:	bf00      	nop
    }
  }
}
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004300:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b40      	cmp	r3, #64	@ 0x40
 8004310:	d108      	bne.n	8004324 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004322:	e007      	b.n	8004334 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	60da      	str	r2, [r3, #12]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	3b10      	subs	r3, #16
 8004350:	4a14      	ldr	r2, [pc, #80]	@ (80043a4 <DMA_CalcBaseAndBitshift+0x64>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	091b      	lsrs	r3, r3, #4
 8004358:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800435a:	4a13      	ldr	r2, [pc, #76]	@ (80043a8 <DMA_CalcBaseAndBitshift+0x68>)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d909      	bls.n	8004382 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004376:	f023 0303 	bic.w	r3, r3, #3
 800437a:	1d1a      	adds	r2, r3, #4
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004380:	e007      	b.n	8004392 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800438a:	f023 0303 	bic.w	r3, r3, #3
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	aaaaaaab 	.word	0xaaaaaaab
 80043a8:	0800bba8 	.word	0x0800bba8

080043ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11f      	bne.n	8004406 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d856      	bhi.n	800447a <DMA_CheckFifoParam+0xce>
 80043cc:	a201      	add	r2, pc, #4	@ (adr r2, 80043d4 <DMA_CheckFifoParam+0x28>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	080043e5 	.word	0x080043e5
 80043d8:	080043f7 	.word	0x080043f7
 80043dc:	080043e5 	.word	0x080043e5
 80043e0:	0800447b 	.word	0x0800447b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d046      	beq.n	800447e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f4:	e043      	b.n	800447e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043fe:	d140      	bne.n	8004482 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004404:	e03d      	b.n	8004482 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800440e:	d121      	bne.n	8004454 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b03      	cmp	r3, #3
 8004414:	d837      	bhi.n	8004486 <DMA_CheckFifoParam+0xda>
 8004416:	a201      	add	r2, pc, #4	@ (adr r2, 800441c <DMA_CheckFifoParam+0x70>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	0800442d 	.word	0x0800442d
 8004420:	08004433 	.word	0x08004433
 8004424:	0800442d 	.word	0x0800442d
 8004428:	08004445 	.word	0x08004445
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
      break;
 8004430:	e030      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004436:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d025      	beq.n	800448a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004442:	e022      	b.n	800448a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004448:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800444c:	d11f      	bne.n	800448e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004452:	e01c      	b.n	800448e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d903      	bls.n	8004462 <DMA_CheckFifoParam+0xb6>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b03      	cmp	r3, #3
 800445e:	d003      	beq.n	8004468 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004460:	e018      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
      break;
 8004466:	e015      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
      break;
 8004478:	e00b      	b.n	8004492 <DMA_CheckFifoParam+0xe6>
      break;
 800447a:	bf00      	nop
 800447c:	e00a      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 800447e:	bf00      	nop
 8004480:	e008      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 8004482:	bf00      	nop
 8004484:	e006      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 8004486:	bf00      	nop
 8004488:	e004      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 800448a:	bf00      	nop
 800448c:	e002      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;   
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 8004492:	bf00      	nop
    }
  } 
  
  return status; 
 8004494:	7bfb      	ldrb	r3, [r7, #15]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop

080044a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b089      	sub	sp, #36	@ 0x24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
 80044be:	e16b      	b.n	8004798 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044c0:	2201      	movs	r2, #1
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	429a      	cmp	r2, r3
 80044da:	f040 815a 	bne.w	8004792 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d005      	beq.n	80044f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d130      	bne.n	8004558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	2203      	movs	r2, #3
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4013      	ands	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800452c:	2201      	movs	r2, #1
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 0201 	and.w	r2, r3, #1
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b03      	cmp	r3, #3
 8004562:	d017      	beq.n	8004594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2203      	movs	r2, #3
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d123      	bne.n	80045e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	08da      	lsrs	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3208      	adds	r2, #8
 80045a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	220f      	movs	r2, #15
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	08da      	lsrs	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3208      	adds	r2, #8
 80045e2:	69b9      	ldr	r1, [r7, #24]
 80045e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	2203      	movs	r2, #3
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4013      	ands	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0203 	and.w	r2, r3, #3
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80b4 	beq.w	8004792 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	4b60      	ldr	r3, [pc, #384]	@ (80047b0 <HAL_GPIO_Init+0x30c>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	4a5f      	ldr	r2, [pc, #380]	@ (80047b0 <HAL_GPIO_Init+0x30c>)
 8004634:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004638:	6453      	str	r3, [r2, #68]	@ 0x44
 800463a:	4b5d      	ldr	r3, [pc, #372]	@ (80047b0 <HAL_GPIO_Init+0x30c>)
 800463c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004646:	4a5b      	ldr	r2, [pc, #364]	@ (80047b4 <HAL_GPIO_Init+0x310>)
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	3302      	adds	r3, #2
 800464e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	220f      	movs	r2, #15
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4013      	ands	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a52      	ldr	r2, [pc, #328]	@ (80047b8 <HAL_GPIO_Init+0x314>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d02b      	beq.n	80046ca <HAL_GPIO_Init+0x226>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a51      	ldr	r2, [pc, #324]	@ (80047bc <HAL_GPIO_Init+0x318>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d025      	beq.n	80046c6 <HAL_GPIO_Init+0x222>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a50      	ldr	r2, [pc, #320]	@ (80047c0 <HAL_GPIO_Init+0x31c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01f      	beq.n	80046c2 <HAL_GPIO_Init+0x21e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a4f      	ldr	r2, [pc, #316]	@ (80047c4 <HAL_GPIO_Init+0x320>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d019      	beq.n	80046be <HAL_GPIO_Init+0x21a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a4e      	ldr	r2, [pc, #312]	@ (80047c8 <HAL_GPIO_Init+0x324>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <HAL_GPIO_Init+0x216>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a4d      	ldr	r2, [pc, #308]	@ (80047cc <HAL_GPIO_Init+0x328>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00d      	beq.n	80046b6 <HAL_GPIO_Init+0x212>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a4c      	ldr	r2, [pc, #304]	@ (80047d0 <HAL_GPIO_Init+0x32c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d007      	beq.n	80046b2 <HAL_GPIO_Init+0x20e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a4b      	ldr	r2, [pc, #300]	@ (80047d4 <HAL_GPIO_Init+0x330>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d101      	bne.n	80046ae <HAL_GPIO_Init+0x20a>
 80046aa:	2307      	movs	r3, #7
 80046ac:	e00e      	b.n	80046cc <HAL_GPIO_Init+0x228>
 80046ae:	2308      	movs	r3, #8
 80046b0:	e00c      	b.n	80046cc <HAL_GPIO_Init+0x228>
 80046b2:	2306      	movs	r3, #6
 80046b4:	e00a      	b.n	80046cc <HAL_GPIO_Init+0x228>
 80046b6:	2305      	movs	r3, #5
 80046b8:	e008      	b.n	80046cc <HAL_GPIO_Init+0x228>
 80046ba:	2304      	movs	r3, #4
 80046bc:	e006      	b.n	80046cc <HAL_GPIO_Init+0x228>
 80046be:	2303      	movs	r3, #3
 80046c0:	e004      	b.n	80046cc <HAL_GPIO_Init+0x228>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e002      	b.n	80046cc <HAL_GPIO_Init+0x228>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <HAL_GPIO_Init+0x228>
 80046ca:	2300      	movs	r3, #0
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	f002 0203 	and.w	r2, r2, #3
 80046d2:	0092      	lsls	r2, r2, #2
 80046d4:	4093      	lsls	r3, r2
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046dc:	4935      	ldr	r1, [pc, #212]	@ (80047b4 <HAL_GPIO_Init+0x310>)
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	089b      	lsrs	r3, r3, #2
 80046e2:	3302      	adds	r3, #2
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046ea:	4b3b      	ldr	r3, [pc, #236]	@ (80047d8 <HAL_GPIO_Init+0x334>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	43db      	mvns	r3, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4013      	ands	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800470e:	4a32      	ldr	r2, [pc, #200]	@ (80047d8 <HAL_GPIO_Init+0x334>)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004714:	4b30      	ldr	r3, [pc, #192]	@ (80047d8 <HAL_GPIO_Init+0x334>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	43db      	mvns	r3, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4013      	ands	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004738:	4a27      	ldr	r2, [pc, #156]	@ (80047d8 <HAL_GPIO_Init+0x334>)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800473e:	4b26      	ldr	r3, [pc, #152]	@ (80047d8 <HAL_GPIO_Init+0x334>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	43db      	mvns	r3, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4013      	ands	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004762:	4a1d      	ldr	r2, [pc, #116]	@ (80047d8 <HAL_GPIO_Init+0x334>)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004768:	4b1b      	ldr	r3, [pc, #108]	@ (80047d8 <HAL_GPIO_Init+0x334>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	43db      	mvns	r3, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800478c:	4a12      	ldr	r2, [pc, #72]	@ (80047d8 <HAL_GPIO_Init+0x334>)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	3301      	adds	r3, #1
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	2b0f      	cmp	r3, #15
 800479c:	f67f ae90 	bls.w	80044c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	3724      	adds	r7, #36	@ 0x24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800
 80047b4:	40013800 	.word	0x40013800
 80047b8:	40020000 	.word	0x40020000
 80047bc:	40020400 	.word	0x40020400
 80047c0:	40020800 	.word	0x40020800
 80047c4:	40020c00 	.word	0x40020c00
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40021400 	.word	0x40021400
 80047d0:	40021800 	.word	0x40021800
 80047d4:	40021c00 	.word	0x40021c00
 80047d8:	40013c00 	.word	0x40013c00

080047dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	807b      	strh	r3, [r7, #2]
 80047e8:	4613      	mov	r3, r2
 80047ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047ec:	787b      	ldrb	r3, [r7, #1]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047f2:	887a      	ldrh	r2, [r7, #2]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047f8:	e003      	b.n	8004802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047fa:	887b      	ldrh	r3, [r7, #2]
 80047fc:	041a      	lsls	r2, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	619a      	str	r2, [r3, #24]
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	460b      	mov	r3, r1
 8004818:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004820:	887a      	ldrh	r2, [r7, #2]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4013      	ands	r3, r2
 8004826:	041a      	lsls	r2, r3, #16
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	43d9      	mvns	r1, r3
 800482c:	887b      	ldrh	r3, [r7, #2]
 800482e:	400b      	ands	r3, r1
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	619a      	str	r2, [r3, #24]
}
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e12b      	b.n	8004aae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd f832 	bl	80018d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2224      	movs	r2, #36	@ 0x24
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004896:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048a8:	f000 fd80 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 80048ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	4a81      	ldr	r2, [pc, #516]	@ (8004ab8 <HAL_I2C_Init+0x274>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d807      	bhi.n	80048c8 <HAL_I2C_Init+0x84>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a80      	ldr	r2, [pc, #512]	@ (8004abc <HAL_I2C_Init+0x278>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	bf94      	ite	ls
 80048c0:	2301      	movls	r3, #1
 80048c2:	2300      	movhi	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	e006      	b.n	80048d6 <HAL_I2C_Init+0x92>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a7d      	ldr	r2, [pc, #500]	@ (8004ac0 <HAL_I2C_Init+0x27c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	bf94      	ite	ls
 80048d0:	2301      	movls	r3, #1
 80048d2:	2300      	movhi	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e0e7      	b.n	8004aae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4a78      	ldr	r2, [pc, #480]	@ (8004ac4 <HAL_I2C_Init+0x280>)
 80048e2:	fba2 2303 	umull	r2, r3, r2, r3
 80048e6:	0c9b      	lsrs	r3, r3, #18
 80048e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4a6a      	ldr	r2, [pc, #424]	@ (8004ab8 <HAL_I2C_Init+0x274>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d802      	bhi.n	8004918 <HAL_I2C_Init+0xd4>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	3301      	adds	r3, #1
 8004916:	e009      	b.n	800492c <HAL_I2C_Init+0xe8>
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800491e:	fb02 f303 	mul.w	r3, r2, r3
 8004922:	4a69      	ldr	r2, [pc, #420]	@ (8004ac8 <HAL_I2C_Init+0x284>)
 8004924:	fba2 2303 	umull	r2, r3, r2, r3
 8004928:	099b      	lsrs	r3, r3, #6
 800492a:	3301      	adds	r3, #1
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6812      	ldr	r2, [r2, #0]
 8004930:	430b      	orrs	r3, r1
 8004932:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800493e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	495c      	ldr	r1, [pc, #368]	@ (8004ab8 <HAL_I2C_Init+0x274>)
 8004948:	428b      	cmp	r3, r1
 800494a:	d819      	bhi.n	8004980 <HAL_I2C_Init+0x13c>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	1e59      	subs	r1, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	fbb1 f3f3 	udiv	r3, r1, r3
 800495a:	1c59      	adds	r1, r3, #1
 800495c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004960:	400b      	ands	r3, r1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_I2C_Init+0x138>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1e59      	subs	r1, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	fbb1 f3f3 	udiv	r3, r1, r3
 8004974:	3301      	adds	r3, #1
 8004976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800497a:	e051      	b.n	8004a20 <HAL_I2C_Init+0x1dc>
 800497c:	2304      	movs	r3, #4
 800497e:	e04f      	b.n	8004a20 <HAL_I2C_Init+0x1dc>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d111      	bne.n	80049ac <HAL_I2C_Init+0x168>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1e58      	subs	r0, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	440b      	add	r3, r1
 8004996:	fbb0 f3f3 	udiv	r3, r0, r3
 800499a:	3301      	adds	r3, #1
 800499c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e012      	b.n	80049d2 <HAL_I2C_Init+0x18e>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1e58      	subs	r0, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	0099      	lsls	r1, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c2:	3301      	adds	r3, #1
 80049c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf0c      	ite	eq
 80049cc:	2301      	moveq	r3, #1
 80049ce:	2300      	movne	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_Init+0x196>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e022      	b.n	8004a20 <HAL_I2C_Init+0x1dc>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10e      	bne.n	8004a00 <HAL_I2C_Init+0x1bc>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1e58      	subs	r0, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6859      	ldr	r1, [r3, #4]
 80049ea:	460b      	mov	r3, r1
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	440b      	add	r3, r1
 80049f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049f4:	3301      	adds	r3, #1
 80049f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049fe:	e00f      	b.n	8004a20 <HAL_I2C_Init+0x1dc>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	1e58      	subs	r0, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6859      	ldr	r1, [r3, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	0099      	lsls	r1, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a16:	3301      	adds	r3, #1
 8004a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	6809      	ldr	r1, [r1, #0]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69da      	ldr	r2, [r3, #28]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6911      	ldr	r1, [r2, #16]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68d2      	ldr	r2, [r2, #12]
 8004a5a:	4311      	orrs	r1, r2
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6812      	ldr	r2, [r2, #0]
 8004a60:	430b      	orrs	r3, r1
 8004a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695a      	ldr	r2, [r3, #20]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	000186a0 	.word	0x000186a0
 8004abc:	001e847f 	.word	0x001e847f
 8004ac0:	003d08ff 	.word	0x003d08ff
 8004ac4:	431bde83 	.word	0x431bde83
 8004ac8:	10624dd3 	.word	0x10624dd3

08004acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e267      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d075      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aea:	4b88      	ldr	r3, [pc, #544]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d00c      	beq.n	8004b10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004af6:	4b85      	ldr	r3, [pc, #532]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d112      	bne.n	8004b28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b02:	4b82      	ldr	r3, [pc, #520]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b0e:	d10b      	bne.n	8004b28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b10:	4b7e      	ldr	r3, [pc, #504]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d05b      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x108>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d157      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e242      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b30:	d106      	bne.n	8004b40 <HAL_RCC_OscConfig+0x74>
 8004b32:	4b76      	ldr	r3, [pc, #472]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a75      	ldr	r2, [pc, #468]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	e01d      	b.n	8004b7c <HAL_RCC_OscConfig+0xb0>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b48:	d10c      	bne.n	8004b64 <HAL_RCC_OscConfig+0x98>
 8004b4a:	4b70      	ldr	r3, [pc, #448]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a6f      	ldr	r2, [pc, #444]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	4b6d      	ldr	r3, [pc, #436]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a6c      	ldr	r2, [pc, #432]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e00b      	b.n	8004b7c <HAL_RCC_OscConfig+0xb0>
 8004b64:	4b69      	ldr	r3, [pc, #420]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a68      	ldr	r2, [pc, #416]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	4b66      	ldr	r3, [pc, #408]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a65      	ldr	r2, [pc, #404]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004b76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d013      	beq.n	8004bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7fe fb38 	bl	80031f8 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b8c:	f7fe fb34 	bl	80031f8 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	@ 0x64
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e207      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9e:	4b5b      	ldr	r3, [pc, #364]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0xc0>
 8004baa:	e014      	b.n	8004bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bac:	f7fe fb24 	bl	80031f8 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bb4:	f7fe fb20 	bl	80031f8 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b64      	cmp	r3, #100	@ 0x64
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e1f3      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc6:	4b51      	ldr	r3, [pc, #324]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0xe8>
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d063      	beq.n	8004caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004be2:	4b4a      	ldr	r3, [pc, #296]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 030c 	and.w	r3, r3, #12
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bee:	4b47      	ldr	r3, [pc, #284]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d11c      	bne.n	8004c34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bfa:	4b44      	ldr	r3, [pc, #272]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d116      	bne.n	8004c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c06:	4b41      	ldr	r3, [pc, #260]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_RCC_OscConfig+0x152>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d001      	beq.n	8004c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e1c7      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4937      	ldr	r1, [pc, #220]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c32:	e03a      	b.n	8004caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d020      	beq.n	8004c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c3c:	4b34      	ldr	r3, [pc, #208]	@ (8004d10 <HAL_RCC_OscConfig+0x244>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7fe fad9 	bl	80031f8 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c4a:	f7fe fad5 	bl	80031f8 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e1a8      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c68:	4b28      	ldr	r3, [pc, #160]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4925      	ldr	r1, [pc, #148]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	600b      	str	r3, [r1, #0]
 8004c7c:	e015      	b.n	8004caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7e:	4b24      	ldr	r3, [pc, #144]	@ (8004d10 <HAL_RCC_OscConfig+0x244>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fe fab8 	bl	80031f8 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c8c:	f7fe fab4 	bl	80031f8 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e187      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d036      	beq.n	8004d24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d016      	beq.n	8004cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cbe:	4b15      	ldr	r3, [pc, #84]	@ (8004d14 <HAL_RCC_OscConfig+0x248>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc4:	f7fe fa98 	bl	80031f8 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ccc:	f7fe fa94 	bl	80031f8 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e167      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cde:	4b0b      	ldr	r3, [pc, #44]	@ (8004d0c <HAL_RCC_OscConfig+0x240>)
 8004ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x200>
 8004cea:	e01b      	b.n	8004d24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cec:	4b09      	ldr	r3, [pc, #36]	@ (8004d14 <HAL_RCC_OscConfig+0x248>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf2:	f7fe fa81 	bl	80031f8 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf8:	e00e      	b.n	8004d18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cfa:	f7fe fa7d 	bl	80031f8 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d907      	bls.n	8004d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e150      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	42470000 	.word	0x42470000
 8004d14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d18:	4b88      	ldr	r3, [pc, #544]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1ea      	bne.n	8004cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8097 	beq.w	8004e60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d32:	2300      	movs	r3, #0
 8004d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d36:	4b81      	ldr	r3, [pc, #516]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d42:	2300      	movs	r3, #0
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	4b7d      	ldr	r3, [pc, #500]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d52:	4b7a      	ldr	r3, [pc, #488]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d62:	4b77      	ldr	r3, [pc, #476]	@ (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d118      	bne.n	8004da0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d6e:	4b74      	ldr	r3, [pc, #464]	@ (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a73      	ldr	r2, [pc, #460]	@ (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7a:	f7fe fa3d 	bl	80031f8 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d82:	f7fe fa39 	bl	80031f8 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e10c      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	4b6a      	ldr	r3, [pc, #424]	@ (8004f40 <HAL_RCC_OscConfig+0x474>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <HAL_RCC_OscConfig+0x2ea>
 8004da8:	4b64      	ldr	r3, [pc, #400]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dac:	4a63      	ldr	r2, [pc, #396]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db4:	e01c      	b.n	8004df0 <HAL_RCC_OscConfig+0x324>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b05      	cmp	r3, #5
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x30c>
 8004dbe:	4b5f      	ldr	r3, [pc, #380]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc2:	4a5e      	ldr	r2, [pc, #376]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dc4:	f043 0304 	orr.w	r3, r3, #4
 8004dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dca:	4b5c      	ldr	r3, [pc, #368]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dce:	4a5b      	ldr	r2, [pc, #364]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd6:	e00b      	b.n	8004df0 <HAL_RCC_OscConfig+0x324>
 8004dd8:	4b58      	ldr	r3, [pc, #352]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ddc:	4a57      	ldr	r2, [pc, #348]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de4:	4b55      	ldr	r3, [pc, #340]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de8:	4a54      	ldr	r2, [pc, #336]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004dea:	f023 0304 	bic.w	r3, r3, #4
 8004dee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d015      	beq.n	8004e24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df8:	f7fe f9fe 	bl	80031f8 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfe:	e00a      	b.n	8004e16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e00:	f7fe f9fa 	bl	80031f8 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e0cb      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	4b49      	ldr	r3, [pc, #292]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0ee      	beq.n	8004e00 <HAL_RCC_OscConfig+0x334>
 8004e22:	e014      	b.n	8004e4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e24:	f7fe f9e8 	bl	80031f8 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2c:	f7fe f9e4 	bl	80031f8 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e0b5      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e42:	4b3e      	ldr	r3, [pc, #248]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1ee      	bne.n	8004e2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d105      	bne.n	8004e60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e54:	4b39      	ldr	r3, [pc, #228]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	4a38      	ldr	r2, [pc, #224]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80a1 	beq.w	8004fac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e6a:	4b34      	ldr	r3, [pc, #208]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d05c      	beq.n	8004f30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d141      	bne.n	8004f02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7e:	4b31      	ldr	r3, [pc, #196]	@ (8004f44 <HAL_RCC_OscConfig+0x478>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e84:	f7fe f9b8 	bl	80031f8 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e8c:	f7fe f9b4 	bl	80031f8 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e087      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	4b27      	ldr	r3, [pc, #156]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69da      	ldr	r2, [r3, #28]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	019b      	lsls	r3, r3, #6
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	041b      	lsls	r3, r3, #16
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	061b      	lsls	r3, r3, #24
 8004ece:	491b      	ldr	r1, [pc, #108]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f44 <HAL_RCC_OscConfig+0x478>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eda:	f7fe f98d 	bl	80031f8 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee2:	f7fe f989 	bl	80031f8 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e05c      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef4:	4b11      	ldr	r3, [pc, #68]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x416>
 8004f00:	e054      	b.n	8004fac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f02:	4b10      	ldr	r3, [pc, #64]	@ (8004f44 <HAL_RCC_OscConfig+0x478>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f08:	f7fe f976 	bl	80031f8 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f10:	f7fe f972 	bl	80031f8 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e045      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f22:	4b06      	ldr	r3, [pc, #24]	@ (8004f3c <HAL_RCC_OscConfig+0x470>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x444>
 8004f2e:	e03d      	b.n	8004fac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d107      	bne.n	8004f48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e038      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	40007000 	.word	0x40007000
 8004f44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f48:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb8 <HAL_RCC_OscConfig+0x4ec>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d028      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d121      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d11a      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f78:	4013      	ands	r3, r2
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d111      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	3b01      	subs	r3, #1
 8004f92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d107      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40023800 	.word	0x40023800

08004fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0cc      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd0:	4b68      	ldr	r3, [pc, #416]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d90c      	bls.n	8004ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fde:	4b65      	ldr	r3, [pc, #404]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	4b63      	ldr	r3, [pc, #396]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0b8      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d020      	beq.n	8005046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005010:	4b59      	ldr	r3, [pc, #356]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	4a58      	ldr	r2, [pc, #352]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800501a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005028:	4b53      	ldr	r3, [pc, #332]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4a52      	ldr	r2, [pc, #328]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005034:	4b50      	ldr	r3, [pc, #320]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	494d      	ldr	r1, [pc, #308]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	4313      	orrs	r3, r2
 8005044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d044      	beq.n	80050dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505a:	4b47      	ldr	r3, [pc, #284]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d119      	bne.n	800509a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e07f      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d003      	beq.n	800507a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005076:	2b03      	cmp	r3, #3
 8005078:	d107      	bne.n	800508a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800507a:	4b3f      	ldr	r3, [pc, #252]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e06f      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508a:	4b3b      	ldr	r3, [pc, #236]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e067      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800509a:	4b37      	ldr	r3, [pc, #220]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f023 0203 	bic.w	r2, r3, #3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	4934      	ldr	r1, [pc, #208]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050ac:	f7fe f8a4 	bl	80031f8 <HAL_GetTick>
 80050b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b2:	e00a      	b.n	80050ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b4:	f7fe f8a0 	bl	80031f8 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e04f      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 020c 	and.w	r2, r3, #12
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	429a      	cmp	r2, r3
 80050da:	d1eb      	bne.n	80050b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050dc:	4b25      	ldr	r3, [pc, #148]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d20c      	bcs.n	8005104 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ea:	4b22      	ldr	r3, [pc, #136]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f2:	4b20      	ldr	r3, [pc, #128]	@ (8005174 <HAL_RCC_ClockConfig+0x1b8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d001      	beq.n	8005104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e032      	b.n	800516a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005110:	4b19      	ldr	r3, [pc, #100]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	4916      	ldr	r1, [pc, #88]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	4313      	orrs	r3, r2
 8005120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d009      	beq.n	8005142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800512e:	4b12      	ldr	r3, [pc, #72]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	490e      	ldr	r1, [pc, #56]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	4313      	orrs	r3, r2
 8005140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005142:	f000 f821 	bl	8005188 <HAL_RCC_GetSysClockFreq>
 8005146:	4602      	mov	r2, r0
 8005148:	4b0b      	ldr	r3, [pc, #44]	@ (8005178 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	490a      	ldr	r1, [pc, #40]	@ (800517c <HAL_RCC_ClockConfig+0x1c0>)
 8005154:	5ccb      	ldrb	r3, [r1, r3]
 8005156:	fa22 f303 	lsr.w	r3, r2, r3
 800515a:	4a09      	ldr	r2, [pc, #36]	@ (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 800515c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800515e:	4b09      	ldr	r3, [pc, #36]	@ (8005184 <HAL_RCC_ClockConfig+0x1c8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fe f804 	bl	8003170 <HAL_InitTick>

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40023c00 	.word	0x40023c00
 8005178:	40023800 	.word	0x40023800
 800517c:	0800bb90 	.word	0x0800bb90
 8005180:	20000008 	.word	0x20000008
 8005184:	2000000c 	.word	0x2000000c

08005188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800518c:	b094      	sub	sp, #80	@ 0x50
 800518e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	647b      	str	r3, [r7, #68]	@ 0x44
 8005194:	2300      	movs	r3, #0
 8005196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005198:	2300      	movs	r3, #0
 800519a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051a0:	4b79      	ldr	r3, [pc, #484]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 030c 	and.w	r3, r3, #12
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d00d      	beq.n	80051c8 <HAL_RCC_GetSysClockFreq+0x40>
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	f200 80e1 	bhi.w	8005374 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0x34>
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d003      	beq.n	80051c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ba:	e0db      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051bc:	4b73      	ldr	r3, [pc, #460]	@ (800538c <HAL_RCC_GetSysClockFreq+0x204>)
 80051be:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80051c0:	e0db      	b.n	800537a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051c2:	4b73      	ldr	r3, [pc, #460]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x208>)
 80051c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051c6:	e0d8      	b.n	800537a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051c8:	4b6f      	ldr	r3, [pc, #444]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051d2:	4b6d      	ldr	r3, [pc, #436]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d063      	beq.n	80052a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051de:	4b6a      	ldr	r3, [pc, #424]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	099b      	lsrs	r3, r3, #6
 80051e4:	2200      	movs	r2, #0
 80051e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051f2:	2300      	movs	r3, #0
 80051f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80051fa:	4622      	mov	r2, r4
 80051fc:	462b      	mov	r3, r5
 80051fe:	f04f 0000 	mov.w	r0, #0
 8005202:	f04f 0100 	mov.w	r1, #0
 8005206:	0159      	lsls	r1, r3, #5
 8005208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800520c:	0150      	lsls	r0, r2, #5
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4621      	mov	r1, r4
 8005214:	1a51      	subs	r1, r2, r1
 8005216:	6139      	str	r1, [r7, #16]
 8005218:	4629      	mov	r1, r5
 800521a:	eb63 0301 	sbc.w	r3, r3, r1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800522c:	4659      	mov	r1, fp
 800522e:	018b      	lsls	r3, r1, #6
 8005230:	4651      	mov	r1, sl
 8005232:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005236:	4651      	mov	r1, sl
 8005238:	018a      	lsls	r2, r1, #6
 800523a:	4651      	mov	r1, sl
 800523c:	ebb2 0801 	subs.w	r8, r2, r1
 8005240:	4659      	mov	r1, fp
 8005242:	eb63 0901 	sbc.w	r9, r3, r1
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800525a:	4690      	mov	r8, r2
 800525c:	4699      	mov	r9, r3
 800525e:	4623      	mov	r3, r4
 8005260:	eb18 0303 	adds.w	r3, r8, r3
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	462b      	mov	r3, r5
 8005268:	eb49 0303 	adc.w	r3, r9, r3
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800527a:	4629      	mov	r1, r5
 800527c:	024b      	lsls	r3, r1, #9
 800527e:	4621      	mov	r1, r4
 8005280:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005284:	4621      	mov	r1, r4
 8005286:	024a      	lsls	r2, r1, #9
 8005288:	4610      	mov	r0, r2
 800528a:	4619      	mov	r1, r3
 800528c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800528e:	2200      	movs	r2, #0
 8005290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005294:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005298:	f7fb fc10 	bl	8000abc <__aeabi_uldivmod>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4613      	mov	r3, r2
 80052a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a4:	e058      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052a6:	4b38      	ldr	r3, [pc, #224]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	099b      	lsrs	r3, r3, #6
 80052ac:	2200      	movs	r2, #0
 80052ae:	4618      	mov	r0, r3
 80052b0:	4611      	mov	r1, r2
 80052b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052b6:	623b      	str	r3, [r7, #32]
 80052b8:	2300      	movs	r3, #0
 80052ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80052bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052c0:	4642      	mov	r2, r8
 80052c2:	464b      	mov	r3, r9
 80052c4:	f04f 0000 	mov.w	r0, #0
 80052c8:	f04f 0100 	mov.w	r1, #0
 80052cc:	0159      	lsls	r1, r3, #5
 80052ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052d2:	0150      	lsls	r0, r2, #5
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4641      	mov	r1, r8
 80052da:	ebb2 0a01 	subs.w	sl, r2, r1
 80052de:	4649      	mov	r1, r9
 80052e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052f8:	ebb2 040a 	subs.w	r4, r2, sl
 80052fc:	eb63 050b 	sbc.w	r5, r3, fp
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	00eb      	lsls	r3, r5, #3
 800530a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800530e:	00e2      	lsls	r2, r4, #3
 8005310:	4614      	mov	r4, r2
 8005312:	461d      	mov	r5, r3
 8005314:	4643      	mov	r3, r8
 8005316:	18e3      	adds	r3, r4, r3
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	464b      	mov	r3, r9
 800531c:	eb45 0303 	adc.w	r3, r5, r3
 8005320:	607b      	str	r3, [r7, #4]
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800532e:	4629      	mov	r1, r5
 8005330:	028b      	lsls	r3, r1, #10
 8005332:	4621      	mov	r1, r4
 8005334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005338:	4621      	mov	r1, r4
 800533a:	028a      	lsls	r2, r1, #10
 800533c:	4610      	mov	r0, r2
 800533e:	4619      	mov	r1, r3
 8005340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005342:	2200      	movs	r2, #0
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	61fa      	str	r2, [r7, #28]
 8005348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800534c:	f7fb fbb6 	bl	8000abc <__aeabi_uldivmod>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4613      	mov	r3, r2
 8005356:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005358:	4b0b      	ldr	r3, [pc, #44]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x200>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	0c1b      	lsrs	r3, r3, #16
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	3301      	adds	r3, #1
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005368:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800536a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800536c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005370:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005372:	e002      	b.n	800537a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005374:	4b05      	ldr	r3, [pc, #20]	@ (800538c <HAL_RCC_GetSysClockFreq+0x204>)
 8005376:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800537a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800537c:	4618      	mov	r0, r3
 800537e:	3750      	adds	r7, #80	@ 0x50
 8005380:	46bd      	mov	sp, r7
 8005382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005386:	bf00      	nop
 8005388:	40023800 	.word	0x40023800
 800538c:	00f42400 	.word	0x00f42400
 8005390:	007a1200 	.word	0x007a1200

08005394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005398:	4b03      	ldr	r3, [pc, #12]	@ (80053a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800539a:	681b      	ldr	r3, [r3, #0]
}
 800539c:	4618      	mov	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20000008 	.word	0x20000008

080053ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053b0:	f7ff fff0 	bl	8005394 <HAL_RCC_GetHCLKFreq>
 80053b4:	4602      	mov	r2, r0
 80053b6:	4b05      	ldr	r3, [pc, #20]	@ (80053cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	0a9b      	lsrs	r3, r3, #10
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	4903      	ldr	r1, [pc, #12]	@ (80053d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053c2:	5ccb      	ldrb	r3, [r1, r3]
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40023800 	.word	0x40023800
 80053d0:	0800bba0 	.word	0x0800bba0

080053d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053d8:	f7ff ffdc 	bl	8005394 <HAL_RCC_GetHCLKFreq>
 80053dc:	4602      	mov	r2, r0
 80053de:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	0b5b      	lsrs	r3, r3, #13
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	4903      	ldr	r1, [pc, #12]	@ (80053f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ea:	5ccb      	ldrb	r3, [r1, r3]
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40023800 	.word	0x40023800
 80053f8:	0800bba0 	.word	0x0800bba0

080053fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e07b      	b.n	8005506 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	2b00      	cmp	r3, #0
 8005414:	d108      	bne.n	8005428 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800541e:	d009      	beq.n	8005434 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	61da      	str	r2, [r3, #28]
 8005426:	e005      	b.n	8005434 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fd fa5a 	bl	8002908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800546a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b8:	ea42 0103 	orr.w	r1, r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	0c1b      	lsrs	r3, r3, #16
 80054d2:	f003 0104 	and.w	r1, r3, #4
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054da:	f003 0210 	and.w	r2, r3, #16
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69da      	ldr	r2, [r3, #28]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b088      	sub	sp, #32
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	603b      	str	r3, [r7, #0]
 800551a:	4613      	mov	r3, r2
 800551c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_SPI_Transmit+0x22>
 800552c:	2302      	movs	r3, #2
 800552e:	e126      	b.n	800577e <HAL_SPI_Transmit+0x270>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005538:	f7fd fe5e 	bl	80031f8 <HAL_GetTick>
 800553c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800553e:	88fb      	ldrh	r3, [r7, #6]
 8005540:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	d002      	beq.n	8005554 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800554e:	2302      	movs	r3, #2
 8005550:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005552:	e10b      	b.n	800576c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_SPI_Transmit+0x52>
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005564:	e102      	b.n	800576c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2203      	movs	r2, #3
 800556a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	88fa      	ldrh	r2, [r7, #6]
 800557e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	88fa      	ldrh	r2, [r7, #6]
 8005584:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ac:	d10f      	bne.n	80055ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d8:	2b40      	cmp	r3, #64	@ 0x40
 80055da:	d007      	beq.n	80055ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055f4:	d14b      	bne.n	800568e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_SPI_Transmit+0xf6>
 80055fe:	8afb      	ldrh	r3, [r7, #22]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d13e      	bne.n	8005682 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005608:	881a      	ldrh	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005614:	1c9a      	adds	r2, r3, #2
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800561e:	b29b      	uxth	r3, r3
 8005620:	3b01      	subs	r3, #1
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005628:	e02b      	b.n	8005682 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b02      	cmp	r3, #2
 8005636:	d112      	bne.n	800565e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563c:	881a      	ldrh	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005648:	1c9a      	adds	r2, r3, #2
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005652:	b29b      	uxth	r3, r3
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800565c:	e011      	b.n	8005682 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800565e:	f7fd fdcb 	bl	80031f8 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d803      	bhi.n	8005676 <HAL_SPI_Transmit+0x168>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005674:	d102      	bne.n	800567c <HAL_SPI_Transmit+0x16e>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d102      	bne.n	8005682 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005680:	e074      	b.n	800576c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005686:	b29b      	uxth	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1ce      	bne.n	800562a <HAL_SPI_Transmit+0x11c>
 800568c:	e04c      	b.n	8005728 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_SPI_Transmit+0x18e>
 8005696:	8afb      	ldrh	r3, [r7, #22]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d140      	bne.n	800571e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	7812      	ldrb	r2, [r2, #0]
 80056a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056c2:	e02c      	b.n	800571e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d113      	bne.n	80056fa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	7812      	ldrb	r2, [r2, #0]
 80056de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056f8:	e011      	b.n	800571e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056fa:	f7fd fd7d 	bl	80031f8 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d803      	bhi.n	8005712 <HAL_SPI_Transmit+0x204>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005710:	d102      	bne.n	8005718 <HAL_SPI_Transmit+0x20a>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d102      	bne.n	800571e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800571c:	e026      	b.n	800576c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1cd      	bne.n	80056c4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	6839      	ldr	r1, [r7, #0]
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 fbcb 	bl	8005ec8 <SPI_EndRxTxTransaction>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005746:	2300      	movs	r3, #0
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	613b      	str	r3, [r7, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	613b      	str	r3, [r7, #16]
 800575a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	77fb      	strb	r3, [r7, #31]
 8005768:	e000      	b.n	800576c <HAL_SPI_Transmit+0x25e>
  }

error:
 800576a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800577c:	7ffb      	ldrb	r3, [r7, #31]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b088      	sub	sp, #32
 800578a:	af02      	add	r7, sp, #8
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	603b      	str	r3, [r7, #0]
 8005792:	4613      	mov	r3, r2
 8005794:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057a2:	d112      	bne.n	80057ca <HAL_SPI_Receive+0x44>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10e      	bne.n	80057ca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2204      	movs	r2, #4
 80057b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057b4:	88fa      	ldrh	r2, [r7, #6]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	4613      	mov	r3, r2
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f8f1 	bl	80059a8 <HAL_SPI_TransmitReceive>
 80057c6:	4603      	mov	r3, r0
 80057c8:	e0ea      	b.n	80059a0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_SPI_Receive+0x52>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e0e3      	b.n	80059a0 <HAL_SPI_Receive+0x21a>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057e0:	f7fd fd0a 	bl	80031f8 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d002      	beq.n	80057f8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80057f2:	2302      	movs	r3, #2
 80057f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057f6:	e0ca      	b.n	800598e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <HAL_SPI_Receive+0x7e>
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005808:	e0c1      	b.n	800598e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2204      	movs	r2, #4
 800580e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	88fa      	ldrh	r2, [r7, #6]
 8005822:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	88fa      	ldrh	r2, [r7, #6]
 8005828:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005850:	d10f      	bne.n	8005872 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005860:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005870:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587c:	2b40      	cmp	r3, #64	@ 0x40
 800587e:	d007      	beq.n	8005890 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800588e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d162      	bne.n	800595e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005898:	e02e      	b.n	80058f8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d115      	bne.n	80058d4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f103 020c 	add.w	r2, r3, #12
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b4:	7812      	ldrb	r2, [r2, #0]
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058d2:	e011      	b.n	80058f8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058d4:	f7fd fc90 	bl	80031f8 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d803      	bhi.n	80058ec <HAL_SPI_Receive+0x166>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d102      	bne.n	80058f2 <HAL_SPI_Receive+0x16c>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d102      	bne.n	80058f8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058f6:	e04a      	b.n	800598e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1cb      	bne.n	800589a <HAL_SPI_Receive+0x114>
 8005902:	e031      	b.n	8005968 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b01      	cmp	r3, #1
 8005910:	d113      	bne.n	800593a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591c:	b292      	uxth	r2, r2
 800591e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005924:	1c9a      	adds	r2, r3, #2
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800592e:	b29b      	uxth	r3, r3
 8005930:	3b01      	subs	r3, #1
 8005932:	b29a      	uxth	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005938:	e011      	b.n	800595e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800593a:	f7fd fc5d 	bl	80031f8 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d803      	bhi.n	8005952 <HAL_SPI_Receive+0x1cc>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d102      	bne.n	8005958 <HAL_SPI_Receive+0x1d2>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800595c:	e017      	b.n	800598e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1cd      	bne.n	8005904 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	6839      	ldr	r1, [r7, #0]
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 fa45 	bl	8005dfc <SPI_EndRxTransaction>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	75fb      	strb	r3, [r7, #23]
 800598a:	e000      	b.n	800598e <HAL_SPI_Receive+0x208>
  }

error :
 800598c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800599e:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08c      	sub	sp, #48	@ 0x30
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059b6:	2301      	movs	r3, #1
 80059b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_SPI_TransmitReceive+0x26>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e18a      	b.n	8005ce4 <HAL_SPI_TransmitReceive+0x33c>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059d6:	f7fd fc0f 	bl	80031f8 <HAL_GetTick>
 80059da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80059ec:	887b      	ldrh	r3, [r7, #2]
 80059ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d00f      	beq.n	8005a18 <HAL_SPI_TransmitReceive+0x70>
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059fe:	d107      	bne.n	8005a10 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d103      	bne.n	8005a10 <HAL_SPI_TransmitReceive+0x68>
 8005a08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d003      	beq.n	8005a18 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a10:	2302      	movs	r3, #2
 8005a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005a16:	e15b      	b.n	8005cd0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d005      	beq.n	8005a2a <HAL_SPI_TransmitReceive+0x82>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <HAL_SPI_TransmitReceive+0x82>
 8005a24:	887b      	ldrh	r3, [r7, #2]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005a30:	e14e      	b.n	8005cd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d003      	beq.n	8005a46 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2205      	movs	r2, #5
 8005a42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	887a      	ldrh	r2, [r7, #2]
 8005a56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	887a      	ldrh	r2, [r7, #2]
 8005a5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	887a      	ldrh	r2, [r7, #2]
 8005a68:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	887a      	ldrh	r2, [r7, #2]
 8005a6e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a86:	2b40      	cmp	r3, #64	@ 0x40
 8005a88:	d007      	beq.n	8005a9a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aa2:	d178      	bne.n	8005b96 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <HAL_SPI_TransmitReceive+0x10a>
 8005aac:	8b7b      	ldrh	r3, [r7, #26]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d166      	bne.n	8005b80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab6:	881a      	ldrh	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac2:	1c9a      	adds	r2, r3, #2
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ad6:	e053      	b.n	8005b80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d11b      	bne.n	8005b1e <HAL_SPI_TransmitReceive+0x176>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d016      	beq.n	8005b1e <HAL_SPI_TransmitReceive+0x176>
 8005af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d113      	bne.n	8005b1e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afa:	881a      	ldrh	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b06:	1c9a      	adds	r2, r3, #2
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d119      	bne.n	8005b60 <HAL_SPI_TransmitReceive+0x1b8>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d014      	beq.n	8005b60 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b40:	b292      	uxth	r2, r2
 8005b42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b48:	1c9a      	adds	r2, r3, #2
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b60:	f7fd fb4a 	bl	80031f8 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d807      	bhi.n	8005b80 <HAL_SPI_TransmitReceive+0x1d8>
 8005b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b76:	d003      	beq.n	8005b80 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005b7e:	e0a7      	b.n	8005cd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1a6      	bne.n	8005ad8 <HAL_SPI_TransmitReceive+0x130>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1a1      	bne.n	8005ad8 <HAL_SPI_TransmitReceive+0x130>
 8005b94:	e07c      	b.n	8005c90 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_SPI_TransmitReceive+0x1fc>
 8005b9e:	8b7b      	ldrh	r3, [r7, #26]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d16b      	bne.n	8005c7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	330c      	adds	r3, #12
 8005bae:	7812      	ldrb	r2, [r2, #0]
 8005bb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bca:	e057      	b.n	8005c7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d11c      	bne.n	8005c14 <HAL_SPI_TransmitReceive+0x26c>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d017      	beq.n	8005c14 <HAL_SPI_TransmitReceive+0x26c>
 8005be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d114      	bne.n	8005c14 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	7812      	ldrb	r2, [r2, #0]
 8005bf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d119      	bne.n	8005c56 <HAL_SPI_TransmitReceive+0x2ae>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d014      	beq.n	8005c56 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c52:	2301      	movs	r3, #1
 8005c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c56:	f7fd facf 	bl	80031f8 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d803      	bhi.n	8005c6e <HAL_SPI_TransmitReceive+0x2c6>
 8005c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6c:	d102      	bne.n	8005c74 <HAL_SPI_TransmitReceive+0x2cc>
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d103      	bne.n	8005c7c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005c7a:	e029      	b.n	8005cd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1a2      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x224>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d19d      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f917 	bl	8005ec8 <SPI_EndRxTxTransaction>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d006      	beq.n	8005cae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005cac:	e010      	b.n	8005cd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10b      	bne.n	8005cce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	e000      	b.n	8005cd0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005cce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005ce0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3730      	adds	r7, #48	@ 0x30
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b088      	sub	sp, #32
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cfc:	f7fd fa7c 	bl	80031f8 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	4413      	add	r3, r2
 8005d0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d0c:	f7fd fa74 	bl	80031f8 <HAL_GetTick>
 8005d10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d12:	4b39      	ldr	r3, [pc, #228]	@ (8005df8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	015b      	lsls	r3, r3, #5
 8005d18:	0d1b      	lsrs	r3, r3, #20
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	fb02 f303 	mul.w	r3, r2, r3
 8005d20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d22:	e054      	b.n	8005dce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2a:	d050      	beq.n	8005dce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d2c:	f7fd fa64 	bl	80031f8 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d902      	bls.n	8005d42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d13d      	bne.n	8005dbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d5a:	d111      	bne.n	8005d80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d64:	d004      	beq.n	8005d70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d6e:	d107      	bne.n	8005d80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d88:	d10f      	bne.n	8005daa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005da8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e017      	b.n	8005dee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	bf0c      	ite	eq
 8005dde:	2301      	moveq	r3, #1
 8005de0:	2300      	movne	r3, #0
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d19b      	bne.n	8005d24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3720      	adds	r7, #32
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000008 	.word	0x20000008

08005dfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e10:	d111      	bne.n	8005e36 <SPI_EndRxTransaction+0x3a>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e1a:	d004      	beq.n	8005e26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e24:	d107      	bne.n	8005e36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e3e:	d12a      	bne.n	8005e96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e48:	d012      	beq.n	8005e70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2200      	movs	r2, #0
 8005e52:	2180      	movs	r1, #128	@ 0x80
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7ff ff49 	bl	8005cec <SPI_WaitFlagStateUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d02d      	beq.n	8005ebc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e64:	f043 0220 	orr.w	r2, r3, #32
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e026      	b.n	8005ebe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2200      	movs	r2, #0
 8005e78:	2101      	movs	r1, #1
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f7ff ff36 	bl	8005cec <SPI_WaitFlagStateUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01a      	beq.n	8005ebc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8a:	f043 0220 	orr.w	r2, r3, #32
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e013      	b.n	8005ebe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff ff23 	bl	8005cec <SPI_WaitFlagStateUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb0:	f043 0220 	orr.w	r2, r3, #32
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e000      	b.n	8005ebe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
	...

08005ec8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f44 <SPI_EndRxTxTransaction+0x7c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f48 <SPI_EndRxTxTransaction+0x80>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	0d5b      	lsrs	r3, r3, #21
 8005ee0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ee4:	fb02 f303 	mul.w	r3, r2, r3
 8005ee8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ef2:	d112      	bne.n	8005f1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2200      	movs	r2, #0
 8005efc:	2180      	movs	r1, #128	@ 0x80
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f7ff fef4 	bl	8005cec <SPI_WaitFlagStateUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d016      	beq.n	8005f38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0e:	f043 0220 	orr.w	r2, r3, #32
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e00f      	b.n	8005f3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f30:	2b80      	cmp	r3, #128	@ 0x80
 8005f32:	d0f2      	beq.n	8005f1a <SPI_EndRxTxTransaction+0x52>
 8005f34:	e000      	b.n	8005f38 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f36:	bf00      	nop
  }

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000008 	.word	0x20000008
 8005f48:	165e9f81 	.word	0x165e9f81

08005f4c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e034      	b.n	8005fcc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7fb fb3a 	bl	80015f0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3308      	adds	r3, #8
 8005f84:	4619      	mov	r1, r3
 8005f86:	4610      	mov	r0, r2
 8005f88:	f002 f84e 	bl	8008028 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	461a      	mov	r2, r3
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	f002 f898 	bl	80080cc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6858      	ldr	r0, [r3, #4]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	f002 f8cd 	bl	8008148 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	6892      	ldr	r2, [r2, #8]
 8005fb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	6892      	ldr	r2, [r2, #8]
 8005fc2:	f041 0101 	orr.w	r1, r1, #1
 8005fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e041      	b.n	800606a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fc fe7e 	bl	8002cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3304      	adds	r3, #4
 8006010:	4619      	mov	r1, r3
 8006012:	4610      	mov	r0, r2
 8006014:	f000 fc1a 	bl	800684c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b01      	cmp	r3, #1
 8006086:	d001      	beq.n	800608c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e046      	b.n	800611a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a23      	ldr	r2, [pc, #140]	@ (8006128 <HAL_TIM_Base_Start+0xb4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d022      	beq.n	80060e4 <HAL_TIM_Base_Start+0x70>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a6:	d01d      	beq.n	80060e4 <HAL_TIM_Base_Start+0x70>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1f      	ldr	r2, [pc, #124]	@ (800612c <HAL_TIM_Base_Start+0xb8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d018      	beq.n	80060e4 <HAL_TIM_Base_Start+0x70>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006130 <HAL_TIM_Base_Start+0xbc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d013      	beq.n	80060e4 <HAL_TIM_Base_Start+0x70>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006134 <HAL_TIM_Base_Start+0xc0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00e      	beq.n	80060e4 <HAL_TIM_Base_Start+0x70>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006138 <HAL_TIM_Base_Start+0xc4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d009      	beq.n	80060e4 <HAL_TIM_Base_Start+0x70>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a19      	ldr	r2, [pc, #100]	@ (800613c <HAL_TIM_Base_Start+0xc8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_TIM_Base_Start+0x70>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a18      	ldr	r2, [pc, #96]	@ (8006140 <HAL_TIM_Base_Start+0xcc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d111      	bne.n	8006108 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b06      	cmp	r3, #6
 80060f4:	d010      	beq.n	8006118 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0201 	orr.w	r2, r2, #1
 8006104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006106:	e007      	b.n	8006118 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40010000 	.word	0x40010000
 800612c:	40000400 	.word	0x40000400
 8006130:	40000800 	.word	0x40000800
 8006134:	40000c00 	.word	0x40000c00
 8006138:	40010400 	.word	0x40010400
 800613c:	40014000 	.word	0x40014000
 8006140:	40001800 	.word	0x40001800

08006144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	d001      	beq.n	800615c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e04e      	b.n	80061fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0201 	orr.w	r2, r2, #1
 8006172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a23      	ldr	r2, [pc, #140]	@ (8006208 <HAL_TIM_Base_Start_IT+0xc4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d022      	beq.n	80061c4 <HAL_TIM_Base_Start_IT+0x80>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006186:	d01d      	beq.n	80061c4 <HAL_TIM_Base_Start_IT+0x80>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a1f      	ldr	r2, [pc, #124]	@ (800620c <HAL_TIM_Base_Start_IT+0xc8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d018      	beq.n	80061c4 <HAL_TIM_Base_Start_IT+0x80>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a1e      	ldr	r2, [pc, #120]	@ (8006210 <HAL_TIM_Base_Start_IT+0xcc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d013      	beq.n	80061c4 <HAL_TIM_Base_Start_IT+0x80>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006214 <HAL_TIM_Base_Start_IT+0xd0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00e      	beq.n	80061c4 <HAL_TIM_Base_Start_IT+0x80>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006218 <HAL_TIM_Base_Start_IT+0xd4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d009      	beq.n	80061c4 <HAL_TIM_Base_Start_IT+0x80>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a19      	ldr	r2, [pc, #100]	@ (800621c <HAL_TIM_Base_Start_IT+0xd8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d004      	beq.n	80061c4 <HAL_TIM_Base_Start_IT+0x80>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a18      	ldr	r2, [pc, #96]	@ (8006220 <HAL_TIM_Base_Start_IT+0xdc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d111      	bne.n	80061e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b06      	cmp	r3, #6
 80061d4:	d010      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0201 	orr.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e6:	e007      	b.n	80061f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0201 	orr.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	40010000 	.word	0x40010000
 800620c:	40000400 	.word	0x40000400
 8006210:	40000800 	.word	0x40000800
 8006214:	40000c00 	.word	0x40000c00
 8006218:	40010400 	.word	0x40010400
 800621c:	40014000 	.word	0x40014000
 8006220:	40001800 	.word	0x40001800

08006224 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e041      	b.n	80062ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f839 	bl	80062c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3304      	adds	r3, #4
 8006260:	4619      	mov	r1, r3
 8006262:	4610      	mov	r0, r2
 8006264:	f000 faf2 	bl	800684c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b082      	sub	sp, #8
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d122      	bne.n	8006332 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d11b      	bne.n	8006332 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f06f 0202 	mvn.w	r2, #2
 8006302:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fa78 	bl	800680e <HAL_TIM_IC_CaptureCallback>
 800631e:	e005      	b.n	800632c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fa6a 	bl	80067fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fa7b 	bl	8006822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b04      	cmp	r3, #4
 800633e:	d122      	bne.n	8006386 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b04      	cmp	r3, #4
 800634c:	d11b      	bne.n	8006386 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f06f 0204 	mvn.w	r2, #4
 8006356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fa4e 	bl	800680e <HAL_TIM_IC_CaptureCallback>
 8006372:	e005      	b.n	8006380 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fa40 	bl	80067fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fa51 	bl	8006822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f003 0308 	and.w	r3, r3, #8
 8006390:	2b08      	cmp	r3, #8
 8006392:	d122      	bne.n	80063da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f003 0308 	and.w	r3, r3, #8
 800639e:	2b08      	cmp	r3, #8
 80063a0:	d11b      	bne.n	80063da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f06f 0208 	mvn.w	r2, #8
 80063aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2204      	movs	r2, #4
 80063b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fa24 	bl	800680e <HAL_TIM_IC_CaptureCallback>
 80063c6:	e005      	b.n	80063d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fa16 	bl	80067fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fa27 	bl	8006822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	2b10      	cmp	r3, #16
 80063e6:	d122      	bne.n	800642e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	2b10      	cmp	r3, #16
 80063f4:	d11b      	bne.n	800642e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f06f 0210 	mvn.w	r2, #16
 80063fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2208      	movs	r2, #8
 8006404:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f9fa 	bl	800680e <HAL_TIM_IC_CaptureCallback>
 800641a:	e005      	b.n	8006428 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f9ec 	bl	80067fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f9fd 	bl	8006822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b01      	cmp	r3, #1
 800643a:	d10e      	bne.n	800645a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b01      	cmp	r3, #1
 8006448:	d107      	bne.n	800645a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f06f 0201 	mvn.w	r2, #1
 8006452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7fc f9f7 	bl	8002848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006464:	2b80      	cmp	r3, #128	@ 0x80
 8006466:	d10e      	bne.n	8006486 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006472:	2b80      	cmp	r3, #128	@ 0x80
 8006474:	d107      	bne.n	8006486 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800647e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fd53 	bl	8006f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006490:	2b40      	cmp	r3, #64	@ 0x40
 8006492:	d10e      	bne.n	80064b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649e:	2b40      	cmp	r3, #64	@ 0x40
 80064a0:	d107      	bne.n	80064b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f9c2 	bl	8006836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	f003 0320 	and.w	r3, r3, #32
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d10e      	bne.n	80064de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b20      	cmp	r3, #32
 80064cc:	d107      	bne.n	80064de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f06f 0220 	mvn.w	r2, #32
 80064d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fd1d 	bl	8006f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006502:	2302      	movs	r3, #2
 8006504:	e0ae      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b0c      	cmp	r3, #12
 8006512:	f200 809f 	bhi.w	8006654 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006516:	a201      	add	r2, pc, #4	@ (adr r2, 800651c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	08006551 	.word	0x08006551
 8006520:	08006655 	.word	0x08006655
 8006524:	08006655 	.word	0x08006655
 8006528:	08006655 	.word	0x08006655
 800652c:	08006591 	.word	0x08006591
 8006530:	08006655 	.word	0x08006655
 8006534:	08006655 	.word	0x08006655
 8006538:	08006655 	.word	0x08006655
 800653c:	080065d3 	.word	0x080065d3
 8006540:	08006655 	.word	0x08006655
 8006544:	08006655 	.word	0x08006655
 8006548:	08006655 	.word	0x08006655
 800654c:	08006613 	.word	0x08006613
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68b9      	ldr	r1, [r7, #8]
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fa18 	bl	800698c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699a      	ldr	r2, [r3, #24]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0208 	orr.w	r2, r2, #8
 800656a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 0204 	bic.w	r2, r2, #4
 800657a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6999      	ldr	r1, [r3, #24]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	619a      	str	r2, [r3, #24]
      break;
 800658e:	e064      	b.n	800665a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68b9      	ldr	r1, [r7, #8]
 8006596:	4618      	mov	r0, r3
 8006598:	f000 fa68 	bl	8006a6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6999      	ldr	r1, [r3, #24]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	021a      	lsls	r2, r3, #8
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	619a      	str	r2, [r3, #24]
      break;
 80065d0:	e043      	b.n	800665a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68b9      	ldr	r1, [r7, #8]
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fabd 	bl	8006b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69da      	ldr	r2, [r3, #28]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0208 	orr.w	r2, r2, #8
 80065ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 0204 	bic.w	r2, r2, #4
 80065fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69d9      	ldr	r1, [r3, #28]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	61da      	str	r2, [r3, #28]
      break;
 8006610:	e023      	b.n	800665a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68b9      	ldr	r1, [r7, #8]
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fb11 	bl	8006c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69da      	ldr	r2, [r3, #28]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800662c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69da      	ldr	r2, [r3, #28]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800663c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69d9      	ldr	r1, [r3, #28]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	021a      	lsls	r2, r3, #8
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	61da      	str	r2, [r3, #28]
      break;
 8006652:	e002      	b.n	800665a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	75fb      	strb	r3, [r7, #23]
      break;
 8006658:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006662:	7dfb      	ldrb	r3, [r7, #23]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_TIM_ConfigClockSource+0x1c>
 8006684:	2302      	movs	r3, #2
 8006686:	e0b4      	b.n	80067f2 <HAL_TIM_ConfigClockSource+0x186>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066c0:	d03e      	beq.n	8006740 <HAL_TIM_ConfigClockSource+0xd4>
 80066c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066c6:	f200 8087 	bhi.w	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ce:	f000 8086 	beq.w	80067de <HAL_TIM_ConfigClockSource+0x172>
 80066d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d6:	d87f      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066d8:	2b70      	cmp	r3, #112	@ 0x70
 80066da:	d01a      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0xa6>
 80066dc:	2b70      	cmp	r3, #112	@ 0x70
 80066de:	d87b      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066e0:	2b60      	cmp	r3, #96	@ 0x60
 80066e2:	d050      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0x11a>
 80066e4:	2b60      	cmp	r3, #96	@ 0x60
 80066e6:	d877      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066e8:	2b50      	cmp	r3, #80	@ 0x50
 80066ea:	d03c      	beq.n	8006766 <HAL_TIM_ConfigClockSource+0xfa>
 80066ec:	2b50      	cmp	r3, #80	@ 0x50
 80066ee:	d873      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066f0:	2b40      	cmp	r3, #64	@ 0x40
 80066f2:	d058      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x13a>
 80066f4:	2b40      	cmp	r3, #64	@ 0x40
 80066f6:	d86f      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066f8:	2b30      	cmp	r3, #48	@ 0x30
 80066fa:	d064      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x15a>
 80066fc:	2b30      	cmp	r3, #48	@ 0x30
 80066fe:	d86b      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006700:	2b20      	cmp	r3, #32
 8006702:	d060      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006704:	2b20      	cmp	r3, #32
 8006706:	d867      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d05c      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x15a>
 800670c:	2b10      	cmp	r3, #16
 800670e:	d05a      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006710:	e062      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6899      	ldr	r1, [r3, #8]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f000 fb5d 	bl	8006de0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006734:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	609a      	str	r2, [r3, #8]
      break;
 800673e:	e04f      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	6899      	ldr	r1, [r3, #8]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f000 fb46 	bl	8006de0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006762:	609a      	str	r2, [r3, #8]
      break;
 8006764:	e03c      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	6859      	ldr	r1, [r3, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	461a      	mov	r2, r3
 8006774:	f000 faba 	bl	8006cec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2150      	movs	r1, #80	@ 0x50
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fb13 	bl	8006daa <TIM_ITRx_SetConfig>
      break;
 8006784:	e02c      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	6859      	ldr	r1, [r3, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	461a      	mov	r2, r3
 8006794:	f000 fad9 	bl	8006d4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2160      	movs	r1, #96	@ 0x60
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fb03 	bl	8006daa <TIM_ITRx_SetConfig>
      break;
 80067a4:	e01c      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6859      	ldr	r1, [r3, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	461a      	mov	r2, r3
 80067b4:	f000 fa9a 	bl	8006cec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2140      	movs	r1, #64	@ 0x40
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 faf3 	bl	8006daa <TIM_ITRx_SetConfig>
      break;
 80067c4:	e00c      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4619      	mov	r1, r3
 80067d0:	4610      	mov	r0, r2
 80067d2:	f000 faea 	bl	8006daa <TIM_ITRx_SetConfig>
      break;
 80067d6:	e003      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	73fb      	strb	r3, [r7, #15]
      break;
 80067dc:	e000      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800683e:	bf00      	nop
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
	...

0800684c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a40      	ldr	r2, [pc, #256]	@ (8006960 <TIM_Base_SetConfig+0x114>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d013      	beq.n	800688c <TIM_Base_SetConfig+0x40>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800686a:	d00f      	beq.n	800688c <TIM_Base_SetConfig+0x40>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a3d      	ldr	r2, [pc, #244]	@ (8006964 <TIM_Base_SetConfig+0x118>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00b      	beq.n	800688c <TIM_Base_SetConfig+0x40>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a3c      	ldr	r2, [pc, #240]	@ (8006968 <TIM_Base_SetConfig+0x11c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d007      	beq.n	800688c <TIM_Base_SetConfig+0x40>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a3b      	ldr	r2, [pc, #236]	@ (800696c <TIM_Base_SetConfig+0x120>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d003      	beq.n	800688c <TIM_Base_SetConfig+0x40>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a3a      	ldr	r2, [pc, #232]	@ (8006970 <TIM_Base_SetConfig+0x124>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d108      	bne.n	800689e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a2f      	ldr	r2, [pc, #188]	@ (8006960 <TIM_Base_SetConfig+0x114>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d02b      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ac:	d027      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a2c      	ldr	r2, [pc, #176]	@ (8006964 <TIM_Base_SetConfig+0x118>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d023      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006968 <TIM_Base_SetConfig+0x11c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d01f      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a2a      	ldr	r2, [pc, #168]	@ (800696c <TIM_Base_SetConfig+0x120>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d01b      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a29      	ldr	r2, [pc, #164]	@ (8006970 <TIM_Base_SetConfig+0x124>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d017      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a28      	ldr	r2, [pc, #160]	@ (8006974 <TIM_Base_SetConfig+0x128>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d013      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a27      	ldr	r2, [pc, #156]	@ (8006978 <TIM_Base_SetConfig+0x12c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00f      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a26      	ldr	r2, [pc, #152]	@ (800697c <TIM_Base_SetConfig+0x130>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00b      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a25      	ldr	r2, [pc, #148]	@ (8006980 <TIM_Base_SetConfig+0x134>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d007      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a24      	ldr	r2, [pc, #144]	@ (8006984 <TIM_Base_SetConfig+0x138>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d003      	beq.n	80068fe <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a23      	ldr	r2, [pc, #140]	@ (8006988 <TIM_Base_SetConfig+0x13c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d108      	bne.n	8006910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4313      	orrs	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a0a      	ldr	r2, [pc, #40]	@ (8006960 <TIM_Base_SetConfig+0x114>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d003      	beq.n	8006944 <TIM_Base_SetConfig+0xf8>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a0c      	ldr	r2, [pc, #48]	@ (8006970 <TIM_Base_SetConfig+0x124>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d103      	bne.n	800694c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	691a      	ldr	r2, [r3, #16]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	615a      	str	r2, [r3, #20]
}
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	40010000 	.word	0x40010000
 8006964:	40000400 	.word	0x40000400
 8006968:	40000800 	.word	0x40000800
 800696c:	40000c00 	.word	0x40000c00
 8006970:	40010400 	.word	0x40010400
 8006974:	40014000 	.word	0x40014000
 8006978:	40014400 	.word	0x40014400
 800697c:	40014800 	.word	0x40014800
 8006980:	40001800 	.word	0x40001800
 8006984:	40001c00 	.word	0x40001c00
 8006988:	40002000 	.word	0x40002000

0800698c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	f023 0201 	bic.w	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0303 	bic.w	r3, r3, #3
 80069c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f023 0302 	bic.w	r3, r3, #2
 80069d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a20      	ldr	r2, [pc, #128]	@ (8006a64 <TIM_OC1_SetConfig+0xd8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d003      	beq.n	80069f0 <TIM_OC1_SetConfig+0x64>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006a68 <TIM_OC1_SetConfig+0xdc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d10c      	bne.n	8006a0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f023 0308 	bic.w	r3, r3, #8
 80069f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f023 0304 	bic.w	r3, r3, #4
 8006a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a15      	ldr	r2, [pc, #84]	@ (8006a64 <TIM_OC1_SetConfig+0xd8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_OC1_SetConfig+0x8e>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a14      	ldr	r2, [pc, #80]	@ (8006a68 <TIM_OC1_SetConfig+0xdc>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d111      	bne.n	8006a3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	621a      	str	r2, [r3, #32]
}
 8006a58:	bf00      	nop
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	40010000 	.word	0x40010000
 8006a68:	40010400 	.word	0x40010400

08006a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f023 0210 	bic.w	r2, r3, #16
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	021b      	lsls	r3, r3, #8
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f023 0320 	bic.w	r3, r3, #32
 8006ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	011b      	lsls	r3, r3, #4
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a22      	ldr	r2, [pc, #136]	@ (8006b50 <TIM_OC2_SetConfig+0xe4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d003      	beq.n	8006ad4 <TIM_OC2_SetConfig+0x68>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a21      	ldr	r2, [pc, #132]	@ (8006b54 <TIM_OC2_SetConfig+0xe8>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d10d      	bne.n	8006af0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a17      	ldr	r2, [pc, #92]	@ (8006b50 <TIM_OC2_SetConfig+0xe4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d003      	beq.n	8006b00 <TIM_OC2_SetConfig+0x94>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a16      	ldr	r2, [pc, #88]	@ (8006b54 <TIM_OC2_SetConfig+0xe8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d113      	bne.n	8006b28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	621a      	str	r2, [r3, #32]
}
 8006b42:	bf00      	nop
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	40010000 	.word	0x40010000
 8006b54:	40010400 	.word	0x40010400

08006b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 0303 	bic.w	r3, r3, #3
 8006b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	021b      	lsls	r3, r3, #8
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a21      	ldr	r2, [pc, #132]	@ (8006c38 <TIM_OC3_SetConfig+0xe0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d003      	beq.n	8006bbe <TIM_OC3_SetConfig+0x66>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a20      	ldr	r2, [pc, #128]	@ (8006c3c <TIM_OC3_SetConfig+0xe4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d10d      	bne.n	8006bda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a16      	ldr	r2, [pc, #88]	@ (8006c38 <TIM_OC3_SetConfig+0xe0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d003      	beq.n	8006bea <TIM_OC3_SetConfig+0x92>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a15      	ldr	r2, [pc, #84]	@ (8006c3c <TIM_OC3_SetConfig+0xe4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d113      	bne.n	8006c12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	011b      	lsls	r3, r3, #4
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	621a      	str	r2, [r3, #32]
}
 8006c2c:	bf00      	nop
 8006c2e:	371c      	adds	r7, #28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	40010000 	.word	0x40010000
 8006c3c:	40010400 	.word	0x40010400

08006c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	021b      	lsls	r3, r3, #8
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	031b      	lsls	r3, r3, #12
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a12      	ldr	r2, [pc, #72]	@ (8006ce4 <TIM_OC4_SetConfig+0xa4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d003      	beq.n	8006ca8 <TIM_OC4_SetConfig+0x68>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a11      	ldr	r2, [pc, #68]	@ (8006ce8 <TIM_OC4_SetConfig+0xa8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d109      	bne.n	8006cbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	019b      	lsls	r3, r3, #6
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	621a      	str	r2, [r3, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	40010000 	.word	0x40010000
 8006ce8:	40010400 	.word	0x40010400

08006cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	f023 0201 	bic.w	r2, r3, #1
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f023 030a 	bic.w	r3, r3, #10
 8006d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	621a      	str	r2, [r3, #32]
}
 8006d3e:	bf00      	nop
 8006d40:	371c      	adds	r7, #28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b087      	sub	sp, #28
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	f023 0210 	bic.w	r2, r3, #16
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	031b      	lsls	r3, r3, #12
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	621a      	str	r2, [r3, #32]
}
 8006d9e:	bf00      	nop
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b085      	sub	sp, #20
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	f043 0307 	orr.w	r3, r3, #7
 8006dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	609a      	str	r2, [r3, #8]
}
 8006dd4:	bf00      	nop
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	021a      	lsls	r2, r3, #8
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	431a      	orrs	r2, r3
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	609a      	str	r2, [r3, #8]
}
 8006e14:	bf00      	nop
 8006e16:	371c      	adds	r7, #28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e34:	2302      	movs	r3, #2
 8006e36:	e05a      	b.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a21      	ldr	r2, [pc, #132]	@ (8006efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d022      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e84:	d01d      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8006f00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d018      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a1b      	ldr	r2, [pc, #108]	@ (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d013      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00e      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a18      	ldr	r2, [pc, #96]	@ (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d009      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a17      	ldr	r2, [pc, #92]	@ (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d004      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a15      	ldr	r2, [pc, #84]	@ (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d10c      	bne.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	40010000 	.word	0x40010000
 8006f00:	40000400 	.word	0x40000400
 8006f04:	40000800 	.word	0x40000800
 8006f08:	40000c00 	.word	0x40000c00
 8006f0c:	40010400 	.word	0x40010400
 8006f10:	40014000 	.word	0x40014000
 8006f14:	40001800 	.word	0x40001800

08006f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e03f      	b.n	8006fd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d106      	bne.n	8006f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fc f82a 	bl	8002fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2224      	movs	r2, #36	@ 0x24
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fddb 	bl	8007b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	695a      	ldr	r2, [r3, #20]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b08a      	sub	sp, #40	@ 0x28
 8006fde:	af02      	add	r7, sp, #8
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	603b      	str	r3, [r7, #0]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	d17c      	bne.n	80070f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <HAL_UART_Transmit+0x2c>
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e075      	b.n	80070f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007010:	2b01      	cmp	r3, #1
 8007012:	d101      	bne.n	8007018 <HAL_UART_Transmit+0x3e>
 8007014:	2302      	movs	r3, #2
 8007016:	e06e      	b.n	80070f6 <HAL_UART_Transmit+0x11c>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2221      	movs	r2, #33	@ 0x21
 800702a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800702e:	f7fc f8e3 	bl	80031f8 <HAL_GetTick>
 8007032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	88fa      	ldrh	r2, [r7, #6]
 8007038:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	88fa      	ldrh	r2, [r7, #6]
 800703e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007048:	d108      	bne.n	800705c <HAL_UART_Transmit+0x82>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d104      	bne.n	800705c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007052:	2300      	movs	r3, #0
 8007054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	61bb      	str	r3, [r7, #24]
 800705a:	e003      	b.n	8007064 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007060:	2300      	movs	r3, #0
 8007062:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800706c:	e02a      	b.n	80070c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2200      	movs	r2, #0
 8007076:	2180      	movs	r1, #128	@ 0x80
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 fb1f 	bl	80076bc <UART_WaitOnFlagUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e036      	b.n	80070f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10b      	bne.n	80070a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800709c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	3302      	adds	r3, #2
 80070a2:	61bb      	str	r3, [r7, #24]
 80070a4:	e007      	b.n	80070b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	781a      	ldrb	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	3301      	adds	r3, #1
 80070b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1cf      	bne.n	800706e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2200      	movs	r2, #0
 80070d6:	2140      	movs	r1, #64	@ 0x40
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 faef 	bl	80076bc <UART_WaitOnFlagUntilTimeout>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e006      	b.n	80070f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	e000      	b.n	80070f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80070f4:	2302      	movs	r3, #2
  }
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3720      	adds	r7, #32
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	4613      	mov	r3, r2
 800710a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b20      	cmp	r3, #32
 8007116:	d11d      	bne.n	8007154 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <HAL_UART_Receive_IT+0x26>
 800711e:	88fb      	ldrh	r3, [r7, #6]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e016      	b.n	8007156 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800712e:	2b01      	cmp	r3, #1
 8007130:	d101      	bne.n	8007136 <HAL_UART_Receive_IT+0x38>
 8007132:	2302      	movs	r3, #2
 8007134:	e00f      	b.n	8007156 <HAL_UART_Receive_IT+0x58>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007144:	88fb      	ldrh	r3, [r7, #6]
 8007146:	461a      	mov	r2, r3
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fb24 	bl	8007798 <UART_Start_Receive_IT>
 8007150:	4603      	mov	r3, r0
 8007152:	e000      	b.n	8007156 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007154:	2302      	movs	r3, #2
  }
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b0ba      	sub	sp, #232	@ 0xe8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007186:	2300      	movs	r3, #0
 8007188:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800718c:	2300      	movs	r3, #0
 800718e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800719e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10f      	bne.n	80071c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071aa:	f003 0320 	and.w	r3, r3, #32
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d009      	beq.n	80071c6 <HAL_UART_IRQHandler+0x66>
 80071b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071b6:	f003 0320 	and.w	r3, r3, #32
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fc03 	bl	80079ca <UART_Receive_IT>
      return;
 80071c4:	e256      	b.n	8007674 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 80de 	beq.w	800738c <HAL_UART_IRQHandler+0x22c>
 80071d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d106      	bne.n	80071ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 80d1 	beq.w	800738c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00b      	beq.n	800720e <HAL_UART_IRQHandler+0xae>
 80071f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d005      	beq.n	800720e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007206:	f043 0201 	orr.w	r2, r3, #1
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800720e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00b      	beq.n	8007232 <HAL_UART_IRQHandler+0xd2>
 800721a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d005      	beq.n	8007232 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722a:	f043 0202 	orr.w	r2, r3, #2
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00b      	beq.n	8007256 <HAL_UART_IRQHandler+0xf6>
 800723e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d005      	beq.n	8007256 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724e:	f043 0204 	orr.w	r2, r3, #4
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800725a:	f003 0308 	and.w	r3, r3, #8
 800725e:	2b00      	cmp	r3, #0
 8007260:	d011      	beq.n	8007286 <HAL_UART_IRQHandler+0x126>
 8007262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b00      	cmp	r3, #0
 800726c:	d105      	bne.n	800727a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800726e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d005      	beq.n	8007286 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727e:	f043 0208 	orr.w	r2, r3, #8
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 81ed 	beq.w	800766a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007294:	f003 0320 	and.w	r3, r3, #32
 8007298:	2b00      	cmp	r3, #0
 800729a:	d008      	beq.n	80072ae <HAL_UART_IRQHandler+0x14e>
 800729c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072a0:	f003 0320 	and.w	r3, r3, #32
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fb8e 	bl	80079ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b8:	2b40      	cmp	r3, #64	@ 0x40
 80072ba:	bf0c      	ite	eq
 80072bc:	2301      	moveq	r3, #1
 80072be:	2300      	movne	r3, #0
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ca:	f003 0308 	and.w	r3, r3, #8
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d103      	bne.n	80072da <HAL_UART_IRQHandler+0x17a>
 80072d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d04f      	beq.n	800737a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fa96 	bl	800780c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ea:	2b40      	cmp	r3, #64	@ 0x40
 80072ec:	d141      	bne.n	8007372 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3314      	adds	r3, #20
 80072f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007304:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800730c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3314      	adds	r3, #20
 8007316:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800731a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800731e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007322:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007326:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1d9      	bne.n	80072ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733e:	2b00      	cmp	r3, #0
 8007340:	d013      	beq.n	800736a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007346:	4a7d      	ldr	r2, [pc, #500]	@ (800753c <HAL_UART_IRQHandler+0x3dc>)
 8007348:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734e:	4618      	mov	r0, r3
 8007350:	f7fc fe1c 	bl	8003f8c <HAL_DMA_Abort_IT>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d016      	beq.n	8007388 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007364:	4610      	mov	r0, r2
 8007366:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007368:	e00e      	b.n	8007388 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f990 	bl	8007690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007370:	e00a      	b.n	8007388 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f98c 	bl	8007690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007378:	e006      	b.n	8007388 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f988 	bl	8007690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007386:	e170      	b.n	800766a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007388:	bf00      	nop
    return;
 800738a:	e16e      	b.n	800766a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007390:	2b01      	cmp	r3, #1
 8007392:	f040 814a 	bne.w	800762a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800739a:	f003 0310 	and.w	r3, r3, #16
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 8143 	beq.w	800762a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 813c 	beq.w	800762a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073b2:	2300      	movs	r3, #0
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60bb      	str	r3, [r7, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	60bb      	str	r3, [r7, #8]
 80073c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d2:	2b40      	cmp	r3, #64	@ 0x40
 80073d4:	f040 80b4 	bne.w	8007540 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 8140 	beq.w	800766e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073f6:	429a      	cmp	r2, r3
 80073f8:	f080 8139 	bcs.w	800766e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007402:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800740e:	f000 8088 	beq.w	8007522 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	330c      	adds	r3, #12
 8007418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007428:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800742c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007430:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	330c      	adds	r3, #12
 800743a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800743e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007442:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800744a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1d9      	bne.n	8007412 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3314      	adds	r3, #20
 8007464:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007466:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007468:	e853 3f00 	ldrex	r3, [r3]
 800746c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800746e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007470:	f023 0301 	bic.w	r3, r3, #1
 8007474:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3314      	adds	r3, #20
 800747e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007482:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007486:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800748a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007494:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e1      	bne.n	800745e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3314      	adds	r3, #20
 80074a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80074aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3314      	adds	r3, #20
 80074ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80074be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80074c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80074c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80074cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e3      	bne.n	800749a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	330c      	adds	r3, #12
 80074e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074f2:	f023 0310 	bic.w	r3, r3, #16
 80074f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	330c      	adds	r3, #12
 8007500:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007504:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007506:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800750a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e3      	bne.n	80074e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751c:	4618      	mov	r0, r3
 800751e:	f7fc fcc5 	bl	8003eac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800752a:	b29b      	uxth	r3, r3
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	b29b      	uxth	r3, r3
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f8b6 	bl	80076a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007538:	e099      	b.n	800766e <HAL_UART_IRQHandler+0x50e>
 800753a:	bf00      	nop
 800753c:	080078d3 	.word	0x080078d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007548:	b29b      	uxth	r3, r3
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007554:	b29b      	uxth	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 808b 	beq.w	8007672 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800755c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 8086 	beq.w	8007672 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	330c      	adds	r3, #12
 800756c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800757c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	330c      	adds	r3, #12
 8007586:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800758a:	647a      	str	r2, [r7, #68]	@ 0x44
 800758c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007590:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e3      	bne.n	8007566 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3314      	adds	r3, #20
 80075a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	623b      	str	r3, [r7, #32]
   return(result);
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	f023 0301 	bic.w	r3, r3, #1
 80075b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3314      	adds	r3, #20
 80075be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80075c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80075c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e3      	bne.n	800759e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	330c      	adds	r3, #12
 80075ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0310 	bic.w	r3, r3, #16
 80075fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	330c      	adds	r3, #12
 8007604:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007608:	61fa      	str	r2, [r7, #28]
 800760a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	69b9      	ldr	r1, [r7, #24]
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	617b      	str	r3, [r7, #20]
   return(result);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e3      	bne.n	80075e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800761c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f83e 	bl	80076a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007628:	e023      	b.n	8007672 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800762a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800762e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007632:	2b00      	cmp	r3, #0
 8007634:	d009      	beq.n	800764a <HAL_UART_IRQHandler+0x4ea>
 8007636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800763a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800763e:	2b00      	cmp	r3, #0
 8007640:	d003      	beq.n	800764a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f959 	bl	80078fa <UART_Transmit_IT>
    return;
 8007648:	e014      	b.n	8007674 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800764a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800764e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00e      	beq.n	8007674 <HAL_UART_IRQHandler+0x514>
 8007656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800765a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765e:	2b00      	cmp	r3, #0
 8007660:	d008      	beq.n	8007674 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f999 	bl	800799a <UART_EndTransmit_IT>
    return;
 8007668:	e004      	b.n	8007674 <HAL_UART_IRQHandler+0x514>
    return;
 800766a:	bf00      	nop
 800766c:	e002      	b.n	8007674 <HAL_UART_IRQHandler+0x514>
      return;
 800766e:	bf00      	nop
 8007670:	e000      	b.n	8007674 <HAL_UART_IRQHandler+0x514>
      return;
 8007672:	bf00      	nop
  }
}
 8007674:	37e8      	adds	r7, #232	@ 0xe8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop

0800767c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b090      	sub	sp, #64	@ 0x40
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	4613      	mov	r3, r2
 80076ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076cc:	e050      	b.n	8007770 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d4:	d04c      	beq.n	8007770 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80076d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d007      	beq.n	80076ec <UART_WaitOnFlagUntilTimeout+0x30>
 80076dc:	f7fb fd8c 	bl	80031f8 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d241      	bcs.n	8007770 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	330c      	adds	r3, #12
 80076f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fe:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	330c      	adds	r3, #12
 800770a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800770c:	637a      	str	r2, [r7, #52]	@ 0x34
 800770e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007712:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007714:	e841 2300 	strex	r3, r2, [r1]
 8007718:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800771a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e5      	bne.n	80076ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3314      	adds	r3, #20
 8007726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	e853 3f00 	ldrex	r3, [r3]
 800772e:	613b      	str	r3, [r7, #16]
   return(result);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f023 0301 	bic.w	r3, r3, #1
 8007736:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3314      	adds	r3, #20
 800773e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007740:	623a      	str	r2, [r7, #32]
 8007742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	69f9      	ldr	r1, [r7, #28]
 8007746:	6a3a      	ldr	r2, [r7, #32]
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	61bb      	str	r3, [r7, #24]
   return(result);
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e5      	bne.n	8007720 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2220      	movs	r2, #32
 8007760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e00f      	b.n	8007790 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	4013      	ands	r3, r2
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	429a      	cmp	r2, r3
 800777e:	bf0c      	ite	eq
 8007780:	2301      	moveq	r3, #1
 8007782:	2300      	movne	r3, #0
 8007784:	b2db      	uxtb	r3, r3
 8007786:	461a      	mov	r2, r3
 8007788:	79fb      	ldrb	r3, [r7, #7]
 800778a:	429a      	cmp	r2, r3
 800778c:	d09f      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3740      	adds	r7, #64	@ 0x40
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	4613      	mov	r3, r2
 80077a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	88fa      	ldrh	r2, [r7, #6]
 80077b0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2222      	movs	r2, #34	@ 0x22
 80077c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68da      	ldr	r2, [r3, #12]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077dc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	695a      	ldr	r2, [r3, #20]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f042 0201 	orr.w	r2, r2, #1
 80077ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68da      	ldr	r2, [r3, #12]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 0220 	orr.w	r2, r2, #32
 80077fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800780c:	b480      	push	{r7}
 800780e:	b095      	sub	sp, #84	@ 0x54
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	330c      	adds	r3, #12
 800781a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007826:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800782a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007834:	643a      	str	r2, [r7, #64]	@ 0x40
 8007836:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800783a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e5      	bne.n	8007814 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3314      	adds	r3, #20
 800784e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	61fb      	str	r3, [r7, #28]
   return(result);
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	f023 0301 	bic.w	r3, r3, #1
 800785e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3314      	adds	r3, #20
 8007866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007868:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800786a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800786e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e5      	bne.n	8007848 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007880:	2b01      	cmp	r3, #1
 8007882:	d119      	bne.n	80078b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	330c      	adds	r3, #12
 800788a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	60bb      	str	r3, [r7, #8]
   return(result);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f023 0310 	bic.w	r3, r3, #16
 800789a:	647b      	str	r3, [r7, #68]	@ 0x44
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	330c      	adds	r3, #12
 80078a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078a4:	61ba      	str	r2, [r7, #24]
 80078a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	6979      	ldr	r1, [r7, #20]
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	613b      	str	r3, [r7, #16]
   return(result);
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e5      	bne.n	8007884 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80078c6:	bf00      	nop
 80078c8:	3754      	adds	r7, #84	@ 0x54
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f7ff fecf 	bl	8007690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078f2:	bf00      	nop
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b085      	sub	sp, #20
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b21      	cmp	r3, #33	@ 0x21
 800790c:	d13e      	bne.n	800798c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007916:	d114      	bne.n	8007942 <UART_Transmit_IT+0x48>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d110      	bne.n	8007942 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007934:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	1c9a      	adds	r2, r3, #2
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	621a      	str	r2, [r3, #32]
 8007940:	e008      	b.n	8007954 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	1c59      	adds	r1, r3, #1
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	6211      	str	r1, [r2, #32]
 800794c:	781a      	ldrb	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007958:	b29b      	uxth	r3, r3
 800795a:	3b01      	subs	r3, #1
 800795c:	b29b      	uxth	r3, r3
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	4619      	mov	r1, r3
 8007962:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10f      	bne.n	8007988 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007976:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007986:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	e000      	b.n	800798e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800798c:	2302      	movs	r3, #2
  }
}
 800798e:	4618      	mov	r0, r3
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b082      	sub	sp, #8
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff fe5e 	bl	800767c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b08c      	sub	sp, #48	@ 0x30
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b22      	cmp	r3, #34	@ 0x22
 80079dc:	f040 80ab 	bne.w	8007b36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079e8:	d117      	bne.n	8007a1a <UART_Receive_IT+0x50>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d113      	bne.n	8007a1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a12:	1c9a      	adds	r2, r3, #2
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a18:	e026      	b.n	8007a68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007a20:	2300      	movs	r3, #0
 8007a22:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a2c:	d007      	beq.n	8007a3e <UART_Receive_IT+0x74>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10a      	bne.n	8007a4c <UART_Receive_IT+0x82>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d106      	bne.n	8007a4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a48:	701a      	strb	r2, [r3, #0]
 8007a4a:	e008      	b.n	8007a5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	4619      	mov	r1, r3
 8007a76:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d15a      	bne.n	8007b32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68da      	ldr	r2, [r3, #12]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0220 	bic.w	r2, r2, #32
 8007a8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68da      	ldr	r2, [r3, #12]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	695a      	ldr	r2, [r3, #20]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0201 	bic.w	r2, r2, #1
 8007aaa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d135      	bne.n	8007b28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	330c      	adds	r3, #12
 8007ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	e853 3f00 	ldrex	r3, [r3]
 8007ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f023 0310 	bic.w	r3, r3, #16
 8007ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	330c      	adds	r3, #12
 8007ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ae2:	623a      	str	r2, [r7, #32]
 8007ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae6:	69f9      	ldr	r1, [r7, #28]
 8007ae8:	6a3a      	ldr	r2, [r7, #32]
 8007aea:	e841 2300 	strex	r3, r2, [r1]
 8007aee:	61bb      	str	r3, [r7, #24]
   return(result);
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1e5      	bne.n	8007ac2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0310 	and.w	r3, r3, #16
 8007b00:	2b10      	cmp	r3, #16
 8007b02:	d10a      	bne.n	8007b1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff fdbf 	bl	80076a4 <HAL_UARTEx_RxEventCallback>
 8007b26:	e002      	b.n	8007b2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7fb f99b 	bl	8002e64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e002      	b.n	8007b38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	e000      	b.n	8007b38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b36:	2302      	movs	r3, #2
  }
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3730      	adds	r7, #48	@ 0x30
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b44:	b0c0      	sub	sp, #256	@ 0x100
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b5c:	68d9      	ldr	r1, [r3, #12]
 8007b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	ea40 0301 	orr.w	r3, r0, r1
 8007b68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	431a      	orrs	r2, r3
 8007b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007b98:	f021 010c 	bic.w	r1, r1, #12
 8007b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bba:	6999      	ldr	r1, [r3, #24]
 8007bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	ea40 0301 	orr.w	r3, r0, r1
 8007bc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	4b8f      	ldr	r3, [pc, #572]	@ (8007e0c <UART_SetConfig+0x2cc>)
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d005      	beq.n	8007be0 <UART_SetConfig+0xa0>
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4b8d      	ldr	r3, [pc, #564]	@ (8007e10 <UART_SetConfig+0x2d0>)
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d104      	bne.n	8007bea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007be0:	f7fd fbf8 	bl	80053d4 <HAL_RCC_GetPCLK2Freq>
 8007be4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007be8:	e003      	b.n	8007bf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bea:	f7fd fbdf 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 8007bee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bfc:	f040 810c 	bne.w	8007e18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007c0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007c12:	4622      	mov	r2, r4
 8007c14:	462b      	mov	r3, r5
 8007c16:	1891      	adds	r1, r2, r2
 8007c18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007c1a:	415b      	adcs	r3, r3
 8007c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007c22:	4621      	mov	r1, r4
 8007c24:	eb12 0801 	adds.w	r8, r2, r1
 8007c28:	4629      	mov	r1, r5
 8007c2a:	eb43 0901 	adc.w	r9, r3, r1
 8007c2e:	f04f 0200 	mov.w	r2, #0
 8007c32:	f04f 0300 	mov.w	r3, #0
 8007c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c42:	4690      	mov	r8, r2
 8007c44:	4699      	mov	r9, r3
 8007c46:	4623      	mov	r3, r4
 8007c48:	eb18 0303 	adds.w	r3, r8, r3
 8007c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c50:	462b      	mov	r3, r5
 8007c52:	eb49 0303 	adc.w	r3, r9, r3
 8007c56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007c6e:	460b      	mov	r3, r1
 8007c70:	18db      	adds	r3, r3, r3
 8007c72:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c74:	4613      	mov	r3, r2
 8007c76:	eb42 0303 	adc.w	r3, r2, r3
 8007c7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007c80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007c84:	f7f8 ff1a 	bl	8000abc <__aeabi_uldivmod>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4b61      	ldr	r3, [pc, #388]	@ (8007e14 <UART_SetConfig+0x2d4>)
 8007c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c92:	095b      	lsrs	r3, r3, #5
 8007c94:	011c      	lsls	r4, r3, #4
 8007c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ca0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007ca4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007ca8:	4642      	mov	r2, r8
 8007caa:	464b      	mov	r3, r9
 8007cac:	1891      	adds	r1, r2, r2
 8007cae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007cb0:	415b      	adcs	r3, r3
 8007cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007cb8:	4641      	mov	r1, r8
 8007cba:	eb12 0a01 	adds.w	sl, r2, r1
 8007cbe:	4649      	mov	r1, r9
 8007cc0:	eb43 0b01 	adc.w	fp, r3, r1
 8007cc4:	f04f 0200 	mov.w	r2, #0
 8007cc8:	f04f 0300 	mov.w	r3, #0
 8007ccc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007cd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cd8:	4692      	mov	sl, r2
 8007cda:	469b      	mov	fp, r3
 8007cdc:	4643      	mov	r3, r8
 8007cde:	eb1a 0303 	adds.w	r3, sl, r3
 8007ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ce6:	464b      	mov	r3, r9
 8007ce8:	eb4b 0303 	adc.w	r3, fp, r3
 8007cec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cfc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007d00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d04:	460b      	mov	r3, r1
 8007d06:	18db      	adds	r3, r3, r3
 8007d08:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	eb42 0303 	adc.w	r3, r2, r3
 8007d10:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007d1a:	f7f8 fecf 	bl	8000abc <__aeabi_uldivmod>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4611      	mov	r1, r2
 8007d24:	4b3b      	ldr	r3, [pc, #236]	@ (8007e14 <UART_SetConfig+0x2d4>)
 8007d26:	fba3 2301 	umull	r2, r3, r3, r1
 8007d2a:	095b      	lsrs	r3, r3, #5
 8007d2c:	2264      	movs	r2, #100	@ 0x64
 8007d2e:	fb02 f303 	mul.w	r3, r2, r3
 8007d32:	1acb      	subs	r3, r1, r3
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007d3a:	4b36      	ldr	r3, [pc, #216]	@ (8007e14 <UART_SetConfig+0x2d4>)
 8007d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8007d40:	095b      	lsrs	r3, r3, #5
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d48:	441c      	add	r4, r3
 8007d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007d5c:	4642      	mov	r2, r8
 8007d5e:	464b      	mov	r3, r9
 8007d60:	1891      	adds	r1, r2, r2
 8007d62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d64:	415b      	adcs	r3, r3
 8007d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007d6c:	4641      	mov	r1, r8
 8007d6e:	1851      	adds	r1, r2, r1
 8007d70:	6339      	str	r1, [r7, #48]	@ 0x30
 8007d72:	4649      	mov	r1, r9
 8007d74:	414b      	adcs	r3, r1
 8007d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d78:	f04f 0200 	mov.w	r2, #0
 8007d7c:	f04f 0300 	mov.w	r3, #0
 8007d80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007d84:	4659      	mov	r1, fp
 8007d86:	00cb      	lsls	r3, r1, #3
 8007d88:	4651      	mov	r1, sl
 8007d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d8e:	4651      	mov	r1, sl
 8007d90:	00ca      	lsls	r2, r1, #3
 8007d92:	4610      	mov	r0, r2
 8007d94:	4619      	mov	r1, r3
 8007d96:	4603      	mov	r3, r0
 8007d98:	4642      	mov	r2, r8
 8007d9a:	189b      	adds	r3, r3, r2
 8007d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007da0:	464b      	mov	r3, r9
 8007da2:	460a      	mov	r2, r1
 8007da4:	eb42 0303 	adc.w	r3, r2, r3
 8007da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007db8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007dbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	18db      	adds	r3, r3, r3
 8007dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	eb42 0303 	adc.w	r3, r2, r3
 8007dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007dd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007dd6:	f7f8 fe71 	bl	8000abc <__aeabi_uldivmod>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4b0d      	ldr	r3, [pc, #52]	@ (8007e14 <UART_SetConfig+0x2d4>)
 8007de0:	fba3 1302 	umull	r1, r3, r3, r2
 8007de4:	095b      	lsrs	r3, r3, #5
 8007de6:	2164      	movs	r1, #100	@ 0x64
 8007de8:	fb01 f303 	mul.w	r3, r1, r3
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	00db      	lsls	r3, r3, #3
 8007df0:	3332      	adds	r3, #50	@ 0x32
 8007df2:	4a08      	ldr	r2, [pc, #32]	@ (8007e14 <UART_SetConfig+0x2d4>)
 8007df4:	fba2 2303 	umull	r2, r3, r2, r3
 8007df8:	095b      	lsrs	r3, r3, #5
 8007dfa:	f003 0207 	and.w	r2, r3, #7
 8007dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4422      	add	r2, r4
 8007e06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e08:	e106      	b.n	8008018 <UART_SetConfig+0x4d8>
 8007e0a:	bf00      	nop
 8007e0c:	40011000 	.word	0x40011000
 8007e10:	40011400 	.word	0x40011400
 8007e14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007e26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e2a:	4642      	mov	r2, r8
 8007e2c:	464b      	mov	r3, r9
 8007e2e:	1891      	adds	r1, r2, r2
 8007e30:	6239      	str	r1, [r7, #32]
 8007e32:	415b      	adcs	r3, r3
 8007e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e3a:	4641      	mov	r1, r8
 8007e3c:	1854      	adds	r4, r2, r1
 8007e3e:	4649      	mov	r1, r9
 8007e40:	eb43 0501 	adc.w	r5, r3, r1
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	00eb      	lsls	r3, r5, #3
 8007e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e52:	00e2      	lsls	r2, r4, #3
 8007e54:	4614      	mov	r4, r2
 8007e56:	461d      	mov	r5, r3
 8007e58:	4643      	mov	r3, r8
 8007e5a:	18e3      	adds	r3, r4, r3
 8007e5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e60:	464b      	mov	r3, r9
 8007e62:	eb45 0303 	adc.w	r3, r5, r3
 8007e66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e7a:	f04f 0200 	mov.w	r2, #0
 8007e7e:	f04f 0300 	mov.w	r3, #0
 8007e82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007e86:	4629      	mov	r1, r5
 8007e88:	008b      	lsls	r3, r1, #2
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e90:	4621      	mov	r1, r4
 8007e92:	008a      	lsls	r2, r1, #2
 8007e94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007e98:	f7f8 fe10 	bl	8000abc <__aeabi_uldivmod>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4b60      	ldr	r3, [pc, #384]	@ (8008024 <UART_SetConfig+0x4e4>)
 8007ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ea6:	095b      	lsrs	r3, r3, #5
 8007ea8:	011c      	lsls	r4, r3, #4
 8007eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007eb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007eb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ebc:	4642      	mov	r2, r8
 8007ebe:	464b      	mov	r3, r9
 8007ec0:	1891      	adds	r1, r2, r2
 8007ec2:	61b9      	str	r1, [r7, #24]
 8007ec4:	415b      	adcs	r3, r3
 8007ec6:	61fb      	str	r3, [r7, #28]
 8007ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ecc:	4641      	mov	r1, r8
 8007ece:	1851      	adds	r1, r2, r1
 8007ed0:	6139      	str	r1, [r7, #16]
 8007ed2:	4649      	mov	r1, r9
 8007ed4:	414b      	adcs	r3, r1
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	f04f 0300 	mov.w	r3, #0
 8007ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ee4:	4659      	mov	r1, fp
 8007ee6:	00cb      	lsls	r3, r1, #3
 8007ee8:	4651      	mov	r1, sl
 8007eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eee:	4651      	mov	r1, sl
 8007ef0:	00ca      	lsls	r2, r1, #3
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	4642      	mov	r2, r8
 8007efa:	189b      	adds	r3, r3, r2
 8007efc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f00:	464b      	mov	r3, r9
 8007f02:	460a      	mov	r2, r1
 8007f04:	eb42 0303 	adc.w	r3, r2, r3
 8007f08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	f04f 0300 	mov.w	r3, #0
 8007f20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007f24:	4649      	mov	r1, r9
 8007f26:	008b      	lsls	r3, r1, #2
 8007f28:	4641      	mov	r1, r8
 8007f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f2e:	4641      	mov	r1, r8
 8007f30:	008a      	lsls	r2, r1, #2
 8007f32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007f36:	f7f8 fdc1 	bl	8000abc <__aeabi_uldivmod>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4611      	mov	r1, r2
 8007f40:	4b38      	ldr	r3, [pc, #224]	@ (8008024 <UART_SetConfig+0x4e4>)
 8007f42:	fba3 2301 	umull	r2, r3, r3, r1
 8007f46:	095b      	lsrs	r3, r3, #5
 8007f48:	2264      	movs	r2, #100	@ 0x64
 8007f4a:	fb02 f303 	mul.w	r3, r2, r3
 8007f4e:	1acb      	subs	r3, r1, r3
 8007f50:	011b      	lsls	r3, r3, #4
 8007f52:	3332      	adds	r3, #50	@ 0x32
 8007f54:	4a33      	ldr	r2, [pc, #204]	@ (8008024 <UART_SetConfig+0x4e4>)
 8007f56:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5a:	095b      	lsrs	r3, r3, #5
 8007f5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f60:	441c      	add	r4, r3
 8007f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f66:	2200      	movs	r2, #0
 8007f68:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007f6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007f70:	4642      	mov	r2, r8
 8007f72:	464b      	mov	r3, r9
 8007f74:	1891      	adds	r1, r2, r2
 8007f76:	60b9      	str	r1, [r7, #8]
 8007f78:	415b      	adcs	r3, r3
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f80:	4641      	mov	r1, r8
 8007f82:	1851      	adds	r1, r2, r1
 8007f84:	6039      	str	r1, [r7, #0]
 8007f86:	4649      	mov	r1, r9
 8007f88:	414b      	adcs	r3, r1
 8007f8a:	607b      	str	r3, [r7, #4]
 8007f8c:	f04f 0200 	mov.w	r2, #0
 8007f90:	f04f 0300 	mov.w	r3, #0
 8007f94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f98:	4659      	mov	r1, fp
 8007f9a:	00cb      	lsls	r3, r1, #3
 8007f9c:	4651      	mov	r1, sl
 8007f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fa2:	4651      	mov	r1, sl
 8007fa4:	00ca      	lsls	r2, r1, #3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	4619      	mov	r1, r3
 8007faa:	4603      	mov	r3, r0
 8007fac:	4642      	mov	r2, r8
 8007fae:	189b      	adds	r3, r3, r2
 8007fb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	460a      	mov	r2, r1
 8007fb6:	eb42 0303 	adc.w	r3, r2, r3
 8007fba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8007fc8:	f04f 0200 	mov.w	r2, #0
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	008b      	lsls	r3, r1, #2
 8007fd8:	4641      	mov	r1, r8
 8007fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fde:	4641      	mov	r1, r8
 8007fe0:	008a      	lsls	r2, r1, #2
 8007fe2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007fe6:	f7f8 fd69 	bl	8000abc <__aeabi_uldivmod>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	4b0d      	ldr	r3, [pc, #52]	@ (8008024 <UART_SetConfig+0x4e4>)
 8007ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ff4:	095b      	lsrs	r3, r3, #5
 8007ff6:	2164      	movs	r1, #100	@ 0x64
 8007ff8:	fb01 f303 	mul.w	r3, r1, r3
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	011b      	lsls	r3, r3, #4
 8008000:	3332      	adds	r3, #50	@ 0x32
 8008002:	4a08      	ldr	r2, [pc, #32]	@ (8008024 <UART_SetConfig+0x4e4>)
 8008004:	fba2 2303 	umull	r2, r3, r2, r3
 8008008:	095b      	lsrs	r3, r3, #5
 800800a:	f003 020f 	and.w	r2, r3, #15
 800800e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4422      	add	r2, r4
 8008016:	609a      	str	r2, [r3, #8]
}
 8008018:	bf00      	nop
 800801a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800801e:	46bd      	mov	sp, r7
 8008020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008024:	51eb851f 	.word	0x51eb851f

08008028 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008040:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	4b20      	ldr	r3, [pc, #128]	@ (80080c8 <FSMC_NORSRAM_Init+0xa0>)
 8008046:	4013      	ands	r3, r2
 8008048:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008052:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008058:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800805e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008064:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800806a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8008070:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008076:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 800807c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 8008082:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8008088:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 800808e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8008094:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	4313      	orrs	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	2b08      	cmp	r3, #8
 80080a2:	d103      	bne.n	80080ac <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080aa:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	68f9      	ldr	r1, [r7, #12]
 80080b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	fff00080 	.word	0xfff00080

080080cc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80080ee:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80080fa:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008102:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800810a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	3b01      	subs	r3, #1
 8008112:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008114:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	3b02      	subs	r3, #2
 800811c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800811e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008124:	4313      	orrs	r3, r2
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4313      	orrs	r3, r2
 800812a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	1c5a      	adds	r2, r3, #1
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6979      	ldr	r1, [r7, #20]
 8008134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	371c      	adds	r7, #28
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
	...

08008148 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008160:	d122      	bne.n	80081a8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800816a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	4b15      	ldr	r3, [pc, #84]	@ (80081c4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008170:	4013      	ands	r3, r2
 8008172:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800817e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008186:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800818e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008194:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	4313      	orrs	r3, r2
 800819a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6979      	ldr	r1, [r7, #20]
 80081a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80081a6:	e005      	b.n	80081b4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80081b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	cff00000 	.word	0xcff00000

080081c8 <sniprintf>:
 80081c8:	b40c      	push	{r2, r3}
 80081ca:	b530      	push	{r4, r5, lr}
 80081cc:	4b17      	ldr	r3, [pc, #92]	@ (800822c <sniprintf+0x64>)
 80081ce:	1e0c      	subs	r4, r1, #0
 80081d0:	681d      	ldr	r5, [r3, #0]
 80081d2:	b09d      	sub	sp, #116	@ 0x74
 80081d4:	da08      	bge.n	80081e8 <sniprintf+0x20>
 80081d6:	238b      	movs	r3, #139	@ 0x8b
 80081d8:	602b      	str	r3, [r5, #0]
 80081da:	f04f 30ff 	mov.w	r0, #4294967295
 80081de:	b01d      	add	sp, #116	@ 0x74
 80081e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081e4:	b002      	add	sp, #8
 80081e6:	4770      	bx	lr
 80081e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80081ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80081f0:	bf14      	ite	ne
 80081f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80081f6:	4623      	moveq	r3, r4
 80081f8:	9304      	str	r3, [sp, #16]
 80081fa:	9307      	str	r3, [sp, #28]
 80081fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008200:	9002      	str	r0, [sp, #8]
 8008202:	9006      	str	r0, [sp, #24]
 8008204:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008208:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800820a:	ab21      	add	r3, sp, #132	@ 0x84
 800820c:	a902      	add	r1, sp, #8
 800820e:	4628      	mov	r0, r5
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	f000 f995 	bl	8008540 <_svfiprintf_r>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	bfbc      	itt	lt
 800821a:	238b      	movlt	r3, #139	@ 0x8b
 800821c:	602b      	strlt	r3, [r5, #0]
 800821e:	2c00      	cmp	r4, #0
 8008220:	d0dd      	beq.n	80081de <sniprintf+0x16>
 8008222:	9b02      	ldr	r3, [sp, #8]
 8008224:	2200      	movs	r2, #0
 8008226:	701a      	strb	r2, [r3, #0]
 8008228:	e7d9      	b.n	80081de <sniprintf+0x16>
 800822a:	bf00      	nop
 800822c:	20000014 	.word	0x20000014

08008230 <memset>:
 8008230:	4402      	add	r2, r0
 8008232:	4603      	mov	r3, r0
 8008234:	4293      	cmp	r3, r2
 8008236:	d100      	bne.n	800823a <memset+0xa>
 8008238:	4770      	bx	lr
 800823a:	f803 1b01 	strb.w	r1, [r3], #1
 800823e:	e7f9      	b.n	8008234 <memset+0x4>

08008240 <__errno>:
 8008240:	4b01      	ldr	r3, [pc, #4]	@ (8008248 <__errno+0x8>)
 8008242:	6818      	ldr	r0, [r3, #0]
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	20000014 	.word	0x20000014

0800824c <__libc_init_array>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	4d0d      	ldr	r5, [pc, #52]	@ (8008284 <__libc_init_array+0x38>)
 8008250:	4c0d      	ldr	r4, [pc, #52]	@ (8008288 <__libc_init_array+0x3c>)
 8008252:	1b64      	subs	r4, r4, r5
 8008254:	10a4      	asrs	r4, r4, #2
 8008256:	2600      	movs	r6, #0
 8008258:	42a6      	cmp	r6, r4
 800825a:	d109      	bne.n	8008270 <__libc_init_array+0x24>
 800825c:	4d0b      	ldr	r5, [pc, #44]	@ (800828c <__libc_init_array+0x40>)
 800825e:	4c0c      	ldr	r4, [pc, #48]	@ (8008290 <__libc_init_array+0x44>)
 8008260:	f000 fc66 	bl	8008b30 <_init>
 8008264:	1b64      	subs	r4, r4, r5
 8008266:	10a4      	asrs	r4, r4, #2
 8008268:	2600      	movs	r6, #0
 800826a:	42a6      	cmp	r6, r4
 800826c:	d105      	bne.n	800827a <__libc_init_array+0x2e>
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	f855 3b04 	ldr.w	r3, [r5], #4
 8008274:	4798      	blx	r3
 8008276:	3601      	adds	r6, #1
 8008278:	e7ee      	b.n	8008258 <__libc_init_array+0xc>
 800827a:	f855 3b04 	ldr.w	r3, [r5], #4
 800827e:	4798      	blx	r3
 8008280:	3601      	adds	r6, #1
 8008282:	e7f2      	b.n	800826a <__libc_init_array+0x1e>
 8008284:	0800bbec 	.word	0x0800bbec
 8008288:	0800bbec 	.word	0x0800bbec
 800828c:	0800bbec 	.word	0x0800bbec
 8008290:	0800bbf0 	.word	0x0800bbf0

08008294 <__retarget_lock_acquire_recursive>:
 8008294:	4770      	bx	lr

08008296 <__retarget_lock_release_recursive>:
 8008296:	4770      	bx	lr

08008298 <_free_r>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4605      	mov	r5, r0
 800829c:	2900      	cmp	r1, #0
 800829e:	d041      	beq.n	8008324 <_free_r+0x8c>
 80082a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a4:	1f0c      	subs	r4, r1, #4
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	bfb8      	it	lt
 80082aa:	18e4      	addlt	r4, r4, r3
 80082ac:	f000 f8e0 	bl	8008470 <__malloc_lock>
 80082b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008328 <_free_r+0x90>)
 80082b2:	6813      	ldr	r3, [r2, #0]
 80082b4:	b933      	cbnz	r3, 80082c4 <_free_r+0x2c>
 80082b6:	6063      	str	r3, [r4, #4]
 80082b8:	6014      	str	r4, [r2, #0]
 80082ba:	4628      	mov	r0, r5
 80082bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082c0:	f000 b8dc 	b.w	800847c <__malloc_unlock>
 80082c4:	42a3      	cmp	r3, r4
 80082c6:	d908      	bls.n	80082da <_free_r+0x42>
 80082c8:	6820      	ldr	r0, [r4, #0]
 80082ca:	1821      	adds	r1, r4, r0
 80082cc:	428b      	cmp	r3, r1
 80082ce:	bf01      	itttt	eq
 80082d0:	6819      	ldreq	r1, [r3, #0]
 80082d2:	685b      	ldreq	r3, [r3, #4]
 80082d4:	1809      	addeq	r1, r1, r0
 80082d6:	6021      	streq	r1, [r4, #0]
 80082d8:	e7ed      	b.n	80082b6 <_free_r+0x1e>
 80082da:	461a      	mov	r2, r3
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	b10b      	cbz	r3, 80082e4 <_free_r+0x4c>
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	d9fa      	bls.n	80082da <_free_r+0x42>
 80082e4:	6811      	ldr	r1, [r2, #0]
 80082e6:	1850      	adds	r0, r2, r1
 80082e8:	42a0      	cmp	r0, r4
 80082ea:	d10b      	bne.n	8008304 <_free_r+0x6c>
 80082ec:	6820      	ldr	r0, [r4, #0]
 80082ee:	4401      	add	r1, r0
 80082f0:	1850      	adds	r0, r2, r1
 80082f2:	4283      	cmp	r3, r0
 80082f4:	6011      	str	r1, [r2, #0]
 80082f6:	d1e0      	bne.n	80082ba <_free_r+0x22>
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	6053      	str	r3, [r2, #4]
 80082fe:	4408      	add	r0, r1
 8008300:	6010      	str	r0, [r2, #0]
 8008302:	e7da      	b.n	80082ba <_free_r+0x22>
 8008304:	d902      	bls.n	800830c <_free_r+0x74>
 8008306:	230c      	movs	r3, #12
 8008308:	602b      	str	r3, [r5, #0]
 800830a:	e7d6      	b.n	80082ba <_free_r+0x22>
 800830c:	6820      	ldr	r0, [r4, #0]
 800830e:	1821      	adds	r1, r4, r0
 8008310:	428b      	cmp	r3, r1
 8008312:	bf04      	itt	eq
 8008314:	6819      	ldreq	r1, [r3, #0]
 8008316:	685b      	ldreq	r3, [r3, #4]
 8008318:	6063      	str	r3, [r4, #4]
 800831a:	bf04      	itt	eq
 800831c:	1809      	addeq	r1, r1, r0
 800831e:	6021      	streq	r1, [r4, #0]
 8008320:	6054      	str	r4, [r2, #4]
 8008322:	e7ca      	b.n	80082ba <_free_r+0x22>
 8008324:	bd38      	pop	{r3, r4, r5, pc}
 8008326:	bf00      	nop
 8008328:	20000520 	.word	0x20000520

0800832c <sbrk_aligned>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	4e0f      	ldr	r6, [pc, #60]	@ (800836c <sbrk_aligned+0x40>)
 8008330:	460c      	mov	r4, r1
 8008332:	6831      	ldr	r1, [r6, #0]
 8008334:	4605      	mov	r5, r0
 8008336:	b911      	cbnz	r1, 800833e <sbrk_aligned+0x12>
 8008338:	f000 fba6 	bl	8008a88 <_sbrk_r>
 800833c:	6030      	str	r0, [r6, #0]
 800833e:	4621      	mov	r1, r4
 8008340:	4628      	mov	r0, r5
 8008342:	f000 fba1 	bl	8008a88 <_sbrk_r>
 8008346:	1c43      	adds	r3, r0, #1
 8008348:	d103      	bne.n	8008352 <sbrk_aligned+0x26>
 800834a:	f04f 34ff 	mov.w	r4, #4294967295
 800834e:	4620      	mov	r0, r4
 8008350:	bd70      	pop	{r4, r5, r6, pc}
 8008352:	1cc4      	adds	r4, r0, #3
 8008354:	f024 0403 	bic.w	r4, r4, #3
 8008358:	42a0      	cmp	r0, r4
 800835a:	d0f8      	beq.n	800834e <sbrk_aligned+0x22>
 800835c:	1a21      	subs	r1, r4, r0
 800835e:	4628      	mov	r0, r5
 8008360:	f000 fb92 	bl	8008a88 <_sbrk_r>
 8008364:	3001      	adds	r0, #1
 8008366:	d1f2      	bne.n	800834e <sbrk_aligned+0x22>
 8008368:	e7ef      	b.n	800834a <sbrk_aligned+0x1e>
 800836a:	bf00      	nop
 800836c:	2000051c 	.word	0x2000051c

08008370 <_malloc_r>:
 8008370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008374:	1ccd      	adds	r5, r1, #3
 8008376:	f025 0503 	bic.w	r5, r5, #3
 800837a:	3508      	adds	r5, #8
 800837c:	2d0c      	cmp	r5, #12
 800837e:	bf38      	it	cc
 8008380:	250c      	movcc	r5, #12
 8008382:	2d00      	cmp	r5, #0
 8008384:	4606      	mov	r6, r0
 8008386:	db01      	blt.n	800838c <_malloc_r+0x1c>
 8008388:	42a9      	cmp	r1, r5
 800838a:	d904      	bls.n	8008396 <_malloc_r+0x26>
 800838c:	230c      	movs	r3, #12
 800838e:	6033      	str	r3, [r6, #0]
 8008390:	2000      	movs	r0, #0
 8008392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008396:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800846c <_malloc_r+0xfc>
 800839a:	f000 f869 	bl	8008470 <__malloc_lock>
 800839e:	f8d8 3000 	ldr.w	r3, [r8]
 80083a2:	461c      	mov	r4, r3
 80083a4:	bb44      	cbnz	r4, 80083f8 <_malloc_r+0x88>
 80083a6:	4629      	mov	r1, r5
 80083a8:	4630      	mov	r0, r6
 80083aa:	f7ff ffbf 	bl	800832c <sbrk_aligned>
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	4604      	mov	r4, r0
 80083b2:	d158      	bne.n	8008466 <_malloc_r+0xf6>
 80083b4:	f8d8 4000 	ldr.w	r4, [r8]
 80083b8:	4627      	mov	r7, r4
 80083ba:	2f00      	cmp	r7, #0
 80083bc:	d143      	bne.n	8008446 <_malloc_r+0xd6>
 80083be:	2c00      	cmp	r4, #0
 80083c0:	d04b      	beq.n	800845a <_malloc_r+0xea>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	4639      	mov	r1, r7
 80083c6:	4630      	mov	r0, r6
 80083c8:	eb04 0903 	add.w	r9, r4, r3
 80083cc:	f000 fb5c 	bl	8008a88 <_sbrk_r>
 80083d0:	4581      	cmp	r9, r0
 80083d2:	d142      	bne.n	800845a <_malloc_r+0xea>
 80083d4:	6821      	ldr	r1, [r4, #0]
 80083d6:	1a6d      	subs	r5, r5, r1
 80083d8:	4629      	mov	r1, r5
 80083da:	4630      	mov	r0, r6
 80083dc:	f7ff ffa6 	bl	800832c <sbrk_aligned>
 80083e0:	3001      	adds	r0, #1
 80083e2:	d03a      	beq.n	800845a <_malloc_r+0xea>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	442b      	add	r3, r5
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	f8d8 3000 	ldr.w	r3, [r8]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	bb62      	cbnz	r2, 800844c <_malloc_r+0xdc>
 80083f2:	f8c8 7000 	str.w	r7, [r8]
 80083f6:	e00f      	b.n	8008418 <_malloc_r+0xa8>
 80083f8:	6822      	ldr	r2, [r4, #0]
 80083fa:	1b52      	subs	r2, r2, r5
 80083fc:	d420      	bmi.n	8008440 <_malloc_r+0xd0>
 80083fe:	2a0b      	cmp	r2, #11
 8008400:	d917      	bls.n	8008432 <_malloc_r+0xc2>
 8008402:	1961      	adds	r1, r4, r5
 8008404:	42a3      	cmp	r3, r4
 8008406:	6025      	str	r5, [r4, #0]
 8008408:	bf18      	it	ne
 800840a:	6059      	strne	r1, [r3, #4]
 800840c:	6863      	ldr	r3, [r4, #4]
 800840e:	bf08      	it	eq
 8008410:	f8c8 1000 	streq.w	r1, [r8]
 8008414:	5162      	str	r2, [r4, r5]
 8008416:	604b      	str	r3, [r1, #4]
 8008418:	4630      	mov	r0, r6
 800841a:	f000 f82f 	bl	800847c <__malloc_unlock>
 800841e:	f104 000b 	add.w	r0, r4, #11
 8008422:	1d23      	adds	r3, r4, #4
 8008424:	f020 0007 	bic.w	r0, r0, #7
 8008428:	1ac2      	subs	r2, r0, r3
 800842a:	bf1c      	itt	ne
 800842c:	1a1b      	subne	r3, r3, r0
 800842e:	50a3      	strne	r3, [r4, r2]
 8008430:	e7af      	b.n	8008392 <_malloc_r+0x22>
 8008432:	6862      	ldr	r2, [r4, #4]
 8008434:	42a3      	cmp	r3, r4
 8008436:	bf0c      	ite	eq
 8008438:	f8c8 2000 	streq.w	r2, [r8]
 800843c:	605a      	strne	r2, [r3, #4]
 800843e:	e7eb      	b.n	8008418 <_malloc_r+0xa8>
 8008440:	4623      	mov	r3, r4
 8008442:	6864      	ldr	r4, [r4, #4]
 8008444:	e7ae      	b.n	80083a4 <_malloc_r+0x34>
 8008446:	463c      	mov	r4, r7
 8008448:	687f      	ldr	r7, [r7, #4]
 800844a:	e7b6      	b.n	80083ba <_malloc_r+0x4a>
 800844c:	461a      	mov	r2, r3
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	42a3      	cmp	r3, r4
 8008452:	d1fb      	bne.n	800844c <_malloc_r+0xdc>
 8008454:	2300      	movs	r3, #0
 8008456:	6053      	str	r3, [r2, #4]
 8008458:	e7de      	b.n	8008418 <_malloc_r+0xa8>
 800845a:	230c      	movs	r3, #12
 800845c:	6033      	str	r3, [r6, #0]
 800845e:	4630      	mov	r0, r6
 8008460:	f000 f80c 	bl	800847c <__malloc_unlock>
 8008464:	e794      	b.n	8008390 <_malloc_r+0x20>
 8008466:	6005      	str	r5, [r0, #0]
 8008468:	e7d6      	b.n	8008418 <_malloc_r+0xa8>
 800846a:	bf00      	nop
 800846c:	20000520 	.word	0x20000520

08008470 <__malloc_lock>:
 8008470:	4801      	ldr	r0, [pc, #4]	@ (8008478 <__malloc_lock+0x8>)
 8008472:	f7ff bf0f 	b.w	8008294 <__retarget_lock_acquire_recursive>
 8008476:	bf00      	nop
 8008478:	20000518 	.word	0x20000518

0800847c <__malloc_unlock>:
 800847c:	4801      	ldr	r0, [pc, #4]	@ (8008484 <__malloc_unlock+0x8>)
 800847e:	f7ff bf0a 	b.w	8008296 <__retarget_lock_release_recursive>
 8008482:	bf00      	nop
 8008484:	20000518 	.word	0x20000518

08008488 <__ssputs_r>:
 8008488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800848c:	688e      	ldr	r6, [r1, #8]
 800848e:	461f      	mov	r7, r3
 8008490:	42be      	cmp	r6, r7
 8008492:	680b      	ldr	r3, [r1, #0]
 8008494:	4682      	mov	sl, r0
 8008496:	460c      	mov	r4, r1
 8008498:	4690      	mov	r8, r2
 800849a:	d82d      	bhi.n	80084f8 <__ssputs_r+0x70>
 800849c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084a4:	d026      	beq.n	80084f4 <__ssputs_r+0x6c>
 80084a6:	6965      	ldr	r5, [r4, #20]
 80084a8:	6909      	ldr	r1, [r1, #16]
 80084aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084ae:	eba3 0901 	sub.w	r9, r3, r1
 80084b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084b6:	1c7b      	adds	r3, r7, #1
 80084b8:	444b      	add	r3, r9
 80084ba:	106d      	asrs	r5, r5, #1
 80084bc:	429d      	cmp	r5, r3
 80084be:	bf38      	it	cc
 80084c0:	461d      	movcc	r5, r3
 80084c2:	0553      	lsls	r3, r2, #21
 80084c4:	d527      	bpl.n	8008516 <__ssputs_r+0x8e>
 80084c6:	4629      	mov	r1, r5
 80084c8:	f7ff ff52 	bl	8008370 <_malloc_r>
 80084cc:	4606      	mov	r6, r0
 80084ce:	b360      	cbz	r0, 800852a <__ssputs_r+0xa2>
 80084d0:	6921      	ldr	r1, [r4, #16]
 80084d2:	464a      	mov	r2, r9
 80084d4:	f000 fae8 	bl	8008aa8 <memcpy>
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084e2:	81a3      	strh	r3, [r4, #12]
 80084e4:	6126      	str	r6, [r4, #16]
 80084e6:	6165      	str	r5, [r4, #20]
 80084e8:	444e      	add	r6, r9
 80084ea:	eba5 0509 	sub.w	r5, r5, r9
 80084ee:	6026      	str	r6, [r4, #0]
 80084f0:	60a5      	str	r5, [r4, #8]
 80084f2:	463e      	mov	r6, r7
 80084f4:	42be      	cmp	r6, r7
 80084f6:	d900      	bls.n	80084fa <__ssputs_r+0x72>
 80084f8:	463e      	mov	r6, r7
 80084fa:	6820      	ldr	r0, [r4, #0]
 80084fc:	4632      	mov	r2, r6
 80084fe:	4641      	mov	r1, r8
 8008500:	f000 faa8 	bl	8008a54 <memmove>
 8008504:	68a3      	ldr	r3, [r4, #8]
 8008506:	1b9b      	subs	r3, r3, r6
 8008508:	60a3      	str	r3, [r4, #8]
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	4433      	add	r3, r6
 800850e:	6023      	str	r3, [r4, #0]
 8008510:	2000      	movs	r0, #0
 8008512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008516:	462a      	mov	r2, r5
 8008518:	f000 fad4 	bl	8008ac4 <_realloc_r>
 800851c:	4606      	mov	r6, r0
 800851e:	2800      	cmp	r0, #0
 8008520:	d1e0      	bne.n	80084e4 <__ssputs_r+0x5c>
 8008522:	6921      	ldr	r1, [r4, #16]
 8008524:	4650      	mov	r0, sl
 8008526:	f7ff feb7 	bl	8008298 <_free_r>
 800852a:	230c      	movs	r3, #12
 800852c:	f8ca 3000 	str.w	r3, [sl]
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008536:	81a3      	strh	r3, [r4, #12]
 8008538:	f04f 30ff 	mov.w	r0, #4294967295
 800853c:	e7e9      	b.n	8008512 <__ssputs_r+0x8a>
	...

08008540 <_svfiprintf_r>:
 8008540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	4698      	mov	r8, r3
 8008546:	898b      	ldrh	r3, [r1, #12]
 8008548:	061b      	lsls	r3, r3, #24
 800854a:	b09d      	sub	sp, #116	@ 0x74
 800854c:	4607      	mov	r7, r0
 800854e:	460d      	mov	r5, r1
 8008550:	4614      	mov	r4, r2
 8008552:	d510      	bpl.n	8008576 <_svfiprintf_r+0x36>
 8008554:	690b      	ldr	r3, [r1, #16]
 8008556:	b973      	cbnz	r3, 8008576 <_svfiprintf_r+0x36>
 8008558:	2140      	movs	r1, #64	@ 0x40
 800855a:	f7ff ff09 	bl	8008370 <_malloc_r>
 800855e:	6028      	str	r0, [r5, #0]
 8008560:	6128      	str	r0, [r5, #16]
 8008562:	b930      	cbnz	r0, 8008572 <_svfiprintf_r+0x32>
 8008564:	230c      	movs	r3, #12
 8008566:	603b      	str	r3, [r7, #0]
 8008568:	f04f 30ff 	mov.w	r0, #4294967295
 800856c:	b01d      	add	sp, #116	@ 0x74
 800856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008572:	2340      	movs	r3, #64	@ 0x40
 8008574:	616b      	str	r3, [r5, #20]
 8008576:	2300      	movs	r3, #0
 8008578:	9309      	str	r3, [sp, #36]	@ 0x24
 800857a:	2320      	movs	r3, #32
 800857c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008580:	f8cd 800c 	str.w	r8, [sp, #12]
 8008584:	2330      	movs	r3, #48	@ 0x30
 8008586:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008724 <_svfiprintf_r+0x1e4>
 800858a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800858e:	f04f 0901 	mov.w	r9, #1
 8008592:	4623      	mov	r3, r4
 8008594:	469a      	mov	sl, r3
 8008596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800859a:	b10a      	cbz	r2, 80085a0 <_svfiprintf_r+0x60>
 800859c:	2a25      	cmp	r2, #37	@ 0x25
 800859e:	d1f9      	bne.n	8008594 <_svfiprintf_r+0x54>
 80085a0:	ebba 0b04 	subs.w	fp, sl, r4
 80085a4:	d00b      	beq.n	80085be <_svfiprintf_r+0x7e>
 80085a6:	465b      	mov	r3, fp
 80085a8:	4622      	mov	r2, r4
 80085aa:	4629      	mov	r1, r5
 80085ac:	4638      	mov	r0, r7
 80085ae:	f7ff ff6b 	bl	8008488 <__ssputs_r>
 80085b2:	3001      	adds	r0, #1
 80085b4:	f000 80a7 	beq.w	8008706 <_svfiprintf_r+0x1c6>
 80085b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085ba:	445a      	add	r2, fp
 80085bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80085be:	f89a 3000 	ldrb.w	r3, [sl]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 809f 	beq.w	8008706 <_svfiprintf_r+0x1c6>
 80085c8:	2300      	movs	r3, #0
 80085ca:	f04f 32ff 	mov.w	r2, #4294967295
 80085ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085d2:	f10a 0a01 	add.w	sl, sl, #1
 80085d6:	9304      	str	r3, [sp, #16]
 80085d8:	9307      	str	r3, [sp, #28]
 80085da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085de:	931a      	str	r3, [sp, #104]	@ 0x68
 80085e0:	4654      	mov	r4, sl
 80085e2:	2205      	movs	r2, #5
 80085e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e8:	484e      	ldr	r0, [pc, #312]	@ (8008724 <_svfiprintf_r+0x1e4>)
 80085ea:	f7f7 fdf9 	bl	80001e0 <memchr>
 80085ee:	9a04      	ldr	r2, [sp, #16]
 80085f0:	b9d8      	cbnz	r0, 800862a <_svfiprintf_r+0xea>
 80085f2:	06d0      	lsls	r0, r2, #27
 80085f4:	bf44      	itt	mi
 80085f6:	2320      	movmi	r3, #32
 80085f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085fc:	0711      	lsls	r1, r2, #28
 80085fe:	bf44      	itt	mi
 8008600:	232b      	movmi	r3, #43	@ 0x2b
 8008602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008606:	f89a 3000 	ldrb.w	r3, [sl]
 800860a:	2b2a      	cmp	r3, #42	@ 0x2a
 800860c:	d015      	beq.n	800863a <_svfiprintf_r+0xfa>
 800860e:	9a07      	ldr	r2, [sp, #28]
 8008610:	4654      	mov	r4, sl
 8008612:	2000      	movs	r0, #0
 8008614:	f04f 0c0a 	mov.w	ip, #10
 8008618:	4621      	mov	r1, r4
 800861a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800861e:	3b30      	subs	r3, #48	@ 0x30
 8008620:	2b09      	cmp	r3, #9
 8008622:	d94b      	bls.n	80086bc <_svfiprintf_r+0x17c>
 8008624:	b1b0      	cbz	r0, 8008654 <_svfiprintf_r+0x114>
 8008626:	9207      	str	r2, [sp, #28]
 8008628:	e014      	b.n	8008654 <_svfiprintf_r+0x114>
 800862a:	eba0 0308 	sub.w	r3, r0, r8
 800862e:	fa09 f303 	lsl.w	r3, r9, r3
 8008632:	4313      	orrs	r3, r2
 8008634:	9304      	str	r3, [sp, #16]
 8008636:	46a2      	mov	sl, r4
 8008638:	e7d2      	b.n	80085e0 <_svfiprintf_r+0xa0>
 800863a:	9b03      	ldr	r3, [sp, #12]
 800863c:	1d19      	adds	r1, r3, #4
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	9103      	str	r1, [sp, #12]
 8008642:	2b00      	cmp	r3, #0
 8008644:	bfbb      	ittet	lt
 8008646:	425b      	neglt	r3, r3
 8008648:	f042 0202 	orrlt.w	r2, r2, #2
 800864c:	9307      	strge	r3, [sp, #28]
 800864e:	9307      	strlt	r3, [sp, #28]
 8008650:	bfb8      	it	lt
 8008652:	9204      	strlt	r2, [sp, #16]
 8008654:	7823      	ldrb	r3, [r4, #0]
 8008656:	2b2e      	cmp	r3, #46	@ 0x2e
 8008658:	d10a      	bne.n	8008670 <_svfiprintf_r+0x130>
 800865a:	7863      	ldrb	r3, [r4, #1]
 800865c:	2b2a      	cmp	r3, #42	@ 0x2a
 800865e:	d132      	bne.n	80086c6 <_svfiprintf_r+0x186>
 8008660:	9b03      	ldr	r3, [sp, #12]
 8008662:	1d1a      	adds	r2, r3, #4
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	9203      	str	r2, [sp, #12]
 8008668:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800866c:	3402      	adds	r4, #2
 800866e:	9305      	str	r3, [sp, #20]
 8008670:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008734 <_svfiprintf_r+0x1f4>
 8008674:	7821      	ldrb	r1, [r4, #0]
 8008676:	2203      	movs	r2, #3
 8008678:	4650      	mov	r0, sl
 800867a:	f7f7 fdb1 	bl	80001e0 <memchr>
 800867e:	b138      	cbz	r0, 8008690 <_svfiprintf_r+0x150>
 8008680:	9b04      	ldr	r3, [sp, #16]
 8008682:	eba0 000a 	sub.w	r0, r0, sl
 8008686:	2240      	movs	r2, #64	@ 0x40
 8008688:	4082      	lsls	r2, r0
 800868a:	4313      	orrs	r3, r2
 800868c:	3401      	adds	r4, #1
 800868e:	9304      	str	r3, [sp, #16]
 8008690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008694:	4824      	ldr	r0, [pc, #144]	@ (8008728 <_svfiprintf_r+0x1e8>)
 8008696:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800869a:	2206      	movs	r2, #6
 800869c:	f7f7 fda0 	bl	80001e0 <memchr>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d036      	beq.n	8008712 <_svfiprintf_r+0x1d2>
 80086a4:	4b21      	ldr	r3, [pc, #132]	@ (800872c <_svfiprintf_r+0x1ec>)
 80086a6:	bb1b      	cbnz	r3, 80086f0 <_svfiprintf_r+0x1b0>
 80086a8:	9b03      	ldr	r3, [sp, #12]
 80086aa:	3307      	adds	r3, #7
 80086ac:	f023 0307 	bic.w	r3, r3, #7
 80086b0:	3308      	adds	r3, #8
 80086b2:	9303      	str	r3, [sp, #12]
 80086b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086b6:	4433      	add	r3, r6
 80086b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ba:	e76a      	b.n	8008592 <_svfiprintf_r+0x52>
 80086bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80086c0:	460c      	mov	r4, r1
 80086c2:	2001      	movs	r0, #1
 80086c4:	e7a8      	b.n	8008618 <_svfiprintf_r+0xd8>
 80086c6:	2300      	movs	r3, #0
 80086c8:	3401      	adds	r4, #1
 80086ca:	9305      	str	r3, [sp, #20]
 80086cc:	4619      	mov	r1, r3
 80086ce:	f04f 0c0a 	mov.w	ip, #10
 80086d2:	4620      	mov	r0, r4
 80086d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086d8:	3a30      	subs	r2, #48	@ 0x30
 80086da:	2a09      	cmp	r2, #9
 80086dc:	d903      	bls.n	80086e6 <_svfiprintf_r+0x1a6>
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d0c6      	beq.n	8008670 <_svfiprintf_r+0x130>
 80086e2:	9105      	str	r1, [sp, #20]
 80086e4:	e7c4      	b.n	8008670 <_svfiprintf_r+0x130>
 80086e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80086ea:	4604      	mov	r4, r0
 80086ec:	2301      	movs	r3, #1
 80086ee:	e7f0      	b.n	80086d2 <_svfiprintf_r+0x192>
 80086f0:	ab03      	add	r3, sp, #12
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	462a      	mov	r2, r5
 80086f6:	4b0e      	ldr	r3, [pc, #56]	@ (8008730 <_svfiprintf_r+0x1f0>)
 80086f8:	a904      	add	r1, sp, #16
 80086fa:	4638      	mov	r0, r7
 80086fc:	f3af 8000 	nop.w
 8008700:	1c42      	adds	r2, r0, #1
 8008702:	4606      	mov	r6, r0
 8008704:	d1d6      	bne.n	80086b4 <_svfiprintf_r+0x174>
 8008706:	89ab      	ldrh	r3, [r5, #12]
 8008708:	065b      	lsls	r3, r3, #25
 800870a:	f53f af2d 	bmi.w	8008568 <_svfiprintf_r+0x28>
 800870e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008710:	e72c      	b.n	800856c <_svfiprintf_r+0x2c>
 8008712:	ab03      	add	r3, sp, #12
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	462a      	mov	r2, r5
 8008718:	4b05      	ldr	r3, [pc, #20]	@ (8008730 <_svfiprintf_r+0x1f0>)
 800871a:	a904      	add	r1, sp, #16
 800871c:	4638      	mov	r0, r7
 800871e:	f000 f879 	bl	8008814 <_printf_i>
 8008722:	e7ed      	b.n	8008700 <_svfiprintf_r+0x1c0>
 8008724:	0800bbb0 	.word	0x0800bbb0
 8008728:	0800bbba 	.word	0x0800bbba
 800872c:	00000000 	.word	0x00000000
 8008730:	08008489 	.word	0x08008489
 8008734:	0800bbb6 	.word	0x0800bbb6

08008738 <_printf_common>:
 8008738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800873c:	4616      	mov	r6, r2
 800873e:	4698      	mov	r8, r3
 8008740:	688a      	ldr	r2, [r1, #8]
 8008742:	690b      	ldr	r3, [r1, #16]
 8008744:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008748:	4293      	cmp	r3, r2
 800874a:	bfb8      	it	lt
 800874c:	4613      	movlt	r3, r2
 800874e:	6033      	str	r3, [r6, #0]
 8008750:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008754:	4607      	mov	r7, r0
 8008756:	460c      	mov	r4, r1
 8008758:	b10a      	cbz	r2, 800875e <_printf_common+0x26>
 800875a:	3301      	adds	r3, #1
 800875c:	6033      	str	r3, [r6, #0]
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	0699      	lsls	r1, r3, #26
 8008762:	bf42      	ittt	mi
 8008764:	6833      	ldrmi	r3, [r6, #0]
 8008766:	3302      	addmi	r3, #2
 8008768:	6033      	strmi	r3, [r6, #0]
 800876a:	6825      	ldr	r5, [r4, #0]
 800876c:	f015 0506 	ands.w	r5, r5, #6
 8008770:	d106      	bne.n	8008780 <_printf_common+0x48>
 8008772:	f104 0a19 	add.w	sl, r4, #25
 8008776:	68e3      	ldr	r3, [r4, #12]
 8008778:	6832      	ldr	r2, [r6, #0]
 800877a:	1a9b      	subs	r3, r3, r2
 800877c:	42ab      	cmp	r3, r5
 800877e:	dc26      	bgt.n	80087ce <_printf_common+0x96>
 8008780:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008784:	6822      	ldr	r2, [r4, #0]
 8008786:	3b00      	subs	r3, #0
 8008788:	bf18      	it	ne
 800878a:	2301      	movne	r3, #1
 800878c:	0692      	lsls	r2, r2, #26
 800878e:	d42b      	bmi.n	80087e8 <_printf_common+0xb0>
 8008790:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008794:	4641      	mov	r1, r8
 8008796:	4638      	mov	r0, r7
 8008798:	47c8      	blx	r9
 800879a:	3001      	adds	r0, #1
 800879c:	d01e      	beq.n	80087dc <_printf_common+0xa4>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	6922      	ldr	r2, [r4, #16]
 80087a2:	f003 0306 	and.w	r3, r3, #6
 80087a6:	2b04      	cmp	r3, #4
 80087a8:	bf02      	ittt	eq
 80087aa:	68e5      	ldreq	r5, [r4, #12]
 80087ac:	6833      	ldreq	r3, [r6, #0]
 80087ae:	1aed      	subeq	r5, r5, r3
 80087b0:	68a3      	ldr	r3, [r4, #8]
 80087b2:	bf0c      	ite	eq
 80087b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087b8:	2500      	movne	r5, #0
 80087ba:	4293      	cmp	r3, r2
 80087bc:	bfc4      	itt	gt
 80087be:	1a9b      	subgt	r3, r3, r2
 80087c0:	18ed      	addgt	r5, r5, r3
 80087c2:	2600      	movs	r6, #0
 80087c4:	341a      	adds	r4, #26
 80087c6:	42b5      	cmp	r5, r6
 80087c8:	d11a      	bne.n	8008800 <_printf_common+0xc8>
 80087ca:	2000      	movs	r0, #0
 80087cc:	e008      	b.n	80087e0 <_printf_common+0xa8>
 80087ce:	2301      	movs	r3, #1
 80087d0:	4652      	mov	r2, sl
 80087d2:	4641      	mov	r1, r8
 80087d4:	4638      	mov	r0, r7
 80087d6:	47c8      	blx	r9
 80087d8:	3001      	adds	r0, #1
 80087da:	d103      	bne.n	80087e4 <_printf_common+0xac>
 80087dc:	f04f 30ff 	mov.w	r0, #4294967295
 80087e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e4:	3501      	adds	r5, #1
 80087e6:	e7c6      	b.n	8008776 <_printf_common+0x3e>
 80087e8:	18e1      	adds	r1, r4, r3
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	2030      	movs	r0, #48	@ 0x30
 80087ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087f2:	4422      	add	r2, r4
 80087f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087fc:	3302      	adds	r3, #2
 80087fe:	e7c7      	b.n	8008790 <_printf_common+0x58>
 8008800:	2301      	movs	r3, #1
 8008802:	4622      	mov	r2, r4
 8008804:	4641      	mov	r1, r8
 8008806:	4638      	mov	r0, r7
 8008808:	47c8      	blx	r9
 800880a:	3001      	adds	r0, #1
 800880c:	d0e6      	beq.n	80087dc <_printf_common+0xa4>
 800880e:	3601      	adds	r6, #1
 8008810:	e7d9      	b.n	80087c6 <_printf_common+0x8e>
	...

08008814 <_printf_i>:
 8008814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008818:	7e0f      	ldrb	r7, [r1, #24]
 800881a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800881c:	2f78      	cmp	r7, #120	@ 0x78
 800881e:	4691      	mov	r9, r2
 8008820:	4680      	mov	r8, r0
 8008822:	460c      	mov	r4, r1
 8008824:	469a      	mov	sl, r3
 8008826:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800882a:	d807      	bhi.n	800883c <_printf_i+0x28>
 800882c:	2f62      	cmp	r7, #98	@ 0x62
 800882e:	d80a      	bhi.n	8008846 <_printf_i+0x32>
 8008830:	2f00      	cmp	r7, #0
 8008832:	f000 80d2 	beq.w	80089da <_printf_i+0x1c6>
 8008836:	2f58      	cmp	r7, #88	@ 0x58
 8008838:	f000 80b9 	beq.w	80089ae <_printf_i+0x19a>
 800883c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008840:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008844:	e03a      	b.n	80088bc <_printf_i+0xa8>
 8008846:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800884a:	2b15      	cmp	r3, #21
 800884c:	d8f6      	bhi.n	800883c <_printf_i+0x28>
 800884e:	a101      	add	r1, pc, #4	@ (adr r1, 8008854 <_printf_i+0x40>)
 8008850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008854:	080088ad 	.word	0x080088ad
 8008858:	080088c1 	.word	0x080088c1
 800885c:	0800883d 	.word	0x0800883d
 8008860:	0800883d 	.word	0x0800883d
 8008864:	0800883d 	.word	0x0800883d
 8008868:	0800883d 	.word	0x0800883d
 800886c:	080088c1 	.word	0x080088c1
 8008870:	0800883d 	.word	0x0800883d
 8008874:	0800883d 	.word	0x0800883d
 8008878:	0800883d 	.word	0x0800883d
 800887c:	0800883d 	.word	0x0800883d
 8008880:	080089c1 	.word	0x080089c1
 8008884:	080088eb 	.word	0x080088eb
 8008888:	0800897b 	.word	0x0800897b
 800888c:	0800883d 	.word	0x0800883d
 8008890:	0800883d 	.word	0x0800883d
 8008894:	080089e3 	.word	0x080089e3
 8008898:	0800883d 	.word	0x0800883d
 800889c:	080088eb 	.word	0x080088eb
 80088a0:	0800883d 	.word	0x0800883d
 80088a4:	0800883d 	.word	0x0800883d
 80088a8:	08008983 	.word	0x08008983
 80088ac:	6833      	ldr	r3, [r6, #0]
 80088ae:	1d1a      	adds	r2, r3, #4
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6032      	str	r2, [r6, #0]
 80088b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088bc:	2301      	movs	r3, #1
 80088be:	e09d      	b.n	80089fc <_printf_i+0x1e8>
 80088c0:	6833      	ldr	r3, [r6, #0]
 80088c2:	6820      	ldr	r0, [r4, #0]
 80088c4:	1d19      	adds	r1, r3, #4
 80088c6:	6031      	str	r1, [r6, #0]
 80088c8:	0606      	lsls	r6, r0, #24
 80088ca:	d501      	bpl.n	80088d0 <_printf_i+0xbc>
 80088cc:	681d      	ldr	r5, [r3, #0]
 80088ce:	e003      	b.n	80088d8 <_printf_i+0xc4>
 80088d0:	0645      	lsls	r5, r0, #25
 80088d2:	d5fb      	bpl.n	80088cc <_printf_i+0xb8>
 80088d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088d8:	2d00      	cmp	r5, #0
 80088da:	da03      	bge.n	80088e4 <_printf_i+0xd0>
 80088dc:	232d      	movs	r3, #45	@ 0x2d
 80088de:	426d      	negs	r5, r5
 80088e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088e4:	4859      	ldr	r0, [pc, #356]	@ (8008a4c <_printf_i+0x238>)
 80088e6:	230a      	movs	r3, #10
 80088e8:	e011      	b.n	800890e <_printf_i+0xfa>
 80088ea:	6821      	ldr	r1, [r4, #0]
 80088ec:	6833      	ldr	r3, [r6, #0]
 80088ee:	0608      	lsls	r0, r1, #24
 80088f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80088f4:	d402      	bmi.n	80088fc <_printf_i+0xe8>
 80088f6:	0649      	lsls	r1, r1, #25
 80088f8:	bf48      	it	mi
 80088fa:	b2ad      	uxthmi	r5, r5
 80088fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80088fe:	4853      	ldr	r0, [pc, #332]	@ (8008a4c <_printf_i+0x238>)
 8008900:	6033      	str	r3, [r6, #0]
 8008902:	bf14      	ite	ne
 8008904:	230a      	movne	r3, #10
 8008906:	2308      	moveq	r3, #8
 8008908:	2100      	movs	r1, #0
 800890a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800890e:	6866      	ldr	r6, [r4, #4]
 8008910:	60a6      	str	r6, [r4, #8]
 8008912:	2e00      	cmp	r6, #0
 8008914:	bfa2      	ittt	ge
 8008916:	6821      	ldrge	r1, [r4, #0]
 8008918:	f021 0104 	bicge.w	r1, r1, #4
 800891c:	6021      	strge	r1, [r4, #0]
 800891e:	b90d      	cbnz	r5, 8008924 <_printf_i+0x110>
 8008920:	2e00      	cmp	r6, #0
 8008922:	d04b      	beq.n	80089bc <_printf_i+0x1a8>
 8008924:	4616      	mov	r6, r2
 8008926:	fbb5 f1f3 	udiv	r1, r5, r3
 800892a:	fb03 5711 	mls	r7, r3, r1, r5
 800892e:	5dc7      	ldrb	r7, [r0, r7]
 8008930:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008934:	462f      	mov	r7, r5
 8008936:	42bb      	cmp	r3, r7
 8008938:	460d      	mov	r5, r1
 800893a:	d9f4      	bls.n	8008926 <_printf_i+0x112>
 800893c:	2b08      	cmp	r3, #8
 800893e:	d10b      	bne.n	8008958 <_printf_i+0x144>
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	07df      	lsls	r7, r3, #31
 8008944:	d508      	bpl.n	8008958 <_printf_i+0x144>
 8008946:	6923      	ldr	r3, [r4, #16]
 8008948:	6861      	ldr	r1, [r4, #4]
 800894a:	4299      	cmp	r1, r3
 800894c:	bfde      	ittt	le
 800894e:	2330      	movle	r3, #48	@ 0x30
 8008950:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008954:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008958:	1b92      	subs	r2, r2, r6
 800895a:	6122      	str	r2, [r4, #16]
 800895c:	f8cd a000 	str.w	sl, [sp]
 8008960:	464b      	mov	r3, r9
 8008962:	aa03      	add	r2, sp, #12
 8008964:	4621      	mov	r1, r4
 8008966:	4640      	mov	r0, r8
 8008968:	f7ff fee6 	bl	8008738 <_printf_common>
 800896c:	3001      	adds	r0, #1
 800896e:	d14a      	bne.n	8008a06 <_printf_i+0x1f2>
 8008970:	f04f 30ff 	mov.w	r0, #4294967295
 8008974:	b004      	add	sp, #16
 8008976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	f043 0320 	orr.w	r3, r3, #32
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	4833      	ldr	r0, [pc, #204]	@ (8008a50 <_printf_i+0x23c>)
 8008984:	2778      	movs	r7, #120	@ 0x78
 8008986:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	6831      	ldr	r1, [r6, #0]
 800898e:	061f      	lsls	r7, r3, #24
 8008990:	f851 5b04 	ldr.w	r5, [r1], #4
 8008994:	d402      	bmi.n	800899c <_printf_i+0x188>
 8008996:	065f      	lsls	r7, r3, #25
 8008998:	bf48      	it	mi
 800899a:	b2ad      	uxthmi	r5, r5
 800899c:	6031      	str	r1, [r6, #0]
 800899e:	07d9      	lsls	r1, r3, #31
 80089a0:	bf44      	itt	mi
 80089a2:	f043 0320 	orrmi.w	r3, r3, #32
 80089a6:	6023      	strmi	r3, [r4, #0]
 80089a8:	b11d      	cbz	r5, 80089b2 <_printf_i+0x19e>
 80089aa:	2310      	movs	r3, #16
 80089ac:	e7ac      	b.n	8008908 <_printf_i+0xf4>
 80089ae:	4827      	ldr	r0, [pc, #156]	@ (8008a4c <_printf_i+0x238>)
 80089b0:	e7e9      	b.n	8008986 <_printf_i+0x172>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	f023 0320 	bic.w	r3, r3, #32
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	e7f6      	b.n	80089aa <_printf_i+0x196>
 80089bc:	4616      	mov	r6, r2
 80089be:	e7bd      	b.n	800893c <_printf_i+0x128>
 80089c0:	6833      	ldr	r3, [r6, #0]
 80089c2:	6825      	ldr	r5, [r4, #0]
 80089c4:	6961      	ldr	r1, [r4, #20]
 80089c6:	1d18      	adds	r0, r3, #4
 80089c8:	6030      	str	r0, [r6, #0]
 80089ca:	062e      	lsls	r6, r5, #24
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	d501      	bpl.n	80089d4 <_printf_i+0x1c0>
 80089d0:	6019      	str	r1, [r3, #0]
 80089d2:	e002      	b.n	80089da <_printf_i+0x1c6>
 80089d4:	0668      	lsls	r0, r5, #25
 80089d6:	d5fb      	bpl.n	80089d0 <_printf_i+0x1bc>
 80089d8:	8019      	strh	r1, [r3, #0]
 80089da:	2300      	movs	r3, #0
 80089dc:	6123      	str	r3, [r4, #16]
 80089de:	4616      	mov	r6, r2
 80089e0:	e7bc      	b.n	800895c <_printf_i+0x148>
 80089e2:	6833      	ldr	r3, [r6, #0]
 80089e4:	1d1a      	adds	r2, r3, #4
 80089e6:	6032      	str	r2, [r6, #0]
 80089e8:	681e      	ldr	r6, [r3, #0]
 80089ea:	6862      	ldr	r2, [r4, #4]
 80089ec:	2100      	movs	r1, #0
 80089ee:	4630      	mov	r0, r6
 80089f0:	f7f7 fbf6 	bl	80001e0 <memchr>
 80089f4:	b108      	cbz	r0, 80089fa <_printf_i+0x1e6>
 80089f6:	1b80      	subs	r0, r0, r6
 80089f8:	6060      	str	r0, [r4, #4]
 80089fa:	6863      	ldr	r3, [r4, #4]
 80089fc:	6123      	str	r3, [r4, #16]
 80089fe:	2300      	movs	r3, #0
 8008a00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a04:	e7aa      	b.n	800895c <_printf_i+0x148>
 8008a06:	6923      	ldr	r3, [r4, #16]
 8008a08:	4632      	mov	r2, r6
 8008a0a:	4649      	mov	r1, r9
 8008a0c:	4640      	mov	r0, r8
 8008a0e:	47d0      	blx	sl
 8008a10:	3001      	adds	r0, #1
 8008a12:	d0ad      	beq.n	8008970 <_printf_i+0x15c>
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	079b      	lsls	r3, r3, #30
 8008a18:	d413      	bmi.n	8008a42 <_printf_i+0x22e>
 8008a1a:	68e0      	ldr	r0, [r4, #12]
 8008a1c:	9b03      	ldr	r3, [sp, #12]
 8008a1e:	4298      	cmp	r0, r3
 8008a20:	bfb8      	it	lt
 8008a22:	4618      	movlt	r0, r3
 8008a24:	e7a6      	b.n	8008974 <_printf_i+0x160>
 8008a26:	2301      	movs	r3, #1
 8008a28:	4632      	mov	r2, r6
 8008a2a:	4649      	mov	r1, r9
 8008a2c:	4640      	mov	r0, r8
 8008a2e:	47d0      	blx	sl
 8008a30:	3001      	adds	r0, #1
 8008a32:	d09d      	beq.n	8008970 <_printf_i+0x15c>
 8008a34:	3501      	adds	r5, #1
 8008a36:	68e3      	ldr	r3, [r4, #12]
 8008a38:	9903      	ldr	r1, [sp, #12]
 8008a3a:	1a5b      	subs	r3, r3, r1
 8008a3c:	42ab      	cmp	r3, r5
 8008a3e:	dcf2      	bgt.n	8008a26 <_printf_i+0x212>
 8008a40:	e7eb      	b.n	8008a1a <_printf_i+0x206>
 8008a42:	2500      	movs	r5, #0
 8008a44:	f104 0619 	add.w	r6, r4, #25
 8008a48:	e7f5      	b.n	8008a36 <_printf_i+0x222>
 8008a4a:	bf00      	nop
 8008a4c:	0800bbc1 	.word	0x0800bbc1
 8008a50:	0800bbd2 	.word	0x0800bbd2

08008a54 <memmove>:
 8008a54:	4288      	cmp	r0, r1
 8008a56:	b510      	push	{r4, lr}
 8008a58:	eb01 0402 	add.w	r4, r1, r2
 8008a5c:	d902      	bls.n	8008a64 <memmove+0x10>
 8008a5e:	4284      	cmp	r4, r0
 8008a60:	4623      	mov	r3, r4
 8008a62:	d807      	bhi.n	8008a74 <memmove+0x20>
 8008a64:	1e43      	subs	r3, r0, #1
 8008a66:	42a1      	cmp	r1, r4
 8008a68:	d008      	beq.n	8008a7c <memmove+0x28>
 8008a6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a72:	e7f8      	b.n	8008a66 <memmove+0x12>
 8008a74:	4402      	add	r2, r0
 8008a76:	4601      	mov	r1, r0
 8008a78:	428a      	cmp	r2, r1
 8008a7a:	d100      	bne.n	8008a7e <memmove+0x2a>
 8008a7c:	bd10      	pop	{r4, pc}
 8008a7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a86:	e7f7      	b.n	8008a78 <memmove+0x24>

08008a88 <_sbrk_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4d06      	ldr	r5, [pc, #24]	@ (8008aa4 <_sbrk_r+0x1c>)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4604      	mov	r4, r0
 8008a90:	4608      	mov	r0, r1
 8008a92:	602b      	str	r3, [r5, #0]
 8008a94:	f7fa f800 	bl	8002a98 <_sbrk>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d102      	bne.n	8008aa2 <_sbrk_r+0x1a>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	b103      	cbz	r3, 8008aa2 <_sbrk_r+0x1a>
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	20000514 	.word	0x20000514

08008aa8 <memcpy>:
 8008aa8:	440a      	add	r2, r1
 8008aaa:	4291      	cmp	r1, r2
 8008aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ab0:	d100      	bne.n	8008ab4 <memcpy+0xc>
 8008ab2:	4770      	bx	lr
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008abe:	4291      	cmp	r1, r2
 8008ac0:	d1f9      	bne.n	8008ab6 <memcpy+0xe>
 8008ac2:	bd10      	pop	{r4, pc}

08008ac4 <_realloc_r>:
 8008ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac8:	4680      	mov	r8, r0
 8008aca:	4615      	mov	r5, r2
 8008acc:	460c      	mov	r4, r1
 8008ace:	b921      	cbnz	r1, 8008ada <_realloc_r+0x16>
 8008ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	f7ff bc4b 	b.w	8008370 <_malloc_r>
 8008ada:	b92a      	cbnz	r2, 8008ae8 <_realloc_r+0x24>
 8008adc:	f7ff fbdc 	bl	8008298 <_free_r>
 8008ae0:	2400      	movs	r4, #0
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae8:	f000 f81a 	bl	8008b20 <_malloc_usable_size_r>
 8008aec:	4285      	cmp	r5, r0
 8008aee:	4606      	mov	r6, r0
 8008af0:	d802      	bhi.n	8008af8 <_realloc_r+0x34>
 8008af2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008af6:	d8f4      	bhi.n	8008ae2 <_realloc_r+0x1e>
 8008af8:	4629      	mov	r1, r5
 8008afa:	4640      	mov	r0, r8
 8008afc:	f7ff fc38 	bl	8008370 <_malloc_r>
 8008b00:	4607      	mov	r7, r0
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d0ec      	beq.n	8008ae0 <_realloc_r+0x1c>
 8008b06:	42b5      	cmp	r5, r6
 8008b08:	462a      	mov	r2, r5
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	bf28      	it	cs
 8008b0e:	4632      	movcs	r2, r6
 8008b10:	f7ff ffca 	bl	8008aa8 <memcpy>
 8008b14:	4621      	mov	r1, r4
 8008b16:	4640      	mov	r0, r8
 8008b18:	f7ff fbbe 	bl	8008298 <_free_r>
 8008b1c:	463c      	mov	r4, r7
 8008b1e:	e7e0      	b.n	8008ae2 <_realloc_r+0x1e>

08008b20 <_malloc_usable_size_r>:
 8008b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b24:	1f18      	subs	r0, r3, #4
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	bfbc      	itt	lt
 8008b2a:	580b      	ldrlt	r3, [r1, r0]
 8008b2c:	18c0      	addlt	r0, r0, r3
 8008b2e:	4770      	bx	lr

08008b30 <_init>:
 8008b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b32:	bf00      	nop
 8008b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b36:	bc08      	pop	{r3}
 8008b38:	469e      	mov	lr, r3
 8008b3a:	4770      	bx	lr

08008b3c <_fini>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	bf00      	nop
 8008b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b42:	bc08      	pop	{r3}
 8008b44:	469e      	mov	lr, r3
 8008b46:	4770      	bx	lr
